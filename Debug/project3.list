
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c760  0800f240  0800f240  0001f240  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9a0  0801b9a0  00030b5c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9a0  0801b9a0  0002b9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9a8  0801b9a8  00030b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9a8  0801b9a8  0002b9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b9ac  0801b9ac  0002b9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b5c  20000000  0801b9b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035e0  20000b5c  0801c50c  00030b5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000413c  0801c50c  0003413c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd36  00000000  00000000  00030b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004290  00000000  00000000  0004c8c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00050b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  000524e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000141db  00000000  00000000  00053d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000902d  00000000  00000000  00067f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00070f58  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008000  00000000  00000000  00070fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         00000024  00000000  00000000  00078fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000003c  00000000  00000000  00078fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b5c 	.word	0x20000b5c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f228 	.word	0x0800f228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b60 	.word	0x20000b60
 80001cc:	0800f228 	.word	0x0800f228

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <gcd>:
volatile int tinyTime = 0;
Minor_Cycle basic_matrix[num_tasks];
//Minor_Cycle *fast_matrix;
Minor_Cycle fast_matrix[MAX_MINOR_CYCLES+1];
int gcd(int a, int b)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    int _max, _min;
    while (1)
    {
        _max = a >= b ? a : b;
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bfb8      	it	lt
 8000ede:	4613      	movlt	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
        _min = a < b ? a : b;
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfa8      	it	ge
 8000eea:	4613      	movge	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        int r = _max % _min;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ef6:	6939      	ldr	r1, [r7, #16]
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
        if (r == 0)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <gcd+0x44>
            break;
        a = r;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	607b      	str	r3, [r7, #4]
        b = _min;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	603b      	str	r3, [r7, #0]
    {
 8000f0e:	e7e2      	b.n	8000ed6 <gcd+0xa>
            break;
 8000f10:	bf00      	nop
    }
    return _min;
 8000f12:	693b      	ldr	r3, [r7, #16]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <registerTask>:
//		a++;
//		b++;
//	}
//}
void registerTask(void (*task)(void),char *name,int minor, int index, int code,int period)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
	basic_matrix[minor].minor_code = minor;
 8000f2e:	492a      	ldr	r1, [pc, #168]	; (8000fd8 <registerTask+0xb8>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
	//strcpy(basic_matrix[minor].task_name[index],name);
	basic_matrix[minor].task_code[index] = code;
 8000f40:	4925      	ldr	r1, [pc, #148]	; (8000fd8 <registerTask+0xb8>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
	basic_matrix[minor].taskList[index] = task;
 8000f58:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <registerTask+0xb8>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	3304      	adds	r3, #4
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	605a      	str	r2, [r3, #4]
	basic_matrix[minor].n_tasks++;
 8000f72:	4919      	ldr	r1, [pc, #100]	; (8000fd8 <registerTask+0xb8>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3324      	adds	r3, #36	; 0x24
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1c59      	adds	r1, r3, #1
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <registerTask+0xb8>)
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4403      	add	r3, r0
 8000f94:	3324      	adds	r3, #36	; 0x24
 8000f96:	6019      	str	r1, [r3, #0]
	tasks[code].task = task;
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <registerTask+0xbc>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2134      	movs	r1, #52	; 0x34
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3314      	adds	r3, #20
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]
	strcpy(tasks[code].task_name,name);
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2234      	movs	r2, #52	; 0x34
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <registerTask+0xbc>)
 8000fb4:	4413      	add	r3, r2
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00b ffc2 	bl	800cf42 <strcpy>
	tasks[code].period = period;
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <registerTask+0xbc>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2134      	movs	r1, #52	; 0x34
 8000fc4:	fb01 f303 	mul.w	r3, r1, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	3318      	adds	r3, #24
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000c64 	.word	0x20000c64
 8000fdc:	20000b84 	.word	0x20000b84

08000fe0 <task_scheduler_tick_reset>:
void task_scheduler_tick_reset(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	major_cycle = 0;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <task_scheduler_tick_reset+0x48>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
	minor_cycle = 0;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <task_scheduler_tick_reset+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&TIM1_Handler);
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <task_scheduler_tick_reset+0x50>)
 8000ff2:	f006 fe77 	bl	8007ce4 <HAL_TIM_Base_Stop_IT>
	TIM1_Handler.Init.Period=SystemCoreClock/(TIM1_Handler.Init.Prescaler+1)/1000*minor_cycle_len;//100ms
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <task_scheduler_tick_reset+0x54>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <task_scheduler_tick_reset+0x50>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <task_scheduler_tick_reset+0x58>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	099b      	lsrs	r3, r3, #6
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <task_scheduler_tick_reset+0x5c>)
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <task_scheduler_tick_reset+0x50>)
 8001016:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Init(&TIM1_Handler);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <task_scheduler_tick_reset+0x50>)
 800101a:	f006 fdb7 	bl	8007b8c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&TIM1_Handler);
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <task_scheduler_tick_reset+0x50>)
 8001020:	f006 fe36 	bl	8007c90 <HAL_TIM_Base_Start_IT>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000b78 	.word	0x20000b78
 800102c:	20000b7c 	.word	0x20000b7c
 8001030:	20002d54 	.word	0x20002d54
 8001034:	20000038 	.word	0x20000038
 8001038:	10624dd3 	.word	0x10624dd3
 800103c:	20000004 	.word	0x20000004

08001040 <changeMode>:
static void changeMode(int showWindowMs)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b0bb      	sub	sp, #236	; 0xec
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
	//change mode
#ifdef  FAST_EN
	char *message = (mode == 0?"----------------------------now in mode basic------------------------------\r\n":"---------------------now in mode fast--------------------\r\n");
 8001048:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <changeMode+0x1b0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <changeMode+0x14>
 8001050:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <changeMode+0x1b4>)
 8001052:	e000      	b.n	8001056 <changeMode+0x16>
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <changeMode+0x1b8>)
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 800105a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800106e:	4863      	ldr	r0, [pc, #396]	; (80011fc <changeMode+0x1bc>)
 8001070:	f007 f8b0 	bl	80081d4 <HAL_UART_Transmit>
	if(mode == 0)
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <changeMode+0x1b0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d150      	bne.n	800111e <changeMode+0xde>
	{
		for(int i=0;i<num_tasks;i++)
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001082:	e036      	b.n	80010f2 <changeMode+0xb2>
		{
			tasks[i].periodSum = 0;
 8001084:	4a5e      	ldr	r2, [pc, #376]	; (8001200 <changeMode+0x1c0>)
 8001086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800108a:	2134      	movs	r1, #52	; 0x34
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	3320      	adds	r3, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
			tasks[i].periodNum = 0;
 8001098:	4a59      	ldr	r2, [pc, #356]	; (8001200 <changeMode+0x1c0>)
 800109a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800109e:	2134      	movs	r1, #52	; 0x34
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	3324      	adds	r3, #36	; 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
			tasks[i].taskTick = 0;
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <changeMode+0x1c0>)
 80010ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010b2:	2134      	movs	r1, #52	; 0x34
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	3330      	adds	r3, #48	; 0x30
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
			tasks[i].executionSum = 0;
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <changeMode+0x1c0>)
 80010c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010c6:	2134      	movs	r1, #52	; 0x34
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	3328      	adds	r3, #40	; 0x28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
			tasks[i].executionNum = 0;
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <changeMode+0x1c0>)
 80010d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	332c      	adds	r3, #44	; 0x2c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
		for(int i=0;i<num_tasks;i++)
 80010e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010ec:	3301      	adds	r3, #1
 80010ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80010f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	ddc4      	ble.n	8001084 <changeMode+0x44>
		lsm6dsl_dready_en();
		lis3mdl_dready_en();
		lps22hb_dready_en();
		hts221_dready_en();
#endif
		major_cycle_len = 1200;
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <changeMode+0x1c4>)
 80010fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001100:	601a      	str	r2, [r3, #0]
		minor_cycle_len = 300;
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <changeMode+0x1c8>)
 8001104:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001108:	601a      	str	r2, [r3, #0]
		number_minor_cycle = 4;
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <changeMode+0x1cc>)
 800110c:	2204      	movs	r2, #4
 800110e:	601a      	str	r2, [r3, #0]
		major_cycle = 0;
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <changeMode+0x1d0>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
		minor_cycle = 0;
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <changeMode+0x1d4>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e061      	b.n	80011e2 <changeMode+0x1a2>
		lsm6dsl_dready_dis();
		lis3mdl_dready_dis();
		lps22hb_dready_dis();
		hts221_dready_dis();
#endif
		buildFastMatrix();
 800111e:	f000 f979 	bl	8001414 <buildFastMatrix>
		showFastMatrix();
 8001122:	f000 fe7d 	bl	8001e20 <showFastMatrix>
		//check the matrix
		char message[200];
		sprintf(message,"major_cycle=%d,minor_cycle=%d,number_of_minor=%d\r\n",major_cycle_len,minor_cycle_len,number_minor_cycle);
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <changeMode+0x1c4>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <changeMode+0x1c8>)
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <changeMode+0x1cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f107 000c 	add.w	r0, r7, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	460b      	mov	r3, r1
 800113a:	4937      	ldr	r1, [pc, #220]	; (8001218 <changeMode+0x1d8>)
 800113c:	f00b fe82 	bl	800ce44 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f84d 	bl	80001e4 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f107 010c 	add.w	r1, r7, #12
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	4829      	ldr	r0, [pc, #164]	; (80011fc <changeMode+0x1bc>)
 8001158:	f007 f83c 	bl	80081d4 <HAL_UART_Transmit>
		for(int i=0;i<num_tasks;i++)
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001162:	e032      	b.n	80011ca <changeMode+0x18a>
		{
			sprintf(message,"task %s:(period,execution):(%d,%d)\r\n",tasks[i].task_name,tasks[i].period,tasks[i].execution);
 8001164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001168:	2234      	movs	r2, #52	; 0x34
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <changeMode+0x1c0>)
 8001170:	441a      	add	r2, r3
 8001172:	4923      	ldr	r1, [pc, #140]	; (8001200 <changeMode+0x1c0>)
 8001174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001178:	2034      	movs	r0, #52	; 0x34
 800117a:	fb00 f303 	mul.w	r3, r0, r3
 800117e:	440b      	add	r3, r1
 8001180:	3318      	adds	r3, #24
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	481e      	ldr	r0, [pc, #120]	; (8001200 <changeMode+0x1c0>)
 8001186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800118a:	2434      	movs	r4, #52	; 0x34
 800118c:	fb04 f303 	mul.w	r3, r4, r3
 8001190:	4403      	add	r3, r0
 8001192:	331c      	adds	r3, #28
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f107 000c 	add.w	r0, r7, #12
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	460b      	mov	r3, r1
 800119e:	491f      	ldr	r1, [pc, #124]	; (800121c <changeMode+0x1dc>)
 80011a0:	f00b fe50 	bl	800ce44 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f81b 	bl	80001e4 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 010c 	add.w	r1, r7, #12
 80011b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <changeMode+0x1bc>)
 80011bc:	f007 f80a 	bl	80081d4 <HAL_UART_Transmit>
		for(int i=0;i<num_tasks;i++)
 80011c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011c4:	3301      	adds	r3, #1
 80011c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80011ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	ddc8      	ble.n	8001164 <changeMode+0x124>
		}
		HAL_Delay(showWindowMs*1000);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fe59 	bl	8004e94 <HAL_Delay>

	}
	task_scheduler_tick_reset();
 80011e2:	f7ff fefd 	bl	8000fe0 <task_scheduler_tick_reset>
		sprintf(message,"task %s:(period,execution):(%d,%d)\r\n",tasks[i].task_name,tasks[i].period,tasks[i].execution);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
	}
	HAL_Delay(showWindowMs*1000);
#endif
}
 80011e6:	bf00      	nop
 80011e8:	37e4      	adds	r7, #228	; 0xe4
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000c54 	.word	0x20000c54
 80011f4:	0800f240 	.word	0x0800f240
 80011f8:	0800f290 	.word	0x0800f290
 80011fc:	20002cd4 	.word	0x20002cd4
 8001200:	20000b84 	.word	0x20000b84
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004
 800120c:	20000008 	.word	0x20000008
 8001210:	20000b78 	.word	0x20000b78
 8001214:	20000b7c 	.word	0x20000b7c
 8001218:	0800f2cc 	.word	0x0800f2cc
 800121c:	0800f300 	.word	0x0800f300

08001220 <task_scheduler>:
void task_scheduler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0b8      	sub	sp, #224	; 0xe0
 8001224:	af00      	add	r7, sp, #0
	task_scheduler_tick_reset();
 8001226:	f7ff fedb 	bl	8000fe0 <task_scheduler_tick_reset>
	while(1)
	{
		//setPos();
		system_time = HAL_GetTick();
 800122a:	f003 fe27 	bl	8004e7c <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
 8001230:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <task_scheduler+0x18c>)
 8001232:	6013      	str	r3, [r2, #0]
		if(changeModeMark)
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <task_scheduler+0x190>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <task_scheduler+0x28>
		{
			changeModeMark = 0;
 800123c:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <task_scheduler+0x190>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
			changeMode(SHOW_WINDOW);
 8001242:	200a      	movs	r0, #10
 8001244:	f7ff fefc 	bl	8001040 <changeMode>
		}
		pos=0;
 8001248:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <task_scheduler+0x194>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
		if(mode==0)
 800124e:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <task_scheduler+0x198>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d16a      	bne.n	800132c <task_scheduler+0x10c>
		{
			for(int i=0;i<basic_matrix[minor_cycle].n_tasks;i++)
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800125c:	e057      	b.n	800130e <task_scheduler+0xee>
			{
				int t1 = HAL_GetTick();
 800125e:	f003 fe0d 	bl	8004e7c <HAL_GetTick>
 8001262:	4603      	mov	r3, r0
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				basic_matrix[minor_cycle].taskList[i]();
 8001268:	4b54      	ldr	r3, [pc, #336]	; (80013bc <task_scheduler+0x19c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4954      	ldr	r1, [pc, #336]	; (80013c0 <task_scheduler+0x1a0>)
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800127a:	4413      	add	r3, r2
 800127c:	3304      	adds	r3, #4
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4798      	blx	r3
				int t2 = HAL_GetTick();
 8001286:	f003 fdf9 	bl	8004e7c <HAL_GetTick>
 800128a:	4603      	mov	r3, r0
 800128c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				int code = basic_matrix[minor_cycle].task_code[i];
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <task_scheduler+0x19c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	494a      	ldr	r1, [pc, #296]	; (80013c0 <task_scheduler+0x1a0>)
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				tasks[code].executionSum+=(t2-t1);
 80012ae:	4a45      	ldr	r2, [pc, #276]	; (80013c4 <task_scheduler+0x1a4>)
 80012b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012b4:	2134      	movs	r1, #52	; 0x34
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	3328      	adds	r3, #40	; 0x28
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012c8:	1acb      	subs	r3, r1, r3
 80012ca:	441a      	add	r2, r3
 80012cc:	493d      	ldr	r1, [pc, #244]	; (80013c4 <task_scheduler+0x1a4>)
 80012ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012d2:	2034      	movs	r0, #52	; 0x34
 80012d4:	fb00 f303 	mul.w	r3, r0, r3
 80012d8:	440b      	add	r3, r1
 80012da:	3328      	adds	r3, #40	; 0x28
 80012dc:	601a      	str	r2, [r3, #0]
				tasks[code].executionNum++;
 80012de:	4a39      	ldr	r2, [pc, #228]	; (80013c4 <task_scheduler+0x1a4>)
 80012e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012e4:	2134      	movs	r1, #52	; 0x34
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	332c      	adds	r3, #44	; 0x2c
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4934      	ldr	r1, [pc, #208]	; (80013c4 <task_scheduler+0x1a4>)
 80012f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012f8:	2034      	movs	r0, #52	; 0x34
 80012fa:	fb00 f303 	mul.w	r3, r0, r3
 80012fe:	440b      	add	r3, r1
 8001300:	332c      	adds	r3, #44	; 0x2c
 8001302:	601a      	str	r2, [r3, #0]
			for(int i=0;i<basic_matrix[minor_cycle].n_tasks;i++)
 8001304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001308:	3301      	adds	r3, #1
 800130a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <task_scheduler+0x19c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	492b      	ldr	r1, [pc, #172]	; (80013c0 <task_scheduler+0x1a0>)
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	3324      	adds	r3, #36	; 0x24
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001326:	429a      	cmp	r2, r3
 8001328:	db99      	blt.n	800125e <task_scheduler+0x3e>
 800132a:	e025      	b.n	8001378 <task_scheduler+0x158>
			}
		}
		else
		{
			for(int i=0;i<fast_matrix[minor_cycle].n_tasks;i++)
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001332:	e013      	b.n	800135c <task_scheduler+0x13c>
			{
				char message[200];
//				sprintf(message,"(%d tasks)(%d,%d)execution addr:%x\r\n",fast_matrix[minor_cycle].n_tasks,minor_cycle,i,fast_matrix[minor_cycle].taskList[i]);
//				HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
				fast_matrix[minor_cycle].taskList[i]();
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <task_scheduler+0x19c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4923      	ldr	r1, [pc, #140]	; (80013c8 <task_scheduler+0x1a8>)
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4798      	blx	r3
			for(int i=0;i<fast_matrix[minor_cycle].n_tasks;i++)
 8001352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <task_scheduler+0x19c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4919      	ldr	r1, [pc, #100]	; (80013c8 <task_scheduler+0x1a8>)
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	3324      	adds	r3, #36	; 0x24
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001374:	429a      	cmp	r2, r3
 8001376:	dbdd      	blt.n	8001334 <task_scheduler+0x114>
			}
		}
		minor_cycle++;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <task_scheduler+0x19c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <task_scheduler+0x19c>)
 8001380:	6013      	str	r3, [r2, #0]
		if(minor_cycle==number_minor_cycle)
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <task_scheduler+0x19c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <task_scheduler+0x1ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d107      	bne.n	800139e <task_scheduler+0x17e>
		{
			minor_cycle = 0;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <task_scheduler+0x19c>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
			major_cycle++;
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <task_scheduler+0x1b0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <task_scheduler+0x1b0>)
 800139c:	6013      	str	r3, [r2, #0]
		}
		while(pos==0);
 800139e:	bf00      	nop
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <task_scheduler+0x194>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0fb      	beq.n	80013a0 <task_scheduler+0x180>
		system_time = HAL_GetTick();
 80013a8:	e73f      	b.n	800122a <task_scheduler+0xa>
 80013aa:	bf00      	nop
 80013ac:	20000b80 	.word	0x20000b80
 80013b0:	20000c5c 	.word	0x20000c5c
 80013b4:	20000c58 	.word	0x20000c58
 80013b8:	20000c54 	.word	0x20000c54
 80013bc:	20000b7c 	.word	0x20000b7c
 80013c0:	20000c64 	.word	0x20000c64
 80013c4:	20000b84 	.word	0x20000b84
 80013c8:	20000d04 	.word	0x20000d04
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000b78 	.word	0x20000b78

080013d4 <lcm>:
	}
}
int lcm(int a,int b)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	int m = gcd(a,b);
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fd73 	bl	8000ecc <gcd>
 80013e6:	6178      	str	r0, [r7, #20]
	int a1 = a/m;
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f0:	613b      	str	r3, [r7, #16]
	int b1 = b/m;
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
	return a1*b1*m;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <buildFastMatrix>:
void buildFastMatrix(void)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b0ef      	sub	sp, #444	; 0x1bc
 8001418:	af00      	add	r7, sp, #0
	for(int i=0;i<num_tasks;i++)
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001420:	e0a1      	b.n	8001566 <buildFastMatrix+0x152>
	{
#ifdef PERIOD_MEASUREMENT
		tasks[i].period = floor(tasks[i].periodSum/tasks[i].periodNum);
#endif
		tasks[i].execution = floor(tasks[i].executionSum/ tasks[i].executionNum);
 8001422:	4aa2      	ldr	r2, [pc, #648]	; (80016ac <buildFastMatrix+0x298>)
 8001424:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001428:	2134      	movs	r1, #52	; 0x34
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	3328      	adds	r3, #40	; 0x28
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800143c:	4a9b      	ldr	r2, [pc, #620]	; (80016ac <buildFastMatrix+0x298>)
 800143e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001442:	2134      	movs	r1, #52	; 0x34
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	332c      	adds	r3, #44	; 0x2c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800145a:	4a94      	ldr	r2, [pc, #592]	; (80016ac <buildFastMatrix+0x298>)
 800145c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001460:	2134      	movs	r1, #52	; 0x34
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	4413      	add	r3, r2
 8001468:	3328      	adds	r3, #40	; 0x28
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	498f      	ldr	r1, [pc, #572]	; (80016ac <buildFastMatrix+0x298>)
 800146e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001472:	2034      	movs	r0, #52	; 0x34
 8001474:	fb00 f303 	mul.w	r3, r0, r3
 8001478:	440b      	add	r3, r1
 800147a:	332c      	adds	r3, #44	; 0x2c
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd15      	ble.n	80014c4 <buildFastMatrix+0xb0>
 8001498:	4a84      	ldr	r2, [pc, #528]	; (80016ac <buildFastMatrix+0x298>)
 800149a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800149e:	2134      	movs	r1, #52	; 0x34
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	3328      	adds	r3, #40	; 0x28
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4980      	ldr	r1, [pc, #512]	; (80016ac <buildFastMatrix+0x298>)
 80014ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014b0:	2034      	movs	r0, #52	; 0x34
 80014b2:	fb00 f303 	mul.w	r3, r0, r3
 80014b6:	440b      	add	r3, r1
 80014b8:	332c      	adds	r3, #44	; 0x2c
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	e013      	b.n	80014ec <buildFastMatrix+0xd8>
 80014c4:	4a79      	ldr	r2, [pc, #484]	; (80016ac <buildFastMatrix+0x298>)
 80014c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014ca:	2134      	movs	r1, #52	; 0x34
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	3328      	adds	r3, #40	; 0x28
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4975      	ldr	r1, [pc, #468]	; (80016ac <buildFastMatrix+0x298>)
 80014d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014dc:	2034      	movs	r0, #52	; 0x34
 80014de:	fb00 f303 	mul.w	r3, r0, r3
 80014e2:	440b      	add	r3, r1
 80014e4:	332c      	adds	r3, #44	; 0x2c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ec:	496f      	ldr	r1, [pc, #444]	; (80016ac <buildFastMatrix+0x298>)
 80014ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80014f2:	2034      	movs	r0, #52	; 0x34
 80014f4:	fb00 f202 	mul.w	r2, r0, r2
 80014f8:	440a      	add	r2, r1
 80014fa:	321c      	adds	r2, #28
 80014fc:	6013      	str	r3, [r2, #0]
		//align period to 5
		int r = tasks[i].period%5;
 80014fe:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <buildFastMatrix+0x298>)
 8001500:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001504:	2134      	movs	r1, #52	; 0x34
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	3318      	adds	r3, #24
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <buildFastMatrix+0x29c>)
 8001512:	fb83 1302 	smull	r1, r3, r3, r2
 8001516:	1059      	asrs	r1, r3, #1
 8001518:	17d3      	asrs	r3, r2, #31
 800151a:	1ac9      	subs	r1, r1, r3
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		if(r>0)
 8001528:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800152c:	2b00      	cmp	r3, #0
 800152e:	dd15      	ble.n	800155c <buildFastMatrix+0x148>
		tasks[i].period = tasks[i].period+5-r;
 8001530:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <buildFastMatrix+0x298>)
 8001532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001536:	2134      	movs	r1, #52	; 0x34
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	3318      	adds	r3, #24
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1d5a      	adds	r2, r3, #5
 8001544:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	4958      	ldr	r1, [pc, #352]	; (80016ac <buildFastMatrix+0x298>)
 800154c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001550:	2034      	movs	r0, #52	; 0x34
 8001552:	fb00 f303 	mul.w	r3, r0, r3
 8001556:	440b      	add	r3, r1
 8001558:	3318      	adds	r3, #24
 800155a:	601a      	str	r2, [r3, #0]
	for(int i=0;i<num_tasks;i++)
 800155c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001560:	3301      	adds	r3, #1
 8001562:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001566:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800156a:	2b03      	cmp	r3, #3
 800156c:	f77f af59 	ble.w	8001422 <buildFastMatrix+0xe>
 	}
	if(num_tasks>1)
	{
		int gcd_matrix[num_tasks-1],lcm_matrix[num_tasks-1];
		gcd_matrix[0] = gcd(tasks[0].period,tasks[1].period);
 8001570:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <buildFastMatrix+0x298>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <buildFastMatrix+0x298>)
 8001576:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fca6 	bl	8000ecc <gcd>
 8001580:	4603      	mov	r3, r0
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		lcm_matrix[0] = lcm(tasks[0].period,tasks[1].period);
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <buildFastMatrix+0x298>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a48      	ldr	r2, [pc, #288]	; (80016ac <buildFastMatrix+0x298>)
 800158c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff1f 	bl	80013d4 <lcm>
 8001596:	4603      	mov	r3, r0
 8001598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		for(int i=0;i<=num_tasks-3;i++)
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80015a2:	e042      	b.n	800162a <buildFastMatrix+0x216>
		{
			gcd_matrix[i+1] = gcd(gcd_matrix[i],tasks[i+2].period);
 80015a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015ae:	443b      	add	r3, r7
 80015b0:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 80015b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015b8:	3302      	adds	r3, #2
 80015ba:	493c      	ldr	r1, [pc, #240]	; (80016ac <buildFastMatrix+0x298>)
 80015bc:	2034      	movs	r0, #52	; 0x34
 80015be:	fb00 f303 	mul.w	r3, r0, r3
 80015c2:	440b      	add	r3, r1
 80015c4:	3318      	adds	r3, #24
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015cc:	1c5c      	adds	r4, r3, #1
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fc7c 	bl	8000ecc <gcd>
 80015d4:	4602      	mov	r2, r0
 80015d6:	00a3      	lsls	r3, r4, #2
 80015d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015dc:	443b      	add	r3, r7
 80015de:	f843 2cd4 	str.w	r2, [r3, #-212]
			lcm_matrix[i+1] = lcm(lcm_matrix[i],tasks[i+2].period);
 80015e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015ec:	443b      	add	r3, r7
 80015ee:	f853 2ce0 	ldr.w	r2, [r3, #-224]
 80015f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015f6:	3302      	adds	r3, #2
 80015f8:	492c      	ldr	r1, [pc, #176]	; (80016ac <buildFastMatrix+0x298>)
 80015fa:	2034      	movs	r0, #52	; 0x34
 80015fc:	fb00 f303 	mul.w	r3, r0, r3
 8001600:	440b      	add	r3, r1
 8001602:	3318      	adds	r3, #24
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800160a:	1c5c      	adds	r4, r3, #1
 800160c:	4610      	mov	r0, r2
 800160e:	f7ff fee1 	bl	80013d4 <lcm>
 8001612:	4602      	mov	r2, r0
 8001614:	00a3      	lsls	r3, r4, #2
 8001616:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800161a:	443b      	add	r3, r7
 800161c:	f843 2ce0 	str.w	r2, [r3, #-224]
		for(int i=0;i<=num_tasks-3;i++)
 8001620:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001624:	3301      	adds	r3, #1
 8001626:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800162a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800162e:	2b01      	cmp	r3, #1
 8001630:	ddb8      	ble.n	80015a4 <buildFastMatrix+0x190>
		}

		minor_cycle_len = gcd_matrix[num_tasks-2];
 8001632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001636:	461a      	mov	r2, r3
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <buildFastMatrix+0x2a0>)
 800163a:	601a      	str	r2, [r3, #0]
		major_cycle_len = lcm_matrix[num_tasks-2];
 800163c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001640:	461a      	mov	r2, r3
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <buildFastMatrix+0x2a4>)
 8001644:	601a      	str	r2, [r3, #0]
		int exe;
		int code;
	};
	//we need this code Map for minor_cycle modification
	struct task_bond taskOrder[num_tasks];
	for(int i=0;i<num_tasks;i++)
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800164c:	e01f      	b.n	800168e <buildFastMatrix+0x27a>
	{
		taskOrder[i].code = i;
 800164e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001658:	443b      	add	r3, r7
 800165a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800165e:	f843 2c94 	str.w	r2, [r3, #-148]
		taskOrder[i].exe = tasks[i].execution;
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <buildFastMatrix+0x298>)
 8001664:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001668:	2134      	movs	r1, #52	; 0x34
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	331c      	adds	r3, #28
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800167e:	443b      	add	r3, r7
 8001680:	f843 2c98 	str.w	r2, [r3, #-152]
	for(int i=0;i<num_tasks;i++)
 8001684:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001688:	3301      	adds	r3, #1
 800168a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800168e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001692:	2b03      	cmp	r3, #3
 8001694:	dddb      	ble.n	800164e <buildFastMatrix+0x23a>
	}
	for(int i=num_tasks;i>1;i--)
 8001696:	2304      	movs	r3, #4
 8001698:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800169c:	e062      	b.n	8001764 <buildFastMatrix+0x350>
	{
		int pos = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		for(int j=0;j<i;j++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016aa:	e022      	b.n	80016f2 <buildFastMatrix+0x2de>
 80016ac:	20000b84 	.word	0x20000b84
 80016b0:	66666667 	.word	0x66666667
 80016b4:	20000004 	.word	0x20000004
 80016b8:	20000000 	.word	0x20000000
		{
			if(taskOrder[j].exe>taskOrder[pos].exe)
 80016bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c6:	443b      	add	r3, r7
 80016c8:	f853 2c98 	ldr.w	r2, [r3, #-152]
 80016cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016d6:	443b      	add	r3, r7
 80016d8:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dd03      	ble.n	80016e8 <buildFastMatrix+0x2d4>
			{
				pos = j;
 80016e0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		for(int j=0;j<i;j++)
 80016e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016f2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80016f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbde      	blt.n	80016bc <buildFastMatrix+0x2a8>
			}
		}
		struct task_bond tmp = taskOrder[i-1];
 80016fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001702:	3b01      	subs	r3, #1
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800170a:	443b      	add	r3, r7
 800170c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001710:	3b98      	subs	r3, #152	; 0x98
 8001712:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001716:	e882 0003 	stmia.w	r2, {r0, r1}
		taskOrder[i-1] = taskOrder[pos];
 800171a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800171e:	3b01      	subs	r3, #1
 8001720:	00da      	lsls	r2, r3, #3
 8001722:	f502 73dc 	add.w	r3, r2, #440	; 0x1b8
 8001726:	19da      	adds	r2, r3, r7
 8001728:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001732:	443b      	add	r3, r7
 8001734:	3a98      	subs	r2, #152	; 0x98
 8001736:	3b98      	subs	r3, #152	; 0x98
 8001738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800173c:	e882 0003 	stmia.w	r2, {r0, r1}
		taskOrder[pos] = tmp;
 8001740:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800174a:	443b      	add	r3, r7
 800174c:	3b98      	subs	r3, #152	; 0x98
 800174e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001756:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=num_tasks;i>1;i--)
 800175a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800175e:	3b01      	subs	r3, #1
 8001760:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001764:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001768:	2b01      	cmp	r3, #1
 800176a:	dc98      	bgt.n	800169e <buildFastMatrix+0x28a>
	}
	if(taskOrder[num_tasks-1].exe>minor_cycle_len)
 800176c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001770:	461a      	mov	r2, r3
 8001772:	4ba5      	ldr	r3, [pc, #660]	; (8001a08 <buildFastMatrix+0x5f4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d91c      	bls.n	80017b4 <buildFastMatrix+0x3a0>
	{
		minor_cycle_len = taskOrder[num_tasks-1].exe;
 800177a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800177e:	461a      	mov	r2, r3
 8001780:	4ba1      	ldr	r3, [pc, #644]	; (8001a08 <buildFastMatrix+0x5f4>)
 8001782:	601a      	str	r2, [r3, #0]
		int r = minor_cycle_len % 5;
 8001784:	4ba0      	ldr	r3, [pc, #640]	; (8001a08 <buildFastMatrix+0x5f4>)
 8001786:	6819      	ldr	r1, [r3, #0]
 8001788:	4ba0      	ldr	r3, [pc, #640]	; (8001a0c <buildFastMatrix+0x5f8>)
 800178a:	fba3 2301 	umull	r2, r3, r3, r1
 800178e:	089a      	lsrs	r2, r3, #2
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	1aca      	subs	r2, r1, r3
 8001798:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
		if(r>0)
 800179c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd07      	ble.n	80017b4 <buildFastMatrix+0x3a0>
		{
			minor_cycle_len+=(5-r);
 80017a4:	4b98      	ldr	r3, [pc, #608]	; (8001a08 <buildFastMatrix+0x5f4>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	3305      	adds	r3, #5
 80017b0:	4a95      	ldr	r2, [pc, #596]	; (8001a08 <buildFastMatrix+0x5f4>)
 80017b2:	6013      	str	r3, [r2, #0]
		}
	}
	//Get largestT as major cycle
	//We also need this cause I want a period oriented sjf like scheduler in each minor cycle
	struct task_bond taskT[num_tasks];
	for(int i=0;i<num_tasks;i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017ba:	e01f      	b.n	80017fc <buildFastMatrix+0x3e8>
	{
		taskT[i].code = i;
 80017bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c6:	443b      	add	r3, r7
 80017c8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017cc:	f843 2cb4 	str.w	r2, [r3, #-180]
		taskT[i].exe = tasks[i].period;
 80017d0:	4a8f      	ldr	r2, [pc, #572]	; (8001a10 <buildFastMatrix+0x5fc>)
 80017d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017d6:	2134      	movs	r1, #52	; 0x34
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3318      	adds	r3, #24
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ec:	443b      	add	r3, r7
 80017ee:	f843 2cb8 	str.w	r2, [r3, #-184]
	for(int i=0;i<num_tasks;i++)
 80017f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017f6:	3301      	adds	r3, #1
 80017f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001800:	2b03      	cmp	r3, #3
 8001802:	dddb      	ble.n	80017bc <buildFastMatrix+0x3a8>
	}
	for(int i=num_tasks;i>1;i--)
 8001804:	2304      	movs	r3, #4
 8001806:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800180a:	e05a      	b.n	80018c2 <buildFastMatrix+0x4ae>
	{
		int pos = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		for(int j=0;j<i;j++)
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001818:	e01a      	b.n	8001850 <buildFastMatrix+0x43c>
		{
			if(taskT[j].exe>taskT[pos].exe)
 800181a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001824:	443b      	add	r3, r7
 8001826:	f853 2cb8 	ldr.w	r2, [r3, #-184]
 800182a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001834:	443b      	add	r3, r7
 8001836:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800183a:	429a      	cmp	r2, r3
 800183c:	dd03      	ble.n	8001846 <buildFastMatrix+0x432>
			{
				pos = j;
 800183e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001842:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		for(int j=0;j<i;j++)
 8001846:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800184a:	3301      	adds	r3, #1
 800184c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001850:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001854:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001858:	429a      	cmp	r2, r3
 800185a:	dbde      	blt.n	800181a <buildFastMatrix+0x406>
			}
		}
		struct task_bond tmp = taskT[i-1];
 800185c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001860:	3b01      	subs	r3, #1
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001868:	443b      	add	r3, r7
 800186a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800186e:	3bb8      	subs	r3, #184	; 0xb8
 8001870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001874:	e882 0003 	stmia.w	r2, {r0, r1}
		taskT[i-1] = taskT[pos];
 8001878:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800187c:	3b01      	subs	r3, #1
 800187e:	00da      	lsls	r2, r3, #3
 8001880:	f502 73dc 	add.w	r3, r2, #440	; 0x1b8
 8001884:	19da      	adds	r2, r3, r7
 8001886:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001890:	443b      	add	r3, r7
 8001892:	3ab8      	subs	r2, #184	; 0xb8
 8001894:	3bb8      	subs	r3, #184	; 0xb8
 8001896:	e893 0003 	ldmia.w	r3, {r0, r1}
 800189a:	e882 0003 	stmia.w	r2, {r0, r1}
		taskT[pos] = tmp;
 800189e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a8:	443b      	add	r3, r7
 80018aa:	3bb8      	subs	r3, #184	; 0xb8
 80018ac:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80018b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b4:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=num_tasks;i>1;i--)
 80018b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80018bc:	3b01      	subs	r3, #1
 80018be:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80018c2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	dca0      	bgt.n	800180c <buildFastMatrix+0x3f8>
	}
	number_minor_cycle = floor(major_cycle_len/minor_cycle_len);
 80018ca:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <buildFastMatrix+0x600>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <buildFastMatrix+0x5f4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <buildFastMatrix+0x600>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <buildFastMatrix+0x5f4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	dd07      	ble.n	8001918 <buildFastMatrix+0x504>
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <buildFastMatrix+0x600>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <buildFastMatrix+0x5f4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	3301      	adds	r3, #1
 8001916:	e005      	b.n	8001924 <buildFastMatrix+0x510>
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <buildFastMatrix+0x600>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <buildFastMatrix+0x5f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <buildFastMatrix+0x604>)
 8001926:	6013      	str	r3, [r2, #0]
	int tail_idle = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	if(number_minor_cycle> MAX_MINOR_CYCLES)
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <buildFastMatrix+0x604>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2bc8      	cmp	r3, #200	; 0xc8
 8001934:	d92f      	bls.n	8001996 <buildFastMatrix+0x582>
		//if it will, the taskX shouldn't execute, there needs a blank before next major cycle.
		//Missing scheduling between scheduling points is tolerable in table scheduler(if ddl is absent), but execute task before its scheduling point is
		//not tolerable in some cases.
		//What's more, for our accelerometer, execution time may even be longer than period,
		//a good proof of missing scheduling is ok...(rare, but happened actually)
		number_minor_cycle =  MAX_MINOR_CYCLES;
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <buildFastMatrix+0x604>)
 8001938:	22c8      	movs	r2, #200	; 0xc8
 800193a:	601a      	str	r2, [r3, #0]
		//this one is to guarantee period behavior doesn't go wrong
		//when new cycle begins, all the tasks should be ready(at pos_t 0)
		//though not necessary for our tasks, but for general purpose
		//We should change length of minor cycles instead of length of major cycles, for period task principle
		minor_cycle_len = major_cycle_len/number_minor_cycle;
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <buildFastMatrix+0x600>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <buildFastMatrix+0x604>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <buildFastMatrix+0x5f4>)
 800194a:	6013      	str	r3, [r2, #0]
		if(minor_cycle_len*number_minor_cycle!=major_cycle_len)
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <buildFastMatrix+0x5f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <buildFastMatrix+0x604>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fb03 f202 	mul.w	r2, r3, r2
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <buildFastMatrix+0x600>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d007      	beq.n	8001970 <buildFastMatrix+0x55c>
		{
			number_minor_cycle+=1;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <buildFastMatrix+0x604>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <buildFastMatrix+0x604>)
 8001968:	6013      	str	r3, [r2, #0]
			//shouldn't do any tasks in idle minor cycle,
			//or there's possibility we don't get all tasks ready in new major cycle
			tail_idle = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		}
		char message[200];
		sprintf(message,"warning:number of minor cycles(%d) overlapping boundary(%d)",number_minor_cycle,MAX_MINOR_CYCLES);
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <buildFastMatrix+0x604>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4638      	mov	r0, r7
 8001976:	23c8      	movs	r3, #200	; 0xc8
 8001978:	4928      	ldr	r1, [pc, #160]	; (8001a1c <buildFastMatrix+0x608>)
 800197a:	f00b fa63 	bl	800ce44 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 800197e:	463b      	mov	r3, r7
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc2f 	bl	80001e4 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	4639      	mov	r1, r7
 800198c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001990:	4823      	ldr	r0, [pc, #140]	; (8001a20 <buildFastMatrix+0x60c>)
 8001992:	f006 fc1f 	bl	80081d4 <HAL_UART_Transmit>
	}
	//rdy queue doesn't allow 2 same task
	int queen_mark[num_tasks];
	//first enqueue use execution order, and the rest time use
	for(int i=0;i<num_tasks;i++)
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800199c:	e026      	b.n	80019ec <buildFastMatrix+0x5d8>
	{
		ready_queen[i] = taskOrder[i].code;
 800199e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019a8:	443b      	add	r3, r7
 80019aa:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80019ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b8:	443b      	add	r3, r7
 80019ba:	f843 2c68 	str.w	r2, [r3, #-104]
		rest_time_tasks[i] = 0;
 80019be:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019c8:	443b      	add	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	f843 2c78 	str.w	r2, [r3, #-120]
		queen_mark[i] = 1;
 80019d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019da:	443b      	add	r3, r7
 80019dc:	2201      	movs	r2, #1
 80019de:	f843 2cc8 	str.w	r2, [r3, #-200]
	for(int i=0;i<num_tasks;i++)
 80019e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	ddd4      	ble.n	800199e <buildFastMatrix+0x58a>
	}
//	extern int _eheap;
//	fast_matrix = (Minor_Cycle*)&_eheap;
	//fast_matrix = (Minor_Cycle*)(HEAP_BASE - sizeof(Minor_Cycle)*number_minor_cycle);
	int head = 0,tail = num_tasks;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019fa:	2304      	movs	r3, #4
 80019fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	//core of the scheduler
	for(int i=0;i<number_minor_cycle;i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a06:	e127      	b.n	8001c58 <buildFastMatrix+0x844>
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	20000b84 	.word	0x20000b84
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	0800f328 	.word	0x0800f328
 8001a20:	20002cd4 	.word	0x20002cd4
	{
		int rest_time = minor_cycle_len;
 8001a24:	4b9a      	ldr	r3, [pc, #616]	; (8001c90 <buildFastMatrix+0x87c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		int numer = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		fast_matrix[i].minor_code = i;
 8001a32:	4998      	ldr	r1, [pc, #608]	; (8001c94 <buildFastMatrix+0x880>)
 8001a34:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a46:	601a      	str	r2, [r3, #0]
		while(1)
		{
			//queen is the same size as num_tasks, thus never gets full
			if(head==tail)
 8001a48:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001a4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d070      	beq.n	8001b36 <buildFastMatrix+0x722>
				//complies relatively generic way of scheduling
				break;
			}
			else
			{
				int taskCode = ready_queen[(head)%(num_tasks+1)];
 8001a54:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001a58:	4b8f      	ldr	r3, [pc, #572]	; (8001c98 <buildFastMatrix+0x884>)
 8001a5a:	fb83 2301 	smull	r2, r3, r3, r1
 8001a5e:	105a      	asrs	r2, r3, #1
 8001a60:	17cb      	asrs	r3, r1, #31
 8001a62:	1ad2      	subs	r2, r2, r3
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	0093      	lsls	r3, r2, #2
 8001a6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a72:	443b      	add	r3, r7
 8001a74:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001a78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

				rest_time-=tasks[taskCode].execution;
 8001a7c:	4a87      	ldr	r2, [pc, #540]	; (8001c9c <buildFastMatrix+0x888>)
 8001a7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a82:	2134      	movs	r1, #52	; 0x34
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	331c      	adds	r3, #28
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
				if(rest_time<0)
 8001a98:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db4c      	blt.n	8001b3a <buildFastMatrix+0x726>
				{
					break;
				}
				//dequeue
				head++;
 8001aa0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
				rest_time_tasks[taskCode] = tasks[taskCode].period;
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <buildFastMatrix+0x888>)
 8001aac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ab0:	2134      	movs	r1, #52	; 0x34
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3318      	adds	r3, #24
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f843 2c78 	str.w	r2, [r3, #-120]
				queen_mark[taskCode] = 0;
 8001acc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad6:	443b      	add	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f843 2cc8 	str.w	r2, [r3, #-200]
				fast_matrix[i].task_code[numer] = taskCode;
 8001ade:	496d      	ldr	r1, [pc, #436]	; (8001c94 <buildFastMatrix+0x880>)
 8001ae0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001afa:	605a      	str	r2, [r3, #4]
				//strcpy(fast_matrix[i].task_name[numer],tasks[taskCode].task_name);
				fast_matrix[i].taskList[numer] = tasks[taskCode].task;
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <buildFastMatrix+0x888>)
 8001afe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b02:	2134      	movs	r1, #52	; 0x34
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	4861      	ldr	r0, [pc, #388]	; (8001c94 <buildFastMatrix+0x880>)
 8001b10:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4403      	add	r3, r0
 8001b28:	6059      	str	r1, [r3, #4]
				numer++;
 8001b2a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			if(head==tail)
 8001b34:	e788      	b.n	8001a48 <buildFastMatrix+0x634>
				break;
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <buildFastMatrix+0x728>
					break;
 8001b3a:	bf00      	nop
			}
		}
		for(int j=0;j<num_tasks;j++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001b42:	e074      	b.n	8001c2e <buildFastMatrix+0x81a>
		{
			//already in queue: skip
			if(queen_mark[taskT[j].code]==1)
 8001b44:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b4e:	443b      	add	r3, r7
 8001b50:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d05e      	beq.n	8001c22 <buildFastMatrix+0x80e>
			{
				continue;
			}
			rest_time_tasks[taskT[j].code]-=minor_cycle_len;
 8001b64:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b6e:	443b      	add	r3, r7
 8001b70:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b7a:	443b      	add	r3, r7
 8001b7c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <buildFastMatrix+0x87c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1ad2      	subs	r2, r2, r3
 8001b88:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b92:	443b      	add	r3, r7
 8001b94:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9e:	443b      	add	r3, r7
 8001ba0:	f843 2c78 	str.w	r2, [r3, #-120]
			if(rest_time_tasks[taskT[j].code]<=0)
 8001ba4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bae:	443b      	add	r3, r7
 8001bb0:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bba:	443b      	add	r3, r7
 8001bbc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dc2f      	bgt.n	8001c24 <buildFastMatrix+0x810>
			{
				ready_queen[tail%(num_tasks+1)] = taskT[j].code;
 8001bc4:	f8d7 1180 	ldr.w	r1, [r7, #384]	; 0x180
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <buildFastMatrix+0x884>)
 8001bca:	fb83 2301 	smull	r2, r3, r3, r1
 8001bce:	105a      	asrs	r2, r3, #1
 8001bd0:	17cb      	asrs	r3, r1, #31
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	1aca      	subs	r2, r1, r3
 8001bdc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be6:	443b      	add	r3, r7
 8001be8:	f853 1cb4 	ldr.w	r1, [r3, #-180]
 8001bec:	0093      	lsls	r3, r2, #2
 8001bee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf2:	443b      	add	r3, r7
 8001bf4:	f843 1c68 	str.w	r1, [r3, #-104]
				tail++;
 8001bf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
				queen_mark[taskT[j].code] = 1;
 8001c02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c0c:	443b      	add	r3, r7
 8001c0e:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c18:	443b      	add	r3, r7
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f843 2cc8 	str.w	r2, [r3, #-200]
 8001c20:	e000      	b.n	8001c24 <buildFastMatrix+0x810>
				continue;
 8001c22:	bf00      	nop
		for(int j=0;j<num_tasks;j++)
 8001c24:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001c2e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	dd86      	ble.n	8001b44 <buildFastMatrix+0x730>
			}
		}
		fast_matrix[i].n_tasks = numer;
 8001c36:	4917      	ldr	r1, [pc, #92]	; (8001c94 <buildFastMatrix+0x880>)
 8001c38:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3324      	adds	r3, #36	; 0x24
 8001c48:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c4c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<number_minor_cycle;i++)
 8001c4e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001c52:	3301      	adds	r3, #1
 8001c54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c58:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <buildFastMatrix+0x88c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f4ff aedf 	bcc.w	8001a24 <buildFastMatrix+0x610>
	}
	if(tail_idle==1)
 8001c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10b      	bne.n	8001c86 <buildFastMatrix+0x872>
	{
		fast_matrix[number_minor_cycle-1].n_tasks = 0;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <buildFastMatrix+0x88c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <buildFastMatrix+0x880>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3324      	adds	r3, #36	; 0x24
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
	}
}
 8001c86:	bf00      	nop
 8001c88:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000d04 	.word	0x20000d04
 8001c98:	66666667 	.word	0x66666667
 8001c9c:	20000b84 	.word	0x20000b84
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <recoverDelayMark>:
//these to eliminate higher priority interrupt's bad consequence(higher than timer1 tick which is scheduling tick)
void recoverDelayMark(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
	unsigned int major_pass,minor_pass;
	unsigned int delay = HAL_GetTick();
 8001caa:	f003 f8e7 	bl	8004e7c <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]
	major_pass = ceil(abs(delay-system_time)/major_cycle_len);
 8001cb0:	4b55      	ldr	r3, [pc, #340]	; (8001e08 <recoverDelayMark+0x164>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc0:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <recoverDelayMark+0x168>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <recoverDelayMark+0x164>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	1ad2      	subs	r2, r2, r3
 8001cd8:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <recoverDelayMark+0x168>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	dd09      	ble.n	8001d0a <recoverDelayMark+0x66>
 8001cf6:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <recoverDelayMark+0x164>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	1ad2      	subs	r2, r2, r3
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <recoverDelayMark+0x168>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	e007      	b.n	8001d1a <recoverDelayMark+0x76>
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <recoverDelayMark+0x164>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <recoverDelayMark+0x168>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	613b      	str	r3, [r7, #16]
	unsigned int tmp = abs(delay-system_time)%major_cycle_len;
 8001d1c:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <recoverDelayMark+0x164>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <recoverDelayMark+0x168>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    minor_pass = ceil(tmp/minor_cycle);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	dd06      	ble.n	8001d7c <recoverDelayMark+0xd8>
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	e004      	b.n	8001d86 <recoverDelayMark+0xe2>
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	60bb      	str	r3, [r7, #8]
    major_cycle += major_pass;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <recoverDelayMark+0x170>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <recoverDelayMark+0x170>)
 8001d92:	6013      	str	r3, [r2, #0]
    minor_cycle += minor_pass;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <recoverDelayMark+0x16c>)
 8001d9e:	6013      	str	r3, [r2, #0]
    unsigned int rd = minor_cycle / (number_minor_cycle);
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <recoverDelayMark+0x16c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <recoverDelayMark+0x174>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	607b      	str	r3, [r7, #4]
    if(rd>0)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00f      	beq.n	8001dd4 <recoverDelayMark+0x130>
    {
    	major_cycle+=1;
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <recoverDelayMark+0x170>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <recoverDelayMark+0x170>)
 8001dbc:	6013      	str	r3, [r2, #0]
    	minor_cycle = minor_cycle % number_minor_cycle;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <recoverDelayMark+0x16c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <recoverDelayMark+0x174>)
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dca:	fb01 f202 	mul.w	r2, r1, r2
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <recoverDelayMark+0x16c>)
 8001dd2:	6013      	str	r3, [r2, #0]
//    char message[200];
//    sprintf(message,"(major:%d,minor:%d)\r\n",major_cycle,minor_cycle);
//    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
    //if time chunk between minor cycle, we must wait until the end of that cycle to guarantee predictability
    //though may lose some time, but delay is unpredictable, and if we want to make it predictable we need to pay a price
    if(tmp%minor_cycle>0)
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <recoverDelayMark+0x16c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dde:	fb01 f202 	mul.w	r2, r1, r2
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <recoverDelayMark+0x15a>
    {
    	//error range: 1 minor cycle
    	//solve this needs execesive system consumption and much complex software implementation
    	//E(error) = 0.5 minor cycle
    	tinyTime = tmp%minor_cycle;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <recoverDelayMark+0x16c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8001df2:	fb01 f202 	mul.w	r2, r1, r2
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <recoverDelayMark+0x178>)
 8001dfc:	601a      	str	r2, [r3, #0]
    }

}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000b80 	.word	0x20000b80
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000b7c 	.word	0x20000b7c
 8001e14:	20000b78 	.word	0x20000b78
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000c60 	.word	0x20000c60

08001e20 <showFastMatrix>:
//save stack code is needed! uart many times is time trade stack, it's after careful consideration!!!!!!!!!!
void showFastMatrix(void)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b0e1      	sub	sp, #388	; 0x184
 8001e24:	af00      	add	r7, sp, #0
	char tableInfo[60+(TASK_NAME_LEN+8)*num_tasks];
	sprintf(tableInfo,"[[-------------------showing scheduling table for %d seconds-------------------]]\r\n",SHOW_WINDOW);
 8001e26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e2a:	220a      	movs	r2, #10
 8001e2c:	496d      	ldr	r1, [pc, #436]	; (8001fe4 <showFastMatrix+0x1c4>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00b f808 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tableInfo, strlen(tableInfo),0xFFFF);
 8001e34:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f9d3 	bl	80001e4 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4a:	4867      	ldr	r0, [pc, #412]	; (8001fe8 <showFastMatrix+0x1c8>)
 8001e4c:	f006 f9c2 	bl	80081d4 <HAL_UART_Transmit>
	char tmp2[200];
	for(int i=0;i<number_minor_cycle;i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e56:	e0a5      	b.n	8001fa4 <showFastMatrix+0x184>
	{
		sprintf(tableInfo,"| Minor cycle %d |  %dtasks  ",i,fast_matrix[i].n_tasks);
 8001e58:	4964      	ldr	r1, [pc, #400]	; (8001fec <showFastMatrix+0x1cc>)
 8001e5a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	3324      	adds	r3, #36	; 0x24
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001e70:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e74:	495e      	ldr	r1, [pc, #376]	; (8001ff0 <showFastMatrix+0x1d0>)
 8001e76:	f00a ffe5 	bl	800ce44 <siprintf>
		if(fast_matrix[i].n_tasks==0)
 8001e7a:	495c      	ldr	r1, [pc, #368]	; (8001fec <showFastMatrix+0x1cc>)
 8001e7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	3324      	adds	r3, #36	; 0x24
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <showFastMatrix+0x98>
		{
			strcat(tableInfo,"[no tasks]\r\n");
 8001e92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe f9a4 	bl	80001e4 <strlen>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a53      	ldr	r2, [pc, #332]	; (8001ff4 <showFastMatrix+0x1d4>)
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	4613      	mov	r3, r2
 8001eac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001eae:	6020      	str	r0, [r4, #0]
 8001eb0:	6061      	str	r1, [r4, #4]
 8001eb2:	60a2      	str	r2, [r4, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	7323      	strb	r3, [r4, #12]
		}
		for(int j=0;j<fast_matrix[i].n_tasks;j++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001ebe:	e050      	b.n	8001f62 <showFastMatrix+0x142>
		{
			char *ins = ( (j==fast_matrix[i].n_tasks-1) ?"%s]\r\n":"%s,\t");
 8001ec0:	494a      	ldr	r1, [pc, #296]	; (8001fec <showFastMatrix+0x1cc>)
 8001ec2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3324      	adds	r3, #36	; 0x24
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d101      	bne.n	8001ee2 <showFastMatrix+0xc2>
 8001ede:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <showFastMatrix+0x1d8>)
 8001ee0:	e000      	b.n	8001ee4 <showFastMatrix+0xc4>
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <showFastMatrix+0x1dc>)
 8001ee4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			if(j==0)
 8001ee8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <showFastMatrix+0xfa>
			{
				ins = "[%s,";
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <showFastMatrix+0x1e0>)
 8001ef2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				if(j==fast_matrix[i].n_tasks-1)
 8001ef6:	493d      	ldr	r1, [pc, #244]	; (8001fec <showFastMatrix+0x1cc>)
 8001ef8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	3324      	adds	r3, #36	; 0x24
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d102      	bne.n	8001f1a <showFastMatrix+0xfa>
				{
					ins = "[%s]\r\n";
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <showFastMatrix+0x1e4>)
 8001f16:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
				}
			}
			sprintf(tmp2,ins,tasks[fast_matrix[i].task_code[j]].task_name);
 8001f1a:	4934      	ldr	r1, [pc, #208]	; (8001fec <showFastMatrix+0x1cc>)
 8001f1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2234      	movs	r2, #52	; 0x34
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <showFastMatrix+0x1e8>)
 8001f3c:	441a      	add	r2, r3
 8001f3e:	463b      	mov	r3, r7
 8001f40:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00a ff7d 	bl	800ce44 <siprintf>
			strcat(tableInfo,tmp2);
 8001f4a:	463a      	mov	r2, r7
 8001f4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00a ffd9 	bl	800cf0a <strcat>
		for(int j=0;j<fast_matrix[i].n_tasks;j++)
 8001f58:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <showFastMatrix+0x1cc>)
 8001f64:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3324      	adds	r3, #36	; 0x24
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	dba0      	blt.n	8001ec0 <showFastMatrix+0xa0>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)tableInfo, strlen(tableInfo),0xFFFF);
 8001f7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f92e 	bl	80001e4 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f94:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <showFastMatrix+0x1c8>)
 8001f96:	f006 f91d 	bl	80081d4 <HAL_UART_Transmit>
	for(int i=0;i<number_minor_cycle;i++)
 8001f9a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001fa4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <showFastMatrix+0x1ec>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f4ff af53 	bcc.w	8001e58 <showFastMatrix+0x38>
	}
	sprintf(tableInfo,"\r\n\r\n");
 8001fb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fb6:	4916      	ldr	r1, [pc, #88]	; (8002010 <showFastMatrix+0x1f0>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00a ff43 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tableInfo, strlen(tableInfo),0xFFFF);
 8001fbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f90e 	bl	80001e4 <strlen>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <showFastMatrix+0x1c8>)
 8001fd6:	f006 f8fd 	bl	80081d4 <HAL_UART_Transmit>
}
 8001fda:	bf00      	nop
 8001fdc:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	0800f364 	.word	0x0800f364
 8001fe8:	20002cd4 	.word	0x20002cd4
 8001fec:	20000d04 	.word	0x20000d04
 8001ff0:	0800f3b8 	.word	0x0800f3b8
 8001ff4:	0800f3d8 	.word	0x0800f3d8
 8001ff8:	0800f3e8 	.word	0x0800f3e8
 8001ffc:	0800f3f0 	.word	0x0800f3f0
 8002000:	0800f3f8 	.word	0x0800f3f8
 8002004:	0800f400 	.word	0x0800f400
 8002008:	20000b84 	.word	0x20000b84
 800200c:	20000008 	.word	0x20000008
 8002010:	0800f408 	.word	0x0800f408

08002014 <Error_Handler>:
//led setting off timer
TIM_HandleTypeDef TIM2_Handler;

TIM_HandleTypeDef TIM4_Handler;
void Error_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800201c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <Error_Handler+0x1c>)
 8002022:	f003 fb39 	bl	8005698 <HAL_GPIO_TogglePin>
    HAL_Delay(500); /* wait 50 ms */
 8002026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202a:	f002 ff33 	bl	8004e94 <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800202e:	e7f5      	b.n	800201c <Error_Handler+0x8>
 8002030:	48000400 	.word	0x48000400

08002034 <SystemClock_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b096      	sub	sp, #88	; 0x58
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	2244      	movs	r2, #68	; 0x44
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f00a f968 	bl	800c318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002056:	f44f 7000 	mov.w	r0, #512	; 0x200
 800205a:	f004 f8b1 	bl	80061c0 <HAL_PWREx_ControlVoltageScaling>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002064:	f7ff ffd6 	bl	8002014 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002068:	2302      	movs	r3, #2
 800206a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002072:	2310      	movs	r3, #16
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002076:	2302      	movs	r3, #2
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800207a:	2302      	movs	r3, #2
 800207c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002082:	2314      	movs	r3, #20
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002086:	2307      	movs	r3, #7
 8002088:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800208a:	2308      	movs	r3, #8
 800208c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800208e:	2304      	movs	r3, #4
 8002090:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f8e8 	bl	800626c <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80020a2:	f7ff ffb7 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a6:	230f      	movs	r3, #15
 80020a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020aa:	2303      	movs	r3, #3
 80020ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	2104      	movs	r1, #4
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 fcbe 	bl	8006a40 <HAL_RCC_ClockConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020ca:	f7ff ffa3 	bl	8002014 <Error_Handler>
  }
}
 80020ce:	bf00      	nop
 80020d0:	3758      	adds	r7, #88	; 0x58
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
	//button interrupt:change mode and send a message;
	if(GPIO_Pin == CYCLIC_MODE_TRIGGER_PIN)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e8:	d10d      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		changeModeMark = 1;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_GPIO_EXTI_Callback+0xa0>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
		mode = (mode+1)%2;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_GPIO_EXTI_Callback+0xa4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	bfb8      	it	lt
 80020fe:	425b      	neglt	r3, r3
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002102:	6013      	str	r3, [r2, #0]
		tasks[MEGNETO].taskTick = tickNow;
		tasks[MEGNETO].periodNum =  tasks[MEGNETO].periodNum+1;
		tasks[MEGNETO].periodSum = tasks[MEGNETO].periodSum+tickAcc;
	}
#endif
}
 8002104:	e033      	b.n	800216e <HAL_GPIO_EXTI_Callback+0x96>
	else if(GPIO_Pin == GPIO_PIN_11)
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210c:	d124      	bne.n	8002158 <HAL_GPIO_EXTI_Callback+0x80>
		uint8_t res = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, 0x53);
 800210e:	2153      	movs	r1, #83	; 0x53
 8002110:	20d4      	movs	r0, #212	; 0xd4
 8002112:	f001 fe35 	bl	8003d80 <SENSOR_IO_Read>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]
		res = (res&(1<<5))&&1;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	73fb      	strb	r3, [r7, #15]
		if(res)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01d      	beq.n	800216e <HAL_GPIO_EXTI_Callback+0x96>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <HAL_GPIO_EXTI_Callback+0xa8>)
 800213a:	f003 fa95 	bl	8005668 <HAL_GPIO_WritePin>
			 HAL_TIM_Base_Start_IT(&TIM2_Handler);
 800213e:	4811      	ldr	r0, [pc, #68]	; (8002184 <HAL_GPIO_EXTI_Callback+0xac>)
 8002140:	f005 fda6 	bl	8007c90 <HAL_TIM_Base_Start_IT>
			 HAL_Delay(TILT_DELAY);
 8002144:	2032      	movs	r0, #50	; 0x32
 8002146:	f002 fea5 	bl	8004e94 <HAL_Delay>
			 timerDelay(TILT_DELAY*100);
 800214a:	f241 3088 	movw	r0, #5000	; 0x1388
 800214e:	f000 f81f 	bl	8002190 <timerDelay>
			 recoverDelayMark();
 8002152:	f7ff fda7 	bl	8001ca4 <recoverDelayMark>
}
 8002156:	e00a      	b.n	800216e <HAL_GPIO_EXTI_Callback+0x96>
	else if(GPIO_Pin == WIFI_CMD_DATA_READY_Pin){
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_GPIO_EXTI_Callback+0x96>
		cmdDataReady = HAL_GPIO_ReadPin(WIFI_CMD_DATA_READY_GPIO_Port, WIFI_CMD_DATA_READY_Pin);
 800215e:	2102      	movs	r1, #2
 8002160:	4809      	ldr	r0, [pc, #36]	; (8002188 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002162:	f003 fa69 	bl	8005638 <HAL_GPIO_ReadPin>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_GPIO_EXTI_Callback+0xb4>)
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000c5c 	.word	0x20000c5c
 800217c:	20000c54 	.word	0x20000c54
 8002180:	48000400 	.word	0x48000400
 8002184:	20002d94 	.word	0x20002d94
 8002188:	48001000 	.word	0x48001000
 800218c:	20002c6c 	.word	0x20002c6c

08002190 <timerDelay>:
void timerDelay(uint16_t time)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
	//set period to max
	HAL_TIM_Base_Start(&TIM4_Handler);
 800219a:	480a      	ldr	r0, [pc, #40]	; (80021c4 <timerDelay+0x34>)
 800219c:	f005 fd22 	bl	8007be4 <HAL_TIM_Base_Start>
	while(1)
	{
		unsigned int counter = __HAL_TIM_GET_COUNTER(&TIM4_Handler);
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <timerDelay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	60fb      	str	r3, [r7, #12]
//		char message[200];
//		sprintf(message,"timer4 counter == %d;%d;%d\r\n",counter,__HAL_TIM_GET_COUNTER(&TIM2_Handler),__HAL_TIM_GET_COUNTER(&TIM1_Handler));
//		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
		if(counter>time)break;
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d800      	bhi.n	80021b2 <timerDelay+0x22>
	{
 80021b0:	e7f6      	b.n	80021a0 <timerDelay+0x10>
		if(counter>time)break;
 80021b2:	bf00      	nop
	}
	HAL_TIM_Base_Stop(&TIM4_Handler);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <timerDelay+0x34>)
 80021b6:	f005 fd3f 	bl	8007c38 <HAL_TIM_Base_Stop>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20002dd4 	.word	0x20002dd4

080021c8 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <MX_GPIO_Init+0xb8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <MX_GPIO_Init+0xb8>)
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <MX_GPIO_Init+0xb8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <MX_GPIO_Init+0xb8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a21      	ldr	r2, [pc, #132]	; (8002280 <MX_GPIO_Init+0xb8>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <MX_GPIO_Init+0xb8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <MX_GPIO_Init+0xb8>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <MX_GPIO_Init+0xb8>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <MX_GPIO_Init+0xb8>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_NSS_Pin, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f240 1101 	movw	r1, #257	; 0x101
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <MX_GPIO_Init+0xbc>)
 800222e:	f003 fa1b 	bl	8005668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_RESET_Pin WIFI_NSS_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin|WIFI_NSS_Pin;
 8002232:	f240 1301 	movw	r3, #257	; 0x101
 8002236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <MX_GPIO_Init+0xbc>)
 800224c:	f002 ff56 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CMD_DATA_READY_Pin */
  GPIO_InitStruct.Pin = WIFI_CMD_DATA_READY_Pin;
 8002250:	2302      	movs	r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_GPIO_Init+0xc0>)
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WIFI_CMD_DATA_READY_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <MX_GPIO_Init+0xbc>)
 8002264:	f002 ff4a 	bl	80050fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	2007      	movs	r0, #7
 800226e:	f002 ff0e 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002272:	2007      	movs	r0, #7
 8002274:	f002 ff27 	bl	80050c6 <HAL_NVIC_EnableIRQ>

}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	48001000 	.word	0x48001000
 8002288:	10310000 	.word	0x10310000

0800228c <MX_SPI3_Init>:
static void MX_SPI3_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_SPI3_Init+0x74>)
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <MX_SPI3_Init+0x78>)
 8002294:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <MX_SPI3_Init+0x74>)
 8002298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800229c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_SPI3_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_SPI3_Init+0x74>)
 80022a6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80022aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_SPI3_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_SPI3_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_SPI3_Init+0x74>)
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_SPI3_Init+0x74>)
 80022c2:	2218      	movs	r2, #24
 80022c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_SPI3_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MX_SPI3_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <MX_SPI3_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <MX_SPI3_Init+0x74>)
 80022da:	2207      	movs	r2, #7
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <MX_SPI3_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <MX_SPI3_Init+0x74>)
 80022e6:	2208      	movs	r2, #8
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_SPI3_Init+0x74>)
 80022ec:	f004 fdae 	bl	8006e4c <HAL_SPI_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80022f6:	f7ff fe8d 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20002c70 	.word	0x20002c70
 8002304:	40003c00 	.word	0x40003c00

08002308 <hal_Init>:
void hal_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b098      	sub	sp, #96	; 0x60
 800230c:	af00      	add	r7, sp, #0
    /* Pin configuration for UART. BSP_COM_Init() can do this automatically */
    __HAL_RCC_GPIOB_CLK_ENABLE();	// Enable AHB2 Bus for GPIOB
 800230e:	4b94      	ldr	r3, [pc, #592]	; (8002560 <hal_Init+0x258>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a93      	ldr	r2, [pc, #588]	; (8002560 <hal_Init+0x258>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b91      	ldr	r3, [pc, #580]	; (8002560 <hal_Init+0x258>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 8002326:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <hal_Init+0x258>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a8d      	ldr	r2, [pc, #564]	; (8002560 <hal_Init+0x258>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <hal_Init+0x258>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();	// Enable AHB2 Bus for GPIOd
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <hal_Init+0x258>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a87      	ldr	r2, [pc, #540]	; (8002560 <hal_Init+0x258>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b85      	ldr	r3, [pc, #532]	; (8002560 <hal_Init+0x258>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);//interrupt grouping
 8002356:	2004      	movs	r0, #4
 8002358:	f002 fe8e 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>
    GPIO_InitTypeDef GPIO_InitStructUart = {0};
 800235c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
    GPIO_InitStructUart.Alternate = GPIO_AF7_USART1;
 800236c:	2307      	movs	r3, #7
 800236e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStructUart.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002370:	23c0      	movs	r3, #192	; 0xc0
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStructUart.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStructUart.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStructUart.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	65bb      	str	r3, [r7, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructUart);
 8002380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002384:	4619      	mov	r1, r3
 8002386:	4877      	ldr	r0, [pc, #476]	; (8002564 <hal_Init+0x25c>)
 8002388:	f002 feb8 	bl	80050fc <HAL_GPIO_Init>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = LED2_Pin;
 800239c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023b2:	4619      	mov	r1, r3
 80023b4:	486b      	ldr	r0, [pc, #428]	; (8002564 <hal_Init+0x25c>)
 80023b6:	f002 fea1 	bl	80050fc <HAL_GPIO_Init>
    //button interrupt
    GPIO_InitTypeDef GPIO_InitStructButton = {0};
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
    GPIO_InitStructButton.Pin = BUTTON_EXTI13_Pin;
 80023ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructButton.Mode = GPIO_MODE_IT_FALLING;
 80023d0:	4b65      	ldr	r3, [pc, #404]	; (8002568 <hal_Init+0x260>)
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStructButton.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructButton);
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	4619      	mov	r1, r3
 80023de:	4863      	ldr	r0, [pc, #396]	; (800256c <hal_Init+0x264>)
 80023e0:	f002 fe8c 	bl	80050fc <HAL_GPIO_Init>
    //lsm6dsl exti
    GPIO_InitTypeDef GPIO_InitStructSensor = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
    GPIO_InitStructSensor.Pin = GPIO_PIN_11;
 80023f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructSensor.Mode = GPIO_MODE_IT_RISING;
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <hal_Init+0x268>)
 80023fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStructSensor.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructSensor);
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4619      	mov	r1, r3
 8002408:	485a      	ldr	r0, [pc, #360]	; (8002574 <hal_Init+0x26c>)
 800240a:	f002 fe77 	bl	80050fc <HAL_GPIO_Init>
	//lps22hb exti
    GPIO_InitStructSensor.Pin = GPIO_PIN_10;
 800240e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002412:	613b      	str	r3, [r7, #16]
    GPIO_InitStructSensor.Mode = GPIO_MODE_IT_RISING;
 8002414:	4b56      	ldr	r3, [pc, #344]	; (8002570 <hal_Init+0x268>)
 8002416:	617b      	str	r3, [r7, #20]
	GPIO_InitStructSensor.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructSensor);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	4854      	ldr	r0, [pc, #336]	; (8002574 <hal_Init+0x26c>)
 8002424:	f002 fe6a 	bl	80050fc <HAL_GPIO_Init>
	//hts221 exti
    GPIO_InitStructSensor.Pin = GPIO_PIN_15;
 8002428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructSensor.Mode = GPIO_MODE_IT_RISING;
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <hal_Init+0x268>)
 8002430:	617b      	str	r3, [r7, #20]
	GPIO_InitStructSensor.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructSensor);
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	4619      	mov	r1, r3
 800243c:	484d      	ldr	r0, [pc, #308]	; (8002574 <hal_Init+0x26c>)
 800243e:	f002 fe5d 	bl	80050fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002442:	2028      	movs	r0, #40	; 0x28
 8002444:	f002 fe3f 	bl	80050c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn,2,0);
 8002448:	2200      	movs	r2, #0
 800244a:	2102      	movs	r1, #2
 800244c:	2028      	movs	r0, #40	; 0x28
 800244e:	f002 fe1e 	bl	800508e <HAL_NVIC_SetPriority>
    //lis3mdl exti
	GPIO_InitStructSensor.Pin = GPIO_PIN_8;
 8002452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002456:	613b      	str	r3, [r7, #16]
	GPIO_InitStructSensor.Mode = GPIO_MODE_IT_RISING;
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <hal_Init+0x268>)
 800245a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructSensor.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructSensor);
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	4841      	ldr	r0, [pc, #260]	; (800256c <hal_Init+0x264>)
 8002468:	f002 fe48 	bl	80050fc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,3,1);
 800246c:	2201      	movs	r2, #1
 800246e:	2103      	movs	r1, #3
 8002470:	2017      	movs	r0, #23
 8002472:	f002 fe0c 	bl	800508e <HAL_NVIC_SetPriority>
    /* Configuring UART1 */
    huart1.Instance = USART1;
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <hal_Init+0x270>)
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <hal_Init+0x274>)
 800247a:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <hal_Init+0x270>)
 800247e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002482:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <hal_Init+0x270>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <hal_Init+0x270>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <hal_Init+0x270>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <hal_Init+0x270>)
 8002498:	220c      	movs	r2, #12
 800249a:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <hal_Init+0x270>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <hal_Init+0x270>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <hal_Init+0x270>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <hal_Init+0x270>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80024b4:	4830      	ldr	r0, [pc, #192]	; (8002578 <hal_Init+0x270>)
 80024b6:	f005 fe3f 	bl	8008138 <HAL_UART_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d000      	beq.n	80024c2 <hal_Init+0x1ba>
    {
      while(1);
 80024c0:	e7fe      	b.n	80024c0 <hal_Init+0x1b8>
    }

    TIM1_Handler.Instance = TIM1;
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <hal_Init+0x278>)
 80024c4:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <hal_Init+0x27c>)
 80024c6:	601a      	str	r2, [r3, #0]
    TIM1_Handler.Init.Prescaler = 799;//us delay
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <hal_Init+0x278>)
 80024ca:	f240 321f 	movw	r2, #799	; 0x31f
 80024ce:	605a      	str	r2, [r3, #4]
    TIM1_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <hal_Init+0x278>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
    //TIM1_Handler.Init.Period=1000;//100ms
    TIM1_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;//tDTS
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <hal_Init+0x278>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
    TIM1_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <hal_Init+0x278>)
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	619a      	str	r2, [r3, #24]
//	HAL_TIM_Base_Init(&TIM1_Handler);
//    HAL_TIM_Base_Start_IT(&TIM1_Handler);

    TIM2_Handler.Instance = TIM2;
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <hal_Init+0x280>)
 80024e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024e8:	601a      	str	r2, [r3, #0]
    TIM2_Handler.Init.Prescaler = 7999;//10khz
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <hal_Init+0x280>)
 80024ec:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80024f0:	605a      	str	r2, [r3, #4]
    TIM2_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <hal_Init+0x280>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
    TIM2_Handler.Init.Period= 100;
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <hal_Init+0x280>)
 80024fa:	2264      	movs	r2, #100	; 0x64
 80024fc:	60da      	str	r2, [r3, #12]
    TIM2_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;//tDTS
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <hal_Init+0x280>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
    TIM2_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <hal_Init+0x280>)
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&TIM2_Handler);
 800250a:	481f      	ldr	r0, [pc, #124]	; (8002588 <hal_Init+0x280>)
 800250c:	f005 fb3e 	bl	8007b8c <HAL_TIM_Base_Init>




	//optional hal_delay timer
	TIM4_Handler.Instance = TIM4;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <hal_Init+0x284>)
 8002512:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <hal_Init+0x288>)
 8002514:	601a      	str	r2, [r3, #0]
	TIM4_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <hal_Init+0x284>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
	TIM4_Handler.Init.Prescaler = 7999;//1khz
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <hal_Init+0x284>)
 800251e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002522:	605a      	str	r2, [r3, #4]
	TIM4_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <hal_Init+0x284>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
	TIM4_Handler.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;//tDTS
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <hal_Init+0x284>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
	TIM4_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <hal_Init+0x284>)
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	619a      	str	r2, [r3, #24]
	TIM4_Handler.Init.Period = 65535;
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <hal_Init+0x284>)
 8002538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&TIM4_Handler);
 800253e:	4813      	ldr	r0, [pc, #76]	; (800258c <hal_Init+0x284>)
 8002540:	f005 fb24 	bl	8007b8c <HAL_TIM_Base_Init>
    //make sure pb14 is low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <hal_Init+0x25c>)
 800254c:	f003 f88c 	bl	8005668 <HAL_GPIO_WritePin>
    MX_GPIO_Init();
 8002550:	f7ff fe3a 	bl	80021c8 <MX_GPIO_Init>
    MX_SPI3_Init();
 8002554:	f7ff fe9a 	bl	800228c <MX_SPI3_Init>
    //HAL_NVIC_SetPriority(SysTick_IRQn, 4, 0U);
}
 8002558:	bf00      	nop
 800255a:	3760      	adds	r7, #96	; 0x60
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	48000400 	.word	0x48000400
 8002568:	10210000 	.word	0x10210000
 800256c:	48000800 	.word	0x48000800
 8002570:	10110000 	.word	0x10110000
 8002574:	48000c00 	.word	0x48000c00
 8002578:	20002cd4 	.word	0x20002cd4
 800257c:	40013800 	.word	0x40013800
 8002580:	20002d54 	.word	0x20002d54
 8002584:	40012c00 	.word	0x40012c00
 8002588:	20002d94 	.word	0x20002d94
 800258c:	20002dd4 	.word	0x20002dd4
 8002590:	40000800 	.word	0x40000800

08002594 <HAL_TIM_Base_MspInit>:
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	//tick interrupt only has higher priority than led interrupt
	if(htim->Instance == TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_TIM_Base_MspInit+0x9c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d114      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b0:	6613      	str	r3, [r2, #96]	; 0x60
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn,3,0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2103      	movs	r1, #3
 80025c2:	2019      	movs	r0, #25
 80025c4:	f002 fd63 	bl	800508e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025c8:	2019      	movs	r0, #25
 80025ca:	f002 fd7c 	bl	80050c6 <HAL_NVIC_EnableIRQ>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
//		HAL_NVIC_SetPriority(TIM2_IRQn,4,0);
//		HAL_NVIC_EnableIRQ(TIM2_IRQn);
	}
}
 80025ce:	e02a      	b.n	8002626 <HAL_TIM_Base_MspInit+0x92>
	else if(htim->Instance == TIM2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d8:	d114      	bne.n	8002604 <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM2_IRQn,4,0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2104      	movs	r1, #4
 80025f6:	201c      	movs	r0, #28
 80025f8:	f002 fd49 	bl	800508e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025fc:	201c      	movs	r0, #28
 80025fe:	f002 fd62 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 8002602:	e010      	b.n	8002626 <HAL_TIM_Base_MspInit+0x92>
	else if(htim->Instance == TIM4)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <HAL_TIM_Base_MspInit+0xa4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10b      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x92>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_TIM_Base_MspInit+0xa0>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40000800 	.word	0x40000800

0800263c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d103      	bne.n	8002656 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//jumpPos();
			pos=1;
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
		HAL_TIM_Base_Stop_IT(&TIM2_Handler);
	}

}
 8002654:	e00d      	b.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if(htim->Instance == TIM2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d108      	bne.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002668:	f002 fffe 	bl	8005668 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&TIM2_Handler);
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800266e:	f005 fb39 	bl	8007ce4 <HAL_TIM_Base_Stop_IT>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40012c00 	.word	0x40012c00
 8002680:	20000c58 	.word	0x20000c58
 8002684:	48000400 	.word	0x48000400
 8002688:	20002d94 	.word	0x20002d94

0800268c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TIM1_Handler);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002692:	f005 fb52 	bl	8007d3a <HAL_TIM_IRQHandler>
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20002d54 	.word	0x20002d54

080026a0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TIM2_Handler);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <TIM2_IRQHandler+0x10>)
 80026a6:	f005 fb48 	bl	8007d3a <HAL_TIM_IRQHandler>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20002d94 	.word	0x20002d94

080026b4 <AI_Init>:
static uint32_t argmax(const float * values, uint32_t len);
uint32_t write_index = 0;


static void AI_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b09c      	sub	sp, #112	; 0x70
 80026b8:	af00      	add	r7, sp, #0
  ai_error err;
  __HAL_RCC_CRC_CLK_ENABLE();
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <AI_Init+0x98>)
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	4a23      	ldr	r2, [pc, #140]	; (800274c <AI_Init+0x98>)
 80026c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c4:	6493      	str	r3, [r2, #72]	; 0x48
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <AI_Init+0x98>)
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <AI_Init+0x9c>)
 80026d4:	66bb      	str	r3, [r7, #104]	; 0x68
  char message[100];
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80026d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	481d      	ldr	r0, [pc, #116]	; (8002754 <AI_Init+0xa0>)
 80026e0:	f006 fc5a 	bl	8008f98 <ai_network_create_and_init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (err.type != AI_ERROR_NONE) {
 80026e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <AI_Init+0x6c>
	sprintf(message,"AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80026f0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80026f4:	461a      	mov	r2, r3
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80026fc:	1d38      	adds	r0, r7, #4
 80026fe:	4916      	ldr	r1, [pc, #88]	; (8002758 <AI_Init+0xa4>)
 8002700:	f00a fba0 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd6c 	bl	80001e4 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	b29a      	uxth	r2, r3
 8002710:	1d39      	adds	r1, r7, #4
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	4811      	ldr	r0, [pc, #68]	; (800275c <AI_Init+0xa8>)
 8002718:	f005 fd5c 	bl	80081d4 <HAL_UART_Transmit>
    Error_Handler();
 800271c:	f7ff fc7a 	bl	8002014 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <AI_Init+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f006 fcaa 	bl	8009080 <ai_network_inputs_get>
 800272c:	4603      	mov	r3, r0
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <AI_Init+0xac>)
 8002730:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <AI_Init+0xa0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f006 fcbb 	bl	80090b4 <ai_network_outputs_get>
 800273e:	4603      	mov	r3, r0
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <AI_Init+0xb0>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	3770      	adds	r7, #112	; 0x70
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	20002f5c 	.word	0x20002f5c
 8002754:	20002e14 	.word	0x20002e14
 8002758:	0800f42c 	.word	0x0800f42c
 800275c:	20002cd4 	.word	0x20002cd4
 8002760:	20003608 	.word	0x20003608
 8002764:	2000360c 	.word	0x2000360c

08002768 <AI_Run>:
static void AI_Run(float *pIn, float *pOut)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b09e      	sub	sp, #120	; 0x78
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <AI_Run+0x80>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <AI_Run+0x84>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	605a      	str	r2, [r3, #4]
  char message[100];
  batch = ai_network_run(network, ai_input, ai_output);
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <AI_Run+0x88>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <AI_Run+0x80>)
 8002788:	6811      	ldr	r1, [r2, #0]
 800278a:	4a18      	ldr	r2, [pc, #96]	; (80027ec <AI_Run+0x84>)
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f006 fce6 	bl	8009160 <ai_network_run>
 8002794:	6778      	str	r0, [r7, #116]	; 0x74
  if (batch != 1) {
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	2b01      	cmp	r3, #1
 800279a:	d021      	beq.n	80027e0 <AI_Run+0x78>
    err = ai_network_get_error(network);
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <AI_Run+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f006 fbd7 	bl	8008f54 <ai_network_get_error>
 80027a6:	4603      	mov	r3, r0
 80027a8:	673b      	str	r3, [r7, #112]	; 0x70
    sprintf(message,"AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80027aa:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80027ae:	461a      	mov	r2, r3
 80027b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80027b6:	f107 000c 	add.w	r0, r7, #12
 80027ba:	490e      	ldr	r1, [pc, #56]	; (80027f4 <AI_Run+0x8c>)
 80027bc:	f00a fb42 	bl	800ce44 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fd0d 	bl	80001e4 <strlen>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	f107 010c 	add.w	r1, r7, #12
 80027d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d6:	4808      	ldr	r0, [pc, #32]	; (80027f8 <AI_Run+0x90>)
 80027d8:	f005 fcfc 	bl	80081d4 <HAL_UART_Transmit>
    Error_Handler();
 80027dc:	f7ff fc1a 	bl	8002014 <Error_Handler>
  }
}
 80027e0:	bf00      	nop
 80027e2:	3778      	adds	r7, #120	; 0x78
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20003608 	.word	0x20003608
 80027ec:	2000360c 	.word	0x2000360c
 80027f0:	20002e14 	.word	0x20002e14
 80027f4:	0800f42c 	.word	0x0800f42c
 80027f8:	20002cd4 	.word	0x20002cd4

080027fc <argmax>:
static uint32_t argmax(const float * values, uint32_t len)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8002810:	2301      	movs	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e017      	b.n	8002846 <argmax+0x4a>
    if (values[i] > max_value) {
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ed97 7a05 	vldr	s14, [r7, #20]
 8002826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d507      	bpl.n	8002840 <argmax+0x44>
      max_value = values[i];
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]
      max_index = i;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3301      	adds	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d3e3      	bcc.n	8002816 <argmax+0x1a>
    }
  }
  return max_index;
 800284e:	693b      	ldr	r3, [r7, #16]
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <WIFI_Init_main>:
char ssid[] = "HUAWEI-1CR2PZ";
char passphrase[] = "86443860";
WIFI_HandleTypeDef hwifi;
float temp,humi;
const char *state="idle";
static void WIFI_Init_main(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

	hwifi.handle = &hspi3;
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <WIFI_Init_main+0x40>)
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <WIFI_Init_main+0x44>)
 8002864:	601a      	str	r2, [r3, #0]
	hwifi.ssid = ssid;
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <WIFI_Init_main+0x40>)
 8002868:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <WIFI_Init_main+0x48>)
 800286a:	605a      	str	r2, [r3, #4]
	hwifi.passphrase = passphrase;
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <WIFI_Init_main+0x40>)
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <WIFI_Init_main+0x4c>)
 8002870:	609a      	str	r2, [r3, #8]
	hwifi.securityType = WPA_MIXED;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <WIFI_Init_main+0x40>)
 8002874:	2203      	movs	r2, #3
 8002876:	731a      	strb	r2, [r3, #12]
	hwifi.DHCP = SET;
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <WIFI_Init_main+0x40>)
 800287a:	2201      	movs	r2, #1
 800287c:	735a      	strb	r2, [r3, #13]
	hwifi.ipStatus = IP_V4;
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <WIFI_Init_main+0x40>)
 8002880:	2200      	movs	r2, #0
 8002882:	739a      	strb	r2, [r3, #14]
	hwifi.transportProtocol = WIFI_TCP_PROTOCOL;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <WIFI_Init_main+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	73da      	strb	r2, [r3, #15]
	hwifi.port = 8080;
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <WIFI_Init_main+0x40>)
 800288c:	f641 7290 	movw	r2, #8080	; 0x1f90
 8002890:	821a      	strh	r2, [r3, #16]

	WIFI_Init(&hwifi);
 8002892:	4802      	ldr	r0, [pc, #8]	; (800289c <WIFI_Init_main+0x40>)
 8002894:	f000 fd40 	bl	8003318 <WIFI_Init>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20003614 	.word	0x20003614
 80028a0:	20002c70 	.word	0x20002c70
 80028a4:	20000018 	.word	0x20000018
 80028a8:	20000028 	.word	0x20000028

080028ac <taskAcc>:
void taskAcc(void)
{
 80028ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b0:	b0a9      	sub	sp, #164	; 0xa4
 80028b2:	af06      	add	r7, sp, #24
	float accXYZ[3];
	int16_t accXYZ_in[3];
	BSP_ACCELERO_AccGetXYZ(accXYZ_in);
 80028b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fadb 	bl	8003e74 <BSP_ACCELERO_AccGetXYZ>
	accXYZ[0] = accXYZ_in[0]/100;
 80028be:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80028c2:	4a86      	ldr	r2, [pc, #536]	; (8002adc <taskAcc+0x230>)
 80028c4:	fb82 1203 	smull	r1, r2, r2, r3
 80028c8:	1152      	asrs	r2, r2, #5
 80028ca:	17db      	asrs	r3, r3, #31
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	accXYZ[1] = accXYZ_in[1]/100;
 80028dc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80028e0:	4a7e      	ldr	r2, [pc, #504]	; (8002adc <taskAcc+0x230>)
 80028e2:	fb82 1203 	smull	r1, r2, r2, r3
 80028e6:	1152      	asrs	r2, r2, #5
 80028e8:	17db      	asrs	r3, r3, #31
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	accXYZ[2] = accXYZ_in[2]/100;
 80028fa:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80028fe:	4a77      	ldr	r2, [pc, #476]	; (8002adc <taskAcc+0x230>)
 8002900:	fb82 1203 	smull	r1, r2, r2, r3
 8002904:	1152      	asrs	r2, r2, #5
 8002906:	17db      	asrs	r3, r3, #31
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b21b      	sxth	r3, r3
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002914:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	char message[100];
	sprintf(message,"Major Cycle %d |Minor Cycle %d| Accel X:%8.4f; Accel Y:%8.4f; Accel Z:%8.4f (m/s2)\r\n",major_cycle,minor_cycle,accXYZ[0],accXYZ[1],accXYZ[2]);
 8002918:	4b71      	ldr	r3, [pc, #452]	; (8002ae0 <taskAcc+0x234>)
 800291a:	681e      	ldr	r6, [r3, #0]
 800291c:	4b71      	ldr	r3, [pc, #452]	; (8002ae4 <taskAcc+0x238>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe1f 	bl	8000568 <__aeabi_f2d>
 800292a:	4604      	mov	r4, r0
 800292c:	460d      	mov	r5, r1
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fe19 	bl	8000568 <__aeabi_f2d>
 8002936:	4680      	mov	r8, r0
 8002938:	4689      	mov	r9, r1
 800293a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe13 	bl	8000568 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	f107 0008 	add.w	r0, r7, #8
 800294a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800294e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002952:	e9cd 4500 	strd	r4, r5, [sp]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4632      	mov	r2, r6
 800295a:	4963      	ldr	r1, [pc, #396]	; (8002ae8 <taskAcc+0x23c>)
 800295c:	f00a fa72 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fc3d 	bl	80001e4 <strlen>
 800296a:	4603      	mov	r3, r0
 800296c:	b29a      	uxth	r2, r3
 800296e:	f107 0108 	add.w	r1, r7, #8
 8002972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002976:	485d      	ldr	r0, [pc, #372]	; (8002aec <taskAcc+0x240>)
 8002978:	f005 fc2c 	bl	80081d4 <HAL_UART_Transmit>
	aiInData[write_index + 0] = (float)accXYZ_in[0]/4000.0f;
 800297c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002988:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <taskAcc+0x244>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002af4 <taskAcc+0x248>
 8002990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <taskAcc+0x24c>)
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	edc3 7a00 	vstr	s15, [r3]
    aiInData[write_index + 1] = (float)accXYZ_in[1]/4000.0f;
 800299e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029aa:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <taskAcc+0x244>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002af4 <taskAcc+0x248>
 80029b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <taskAcc+0x24c>)
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	edc3 7a00 	vstr	s15, [r3]
	aiInData[write_index + 2] = (float)accXYZ_in[2]/4000.0f;
 80029c2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <taskAcc+0x244>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002af4 <taskAcc+0x248>
 80029d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029dc:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <taskAcc+0x24c>)
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	edc3 7a00 	vstr	s15, [r3]
	write_index += 3;
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <taskAcc+0x244>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3303      	adds	r3, #3
 80029ec:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <taskAcc+0x244>)
 80029ee:	6013      	str	r3, [r2, #0]
	if (write_index == AI_NETWORK_IN_1_SIZE) {
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <taskAcc+0x244>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b4e      	cmp	r3, #78	; 0x4e
 80029f6:	d16c      	bne.n	8002ad2 <taskAcc+0x226>
	        write_index = 0;
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <taskAcc+0x244>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

	        sprintf(message,"Running inference\r\n");
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	493e      	ldr	r1, [pc, #248]	; (8002afc <taskAcc+0x250>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f00a fa1d 	bl	800ce44 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fbe8 	bl	80001e4 <strlen>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	f107 0108 	add.w	r1, r7, #8
 8002a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a20:	4832      	ldr	r0, [pc, #200]	; (8002aec <taskAcc+0x240>)
 8002a22:	f005 fbd7 	bl	80081d4 <HAL_UART_Transmit>
	        AI_Run(aiInData, aiOutData);
 8002a26:	4936      	ldr	r1, [pc, #216]	; (8002b00 <taskAcc+0x254>)
 8002a28:	4833      	ldr	r0, [pc, #204]	; (8002af8 <taskAcc+0x24c>)
 8002a2a:	f7ff fe9d 	bl	8002768 <AI_Run>

	        /* Output results */
	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a34:	e022      	b.n	8002a7c <taskAcc+0x1d0>
	          sprintf(message,"%8.6f ", aiOutData[i]);
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <taskAcc+0x254>)
 8002a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd90 	bl	8000568 <__aeabi_f2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	f107 0008 	add.w	r0, r7, #8
 8002a50:	492c      	ldr	r1, [pc, #176]	; (8002b04 <taskAcc+0x258>)
 8002a52:	f00a f9f7 	bl	800ce44 <siprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fbc2 	bl	80001e4 <strlen>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	f107 0108 	add.w	r1, r7, #8
 8002a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6c:	481f      	ldr	r0, [pc, #124]	; (8002aec <taskAcc+0x240>)
 8002a6e:	f005 fbb1 	bl	80081d4 <HAL_UART_Transmit>
	        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8002a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a76:	3301      	adds	r3, #1
 8002a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d9d8      	bls.n	8002a36 <taskAcc+0x18a>
	        }
	        uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8002a84:	2103      	movs	r1, #3
 8002a86:	481e      	ldr	r0, [pc, #120]	; (8002b00 <taskAcc+0x254>)
 8002a88:	f7ff feb8 	bl	80027fc <argmax>
 8002a8c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	        sprintf(message,": %d - %s\r\n", (int) class, activities[class]);
 8002a90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a94:	491c      	ldr	r1, [pc, #112]	; (8002b08 <taskAcc+0x25c>)
 8002a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a9e:	f107 0008 	add.w	r0, r7, #8
 8002aa2:	491a      	ldr	r1, [pc, #104]	; (8002b0c <taskAcc+0x260>)
 8002aa4:	f00a f9ce 	bl	800ce44 <siprintf>
	        state = activities[class];
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <taskAcc+0x25c>)
 8002aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <taskAcc+0x264>)
 8002ab4:	6013      	str	r3, [r2, #0]
	        HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fb92 	bl	80001e4 <strlen>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	f107 0108 	add.w	r1, r7, #8
 8002ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002acc:	4807      	ldr	r0, [pc, #28]	; (8002aec <taskAcc+0x240>)
 8002ace:	f005 fb81 	bl	80081d4 <HAL_UART_Transmit>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	378c      	adds	r7, #140	; 0x8c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002adc:	51eb851f 	.word	0x51eb851f
 8002ae0:	20000b78 	.word	0x20000b78
 8002ae4:	20000b7c 	.word	0x20000b7c
 8002ae8:	0800f460 	.word	0x0800f460
 8002aec:	20002cd4 	.word	0x20002cd4
 8002af0:	20003610 	.word	0x20003610
 8002af4:	457a0000 	.word	0x457a0000
 8002af8:	20002e18 	.word	0x20002e18
 8002afc:	0800f4b8 	.word	0x0800f4b8
 8002b00:	20002f50 	.word	0x20002f50
 8002b04:	0800f4cc 	.word	0x0800f4cc
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	0800f4d4 	.word	0x0800f4d4
 8002b10:	20000034 	.word	0x20000034

08002b14 <taskTemp>:
void taskTemp(void)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b09c      	sub	sp, #112	; 0x70
 8002b18:	af02      	add	r7, sp, #8
	temp = BSP_TSENSOR_ReadTemp();
 8002b1a:	f001 fa9b 	bl	8004054 <BSP_TSENSOR_ReadTemp>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <taskTemp+0x5c>)
 8002b24:	edc3 7a00 	vstr	s15, [r3]
	char message[100];
	sprintf(message,"Major Cycle %d |Minor Cycle %d| Temperature : %8.4f(Celsius)\r\n",major_cycle,minor_cycle,temp);
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <taskTemp+0x60>)
 8002b2a:	681c      	ldr	r4, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <taskTemp+0x64>)
 8002b2e:	681d      	ldr	r5, [r3, #0]
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <taskTemp+0x5c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd17 	bl	8000568 <__aeabi_f2d>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	1d38      	adds	r0, r7, #4
 8002b40:	e9cd 2300 	strd	r2, r3, [sp]
 8002b44:	462b      	mov	r3, r5
 8002b46:	4622      	mov	r2, r4
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <taskTemp+0x68>)
 8002b4a:	f00a f97b 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fb47 	bl	80001e4 <strlen>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	1d39      	adds	r1, r7, #4
 8002b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b60:	4807      	ldr	r0, [pc, #28]	; (8002b80 <taskTemp+0x6c>)
 8002b62:	f005 fb37 	bl	80081d4 <HAL_UART_Transmit>
}
 8002b66:	bf00      	nop
 8002b68:	3768      	adds	r7, #104	; 0x68
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20003768 	.word	0x20003768
 8002b74:	20000b78 	.word	0x20000b78
 8002b78:	20000b7c 	.word	0x20000b7c
 8002b7c:	0800f4e0 	.word	0x0800f4e0
 8002b80:	20002cd4 	.word	0x20002cd4

08002b84 <taskHumi>:
	char message[100];
	sprintf(message,"Major Cycle %d |Minor Cycle %d| Megneto X:%8.4f; Megneto Y:%8.4f; Megneto Z:%8.4f (Gauss) \r\n",major_cycle,minor_cycle,megXYZ[0],megXYZ[1],megXYZ[2]);
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
}
void taskHumi(void)
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b09c      	sub	sp, #112	; 0x70
 8002b88:	af02      	add	r7, sp, #8
	humi = BSP_HSENSOR_ReadHumidity();
 8002b8a:	f001 f9ed 	bl	8003f68 <BSP_HSENSOR_ReadHumidity>
 8002b8e:	eef0 7a40 	vmov.f32	s15, s0
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <taskHumi+0x5c>)
 8002b94:	edc3 7a00 	vstr	s15, [r3]
	char message[100];
	sprintf(message,"Major Cycle %d |Minor Cycle %d| Humidity : %8.4f(rH%%)\r\n",major_cycle,minor_cycle,humi);
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <taskHumi+0x60>)
 8002b9a:	681c      	ldr	r4, [r3, #0]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <taskHumi+0x64>)
 8002b9e:	681d      	ldr	r5, [r3, #0]
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <taskHumi+0x5c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fcdf 	bl	8000568 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	1d38      	adds	r0, r7, #4
 8002bb0:	e9cd 2300 	strd	r2, r3, [sp]
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <taskHumi+0x68>)
 8002bba:	f00a f943 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fb0f 	bl	80001e4 <strlen>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	1d39      	adds	r1, r7, #4
 8002bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <taskHumi+0x6c>)
 8002bd2:	f005 faff 	bl	80081d4 <HAL_UART_Transmit>
}
 8002bd6:	bf00      	nop
 8002bd8:	3768      	adds	r7, #104	; 0x68
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000376c 	.word	0x2000376c
 8002be4:	20000b78 	.word	0x20000b78
 8002be8:	20000b7c 	.word	0x20000b7c
 8002bec:	0800f580 	.word	0x0800f580
 8002bf0:	20002cd4 	.word	0x20002cd4

08002bf4 <taskSendMessage>:
	char message[100];
	sprintf(message,"Major Cycle %d |Minor Cycle %d| Pressure : %8.4f(hPa)\r\n",major_cycle,minor_cycle,pressure);
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
}
void taskSendMessage(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	WIFI_SendStr(&hwifi,state);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <taskSendMessage+0x34>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480b      	ldr	r0, [pc, #44]	; (8002c2c <taskSendMessage+0x38>)
 8002c00:	f000 fe6e 	bl	80038e0 <WIFI_SendStr>
    WIFI_SendData(&hwifi,temp);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <taskSendMessage+0x3c>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <taskSendMessage+0x38>)
 8002c10:	f000 fe2c 	bl	800386c <WIFI_SendData>
    WIFI_SendData(&hwifi,humi);
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <taskSendMessage+0x40>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1e:	4803      	ldr	r0, [pc, #12]	; (8002c2c <taskSendMessage+0x38>)
 8002c20:	f000 fe24 	bl	800386c <WIFI_SendData>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000034 	.word	0x20000034
 8002c2c:	20003614 	.word	0x20003614
 8002c30:	20003768 	.word	0x20003768
 8002c34:	2000376c 	.word	0x2000376c

08002c38 <main>:
int main(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af02      	add	r7, sp, #8
    //int seconds_count = 0;
    HAL_Init();
 8002c3e:	f002 f8b8 	bl	8004db2 <HAL_Init>
    SystemClock_Config();
 8002c42:	f7ff f9f7 	bl	8002034 <SystemClock_Config>
    hal_Init();
 8002c46:	f7ff fb5f 	bl	8002308 <hal_Init>
	BSP_ACCELERO_Init();
 8002c4a:	f001 f8d5 	bl	8003df8 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8002c4e:	f001 f929 	bl	8003ea4 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8002c52:	f001 f997 	bl	8003f84 <BSP_MAGNETO_Init>
	BSP_TSENSOR_Init();
 8002c56:	f001 f9e1 	bl	800401c <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8002c5a:	f001 f965 	bl	8003f28 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8002c5e:	f001 f9bd 	bl	8003fdc <BSP_PSENSOR_Init>
	sensor_config();
 8002c62:	f000 f874 	bl	8002d4e <sensor_config>
	WIFI_Init_main();
 8002c66:	f7ff fdf9 	bl	800285c <WIFI_Init_main>
	WIFI_JoinNetwork(&hwifi);
 8002c6a:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <main+0xa0>)
 8002c6c:	f000 fc88 	bl	8003580 <WIFI_JoinNetwork>
	WIFI_ConnectServer(&hwifi,"192.168.3.3","12345");
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <main+0xa4>)
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <main+0xa8>)
 8002c74:	4818      	ldr	r0, [pc, #96]	; (8002cd8 <main+0xa0>)
 8002c76:	f000 fd89 	bl	800378c <WIFI_ConnectServer>
	//odr(accelerometor ) = 104
	registerTask(taskAcc,"Accelero reading",0,0,ACCELERO,floor(1000/104));
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <main+0xac>)
 8002c88:	4817      	ldr	r0, [pc, #92]	; (8002ce8 <main+0xb0>)
 8002c8a:	f7fe f949 	bl	8000f20 <registerTask>
	//odr(temperature)  = 12.5
	registerTask(taskTemp,"Temperature reading",1,0,TEMP,floor(1000/12.5));
 8002c8e:	2350      	movs	r3, #80	; 0x50
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2301      	movs	r3, #1
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4914      	ldr	r1, [pc, #80]	; (8002cec <main+0xb4>)
 8002c9c:	4814      	ldr	r0, [pc, #80]	; (8002cf0 <main+0xb8>)
 8002c9e:	f7fe f93f 	bl	8000f20 <registerTask>
	registerTask(taskSendMessage,"Sending Message",3,0,WIFI,1000);
 8002ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2303      	movs	r3, #3
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	2203      	movs	r2, #3
 8002cb0:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <main+0xbc>)
 8002cb2:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <main+0xc0>)
 8002cb4:	f7fe f934 	bl	8000f20 <registerTask>
	//odr(piezo) = 25
	//registerTask(taskPiezo,"Piezo reading",1,1,PIEZO,floor(1000/25));
	//odr(gyro) = 52
	//registerTask(taskGyro,"Gyro reading",2,0,GYRO,floor(1000/52));
	//odr(humidity) = 12.5
	registerTask(taskHumi,"Humidity reading",2,0,HUMI,floor(1000/12.5));
 8002cb8:	2350      	movs	r3, #80	; 0x50
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	490d      	ldr	r1, [pc, #52]	; (8002cfc <main+0xc4>)
 8002cc6:	480e      	ldr	r0, [pc, #56]	; (8002d00 <main+0xc8>)
 8002cc8:	f7fe f92a 	bl	8000f20 <registerTask>
	AI_Init();
 8002ccc:	f7ff fcf2 	bl	80026b4 <AI_Init>
	task_scheduler();
 8002cd0:	f7fe faa6 	bl	8001220 <task_scheduler>
	while(1);
 8002cd4:	e7fe      	b.n	8002cd4 <main+0x9c>
 8002cd6:	bf00      	nop
 8002cd8:	20003614 	.word	0x20003614
 8002cdc:	0800f648 	.word	0x0800f648
 8002ce0:	0800f650 	.word	0x0800f650
 8002ce4:	0800f65c 	.word	0x0800f65c
 8002ce8:	080028ad 	.word	0x080028ad
 8002cec:	0800f670 	.word	0x0800f670
 8002cf0:	08002b15 	.word	0x08002b15
 8002cf4:	0800f684 	.word	0x0800f684
 8002cf8:	08002bf5 	.word	0x08002bf5
 8002cfc:	0800f694 	.word	0x0800f694
 8002d00:	08002b85 	.word	0x08002b85

08002d04 <lsm6dsl_relative_tilt_intr_en>:
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT_DUR2, 0x06);
	uint8_t tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG);
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, tmp|0x40);
}
void lsm6dsl_relative_tilt_intr_en(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
	uint8_t tmp;
	tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C);
 8002d0a:	2119      	movs	r1, #25
 8002d0c:	20d4      	movs	r0, #212	; 0xd4
 8002d0e:	f001 f837 	bl	8003d80 <SENSOR_IO_Read>
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL10_C, 0x0C|tmp);
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f043 030c 	orr.w	r3, r3, #12
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2119      	movs	r1, #25
 8002d22:	20d4      	movs	r0, #212	; 0xd4
 8002d24:	f001 f812 	bl	8003d4c <SENSOR_IO_Write>
	tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG);
 8002d28:	215e      	movs	r1, #94	; 0x5e
 8002d2a:	20d4      	movs	r0, #212	; 0xd4
 8002d2c:	f001 f828 	bl	8003d80 <SENSOR_IO_Read>
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
	SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, tmp|0x02);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	215e      	movs	r1, #94	; 0x5e
 8002d40:	20d4      	movs	r0, #212	; 0xd4
 8002d42:	f001 f803 	bl	8003d4c <SENSOR_IO_Write>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <sensor_config>:
{
	SENSOR_IO_Write(HTS221_I2C_ADDRESS,HTS221_CTRL_REG3,0b0);
}
//script of lps22hb error: drdy enable for default
void sensor_config(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0
	lsm6dsl_relative_tilt_intr_en();
 8002d52:	f7ff ffd7 	bl	8002d04 <lsm6dsl_relative_tilt_intr_en>
//	lsm6dsl_dready_en();
//	lis3mdl_dready_en();

//	lps22hb_dready_en();
//	hts221_dready_en();
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_MspInit+0x44>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <HAL_MspInit+0x44>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_MspInit+0x44>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_MspInit+0x44>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_MspInit+0x44>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_MspInit+0x44>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <HAL_I2C_MspInit+0x7c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d128      	bne.n	8002e18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de4:	2312      	movs	r3, #18
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de8:	2301      	movs	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002df0:	2304      	movs	r3, #4
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_I2C_MspInit+0x84>)
 8002dfc:	f002 f97e 	bl	80050fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002e06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_I2C_MspInit+0x80>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40005800 	.word	0x40005800
 8002e24:	40021000 	.word	0x40021000
 8002e28:	48000400 	.word	0x48000400

08002e2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_I2C_MspDeInit+0x30>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10a      	bne.n	8002e54 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_I2C_MspDeInit+0x34>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <HAL_I2C_MspDeInit+0x34>)
 8002e44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8002e4a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <HAL_I2C_MspDeInit+0x38>)
 8002e50:	f002 fafe 	bl	8005450 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40005800 	.word	0x40005800
 8002e60:	40021000 	.word	0x40021000
 8002e64:	48000400 	.word	0x48000400

08002e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_SPI_MspInit+0x7c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d128      	bne.n	8002edc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_SPI_MspInit+0x80>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002eba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ecc:	2306      	movs	r3, #6
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <HAL_SPI_MspInit+0x84>)
 8002ed8:	f002 f910 	bl	80050fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40003c00 	.word	0x40003c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	48000800 	.word	0x48000800

08002ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <HAL_UART_MspInit+0xd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d128      	bne.n	8002f64 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002f42:	23c0      	movs	r3, #192	; 0xc0
 8002f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f52:	2307      	movs	r3, #7
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <HAL_UART_MspInit+0xe0>)
 8002f5e:	f002 f8cd 	bl	80050fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f62:	e02d      	b.n	8002fc0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_UART_MspInit+0xe4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d128      	bne.n	8002fc0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_UART_MspInit+0xdc>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fb0:	2307      	movs	r3, #7
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <HAL_UART_MspInit+0xe8>)
 8002fbc:	f002 f89e 	bl	80050fc <HAL_GPIO_Init>
}
 8002fc0:	bf00      	nop
 8002fc2:	3730      	adds	r7, #48	; 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	48000c00 	.word	0x48000c00

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <UsageFault_Handler+0x4>

08003002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003030:	f001 ff12 	bl	8004e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800303c:	2020      	movs	r0, #32
 800303e:	f002 fb45 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003042:	2040      	movs	r0, #64	; 0x40
 8003044:	f002 fb42 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003048:	2080      	movs	r0, #128	; 0x80
 800304a:	f002 fb3f 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800304e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003052:	f002 fb3b 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}

0800305a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800305e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003062:	f002 fb33 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003066:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800306a:	f002 fb2f 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800306e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003072:	f002 fb2b 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003076:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800307a:	f002 fb27 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800307e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003082:	f002 fb23 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}

0800308a <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800308e:	2002      	movs	r0, #2
 8003090:	f002 fb1c 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}

08003098 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <_sbrk+0x50>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <_sbrk+0x16>
		heap_end = &end;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <_sbrk+0x50>)
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <_sbrk+0x54>)
 80030ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <_sbrk+0x50>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <_sbrk+0x50>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	466a      	mov	r2, sp
 80030be:	4293      	cmp	r3, r2
 80030c0:	d907      	bls.n	80030d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030c2:	f008 ffef 	bl	800c0a4 <__errno>
 80030c6:	4603      	mov	r3, r0
 80030c8:	220c      	movs	r2, #12
 80030ca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	e006      	b.n	80030e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <_sbrk+0x50>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <_sbrk+0x50>)
 80030dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20003770 	.word	0x20003770
 80030ec:	20004140 	.word	0x20004140

080030f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <SystemInit+0x64>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <SystemInit+0x64>)
 80030fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <SystemInit+0x68>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <SystemInit+0x68>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <SystemInit+0x68>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <SystemInit+0x68>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <SystemInit+0x68>)
 800311c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003120:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003124:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <SystemInit+0x68>)
 8003128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800312c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <SystemInit+0x68>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <SystemInit+0x68>)
 8003134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <SystemInit+0x68>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <SystemInit+0x64>)
 8003142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003146:	609a      	str	r2, [r3, #8]
#endif
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	40021000 	.word	0x40021000

0800315c <WIFI_DEBUG>:
  * @retval WIFI_StatusTypeDef
  */
char wifiTxBuffer[WIFI_TX_BUFFER_SIZE];
char wifiRxBuffer[WIFI_RX_BUFFER_SIZE];
void WIFI_DEBUG(char *cmd,char *resp)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	f6ad 4d08 	subw	sp, sp, #3080	; 0xc08
 8003162:	af00      	add	r7, sp, #0
 8003164:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8003168:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800316c:	6018      	str	r0, [r3, #0]
 800316e:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8003172:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8003176:	6019      	str	r1, [r3, #0]
	char message[WIFI_RX_BUFFER_SIZE*2];
	char cmd_box[WIFI_RX_BUFFER_SIZE];
	sprintf(cmd_box,cmd);
 8003178:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800317c:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003180:	f107 0208 	add.w	r2, r7, #8
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	4610      	mov	r0, r2
 8003188:	f009 fe5c 	bl	800ce44 <siprintf>
	trimstr(cmd_box,strlen(cmd_box)+1,'\r');
 800318c:	f107 0308 	add.w	r3, r7, #8
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f827 	bl	80001e4 <strlen>
 8003196:	4603      	mov	r3, r0
 8003198:	1c59      	adds	r1, r3, #1
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	220d      	movs	r2, #13
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc23 	bl	80039ec <trimstr>
	sprintf(message,"[%s]%s",cmd_box,resp);
 80031a6:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80031aa:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 80031ae:	f107 0208 	add.w	r2, r7, #8
 80031b2:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	490a      	ldr	r1, [pc, #40]	; (80031e4 <WIFI_DEBUG+0x88>)
 80031ba:	f009 fe43 	bl	800ce44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message),0xFFFF);
 80031be:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd f80e 	bl	80001e4 <strlen>
 80031c8:	4603      	mov	r3, r0
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80031d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <WIFI_DEBUG+0x8c>)
 80031d6:	f004 fffd 	bl	80081d4 <HAL_UART_Transmit>
}
 80031da:	bf00      	nop
 80031dc:	f607 4708 	addw	r7, r7, #3080	; 0xc08
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	0800f6a8 	.word	0x0800f6a8
 80031e8:	20002cd4 	.word	0x20002cd4

080031ec <WIFI_SPI_Receive>:
uint32_t htonl(uint32_t data)
{
	uint32_t new_data = ((data&0xff)<<24)|((data&0xff00)<<8)|((data&0xff0000)>>8)|((data&0xff000000)>>24);
	return new_data;
}
WIFI_StatusTypeDef WIFI_SPI_Receive(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]

	uint16_t cnt = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	82fb      	strh	r3, [r7, #22]
	memset(buffer, '\0', size); // Erase buffer
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	461a      	mov	r2, r3
 8003202:	2100      	movs	r1, #0
 8003204:	68b8      	ldr	r0, [r7, #8]
 8003206:	f009 f887 	bl	800c318 <memset>

	while (WIFI_IS_CMDDATA_READY())
 800320a:	e016      	b.n	800323a <WIFI_SPI_Receive+0x4e>
	{
		// Fill buffer as long there is still space
		if ( (cnt > (size - 2)) || (HAL_SPI_Receive(hwifi->handle , (uint8_t*) buffer + cnt, 1, WIFI_TIMEOUT) != HAL_OK) )
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	1e5a      	subs	r2, r3, #1
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	429a      	cmp	r2, r3
 8003214:	dd0c      	ble.n	8003230 <WIFI_SPI_Receive+0x44>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	8afb      	ldrh	r3, [r7, #22]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	18d1      	adds	r1, r2, r3
 8003220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003224:	2201      	movs	r2, #1
 8003226:	f004 f801 	bl	800722c <HAL_SPI_Receive>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <WIFI_SPI_Receive+0x48>
		  {
			Error_Handler();
 8003230:	f7fe fef0 	bl	8002014 <Error_Handler>
		  }
		cnt+=2;
 8003234:	8afb      	ldrh	r3, [r7, #22]
 8003236:	3302      	adds	r3, #2
 8003238:	82fb      	strh	r3, [r7, #22]
	while (WIFI_IS_CMDDATA_READY())
 800323a:	2102      	movs	r1, #2
 800323c:	4808      	ldr	r0, [pc, #32]	; (8003260 <WIFI_SPI_Receive+0x74>)
 800323e:	f002 f9fb 	bl	8005638 <HAL_GPIO_ReadPin>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d0e1      	beq.n	800320c <WIFI_SPI_Receive+0x20>
	}

	// Trim padding chars from data
	trimstr(buffer, size, (char) WIFI_RX_PADDING);
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	2215      	movs	r2, #21
 800324c:	4619      	mov	r1, r3
 800324e:	68b8      	ldr	r0, [r7, #8]
 8003250:	f000 fbcc 	bl	80039ec <trimstr>

	return WIFI_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	48001000 	.word	0x48001000

08003264 <WIFI_SPI_Transmit>:
  * @param  buffer: A char buffer, where the data to be sent is saved in.
  * @param  size: Buffer size (including \0, so it is compatible with sizeof())
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SPI_Transmit(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 8003264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	4613      	mov	r3, r2
 8003272:	80fb      	strh	r3, [r7, #6]
 8003274:	466b      	mov	r3, sp
 8003276:	461e      	mov	r6, r3

	char bTx[(size/2)*2 + 1]; // Make a buffer that has an even amount of bytes (even is meant for the chars excluding \0)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	1c59      	adds	r1, r3, #1
 8003282:	1e4b      	subs	r3, r1, #1
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	460a      	mov	r2, r1
 8003288:	2300      	movs	r3, #0
 800328a:	4690      	mov	r8, r2
 800328c:	4699      	mov	r9, r3
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800329a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a2:	460a      	mov	r2, r1
 80032a4:	2300      	movs	r3, #0
 80032a6:	4614      	mov	r4, r2
 80032a8:	461d      	mov	r5, r3
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	00eb      	lsls	r3, r5, #3
 80032b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b8:	00e2      	lsls	r2, r4, #3
 80032ba:	460b      	mov	r3, r1
 80032bc:	3307      	adds	r3, #7
 80032be:	08db      	lsrs	r3, r3, #3
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	ebad 0d03 	sub.w	sp, sp, r3
 80032c6:	466b      	mov	r3, sp
 80032c8:	3300      	adds	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
	snprintf( bTx, size, buffer ); // Copy buffer in bTx
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	4619      	mov	r1, r3
 80032d2:	6938      	ldr	r0, [r7, #16]
 80032d4:	f009 fd82 	bl	800cddc <sniprintf>
	//size % 2 ==0 : mLen is odd
	if ( !(size % 2) ) strcat(bTx, (char) WIFI_TX_PADDING); // If buffer had an odd amount of bytes, append a filler char to bTx
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d103      	bne.n	80032ec <WIFI_SPI_Transmit+0x88>
 80032e4:	210a      	movs	r1, #10
 80032e6:	6938      	ldr	r0, [r7, #16]
 80032e8:	f009 fe0f 	bl	800cf0a <strcat>

	if (HAL_SPI_Transmit(hwifi->handle, (uint8_t*)bTx, size/2, WIFI_TIMEOUT) != HAL_OK) // size must be halved since 16bits are sent via SPI
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	6939      	ldr	r1, [r7, #16]
 80032fc:	f003 fe30 	bl	8006f60 <HAL_SPI_Transmit>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <WIFI_SPI_Transmit+0xa6>
	  {
		Error_Handler();
 8003306:	f7fe fe85 	bl	8002014 <Error_Handler>
	  }

	return WIFI_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	46b5      	mov	sp, r6
}
 800330e:	4618      	mov	r0, r3
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003318 <WIFI_Init>:
  * @brief  Resets and initialises the Wifi module.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_Init(WIFI_HandleTypeDef* hwifi){
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

	WIFI_RESET_MODULE();
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800332a:	482f      	ldr	r0, [pc, #188]	; (80033e8 <WIFI_Init+0xd0>)
 800332c:	f002 f99c 	bl	8005668 <HAL_GPIO_WritePin>
 8003330:	200a      	movs	r0, #10
 8003332:	f001 fdaf 	bl	8004e94 <HAL_Delay>
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800333c:	482a      	ldr	r0, [pc, #168]	; (80033e8 <WIFI_Init+0xd0>)
 800333e:	f002 f993 	bl	8005668 <HAL_GPIO_WritePin>
 8003342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003346:	f001 fda5 	bl	8004e94 <HAL_Delay>
	WIFI_ENABLE_NSS();
 800334a:	2200      	movs	r2, #0
 800334c:	2101      	movs	r1, #1
 800334e:	4826      	ldr	r0, [pc, #152]	; (80033e8 <WIFI_Init+0xd0>)
 8003350:	f002 f98a 	bl	8005668 <HAL_GPIO_WritePin>
 8003354:	200a      	movs	r0, #10
 8003356:	f001 fd9d 	bl	8004e94 <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 800335a:	bf00      	nop
 800335c:	2102      	movs	r1, #2
 800335e:	4822      	ldr	r0, [pc, #136]	; (80033e8 <WIFI_Init+0xd0>)
 8003360:	f002 f96a 	bl	8005638 <HAL_GPIO_ReadPin>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d1f8      	bne.n	800335c <WIFI_Init+0x44>

	if(WIFI_SPI_Receive(hwifi, wifiRxBuffer, WIFI_RX_BUFFER_SIZE) != WIFI_OK) Error_Handler();
 800336a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336e:	491f      	ldr	r1, [pc, #124]	; (80033ec <WIFI_Init+0xd4>)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff3b 	bl	80031ec <WIFI_SPI_Receive>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <WIFI_Init+0x68>
 800337c:	f7fe fe4a 	bl	8002014 <Error_Handler>

	if( strcmp(wifiRxBuffer, WIFI_MSG_POWERUP) ) Error_Handler();
 8003380:	491b      	ldr	r1, [pc, #108]	; (80033f0 <WIFI_Init+0xd8>)
 8003382:	481a      	ldr	r0, [pc, #104]	; (80033ec <WIFI_Init+0xd4>)
 8003384:	f7fc ff24 	bl	80001d0 <strcmp>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <WIFI_Init+0x7a>
 800338e:	f7fe fe41 	bl	8002014 <Error_Handler>

	WIFI_DISABLE_NSS();
 8003392:	2201      	movs	r2, #1
 8003394:	2101      	movs	r1, #1
 8003396:	4814      	ldr	r0, [pc, #80]	; (80033e8 <WIFI_Init+0xd0>)
 8003398:	f002 f966 	bl	8005668 <HAL_GPIO_WritePin>
 800339c:	200a      	movs	r0, #10
 800339e:	f001 fd79 	bl	8004e94 <HAL_Delay>


	msgLength = sprintf(wifiTxBuffer, "Z3=0\r");
 80033a2:	4914      	ldr	r1, [pc, #80]	; (80033f4 <WIFI_Init+0xdc>)
 80033a4:	4814      	ldr	r0, [pc, #80]	; (80033f8 <WIFI_Init+0xe0>)
 80033a6:	f009 fd4d 	bl	800ce44 <siprintf>
 80033aa:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, WIFI_TX_BUFFER_SIZE, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <WIFI_Init+0xd4>)
 80033b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033b8:	490f      	ldr	r1, [pc, #60]	; (80033f8 <WIFI_Init+0xe0>)
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f820 	bl	8003400 <WIFI_SendATCommand>

	msgLength = sprintf(wifiTxBuffer, "Z0\r");
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <WIFI_Init+0xe4>)
 80033c2:	480d      	ldr	r0, [pc, #52]	; (80033f8 <WIFI_Init+0xe0>)
 80033c4:	f009 fd3e 	bl	800ce44 <siprintf>
 80033c8:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, WIFI_TX_BUFFER_SIZE, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80033ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <WIFI_Init+0xd4>)
 80033d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <WIFI_Init+0xe0>)
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f811 	bl	8003400 <WIFI_SendATCommand>
	//printf("Answer reset:\n %s", wifiRxBuffer);
//	msgLength = sprintf(wifiTxBuffer, "\r");
//	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);

	return WIFI_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	48001000 	.word	0x48001000
 80033ec:	20003b74 	.word	0x20003b74
 80033f0:	0800f6b0 	.word	0x0800f6b0
 80033f4:	0800f6b8 	.word	0x0800f6b8
 80033f8:	20003774 	.word	0x20003774
 80033fc:	0800f6c0 	.word	0x0800f6c0

08003400 <WIFI_SendATCommand>:
  * @param  bRx: Response buffer
  * @param  sizeCmd: Response buffer size
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SendATCommand(WIFI_HandleTypeDef* hwifi, char* bCmd, uint16_t sizeCmd, char* bRx, uint16_t sizeRx){
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]

	while(!WIFI_IS_CMDDATA_READY());
 8003410:	bf00      	nop
 8003412:	2102      	movs	r1, #2
 8003414:	4828      	ldr	r0, [pc, #160]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 8003416:	f002 f90f 	bl	8005638 <HAL_GPIO_ReadPin>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d1f8      	bne.n	8003412 <WIFI_SendATCommand+0x12>

	WIFI_ENABLE_NSS();
 8003420:	2200      	movs	r2, #0
 8003422:	2101      	movs	r1, #1
 8003424:	4824      	ldr	r0, [pc, #144]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 8003426:	f002 f91f 	bl	8005668 <HAL_GPIO_WritePin>
 800342a:	200a      	movs	r0, #10
 800342c:	f001 fd32 	bl	8004e94 <HAL_Delay>

	if(WIFI_SPI_Transmit(hwifi, bCmd, sizeCmd) != WIFI_OK) Error_Handler();
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	461a      	mov	r2, r3
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff ff14 	bl	8003264 <WIFI_SPI_Transmit>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <WIFI_SendATCommand+0x46>
 8003442:	f7fe fde7 	bl	8002014 <Error_Handler>

	WIFI_DISABLE_NSS();
 8003446:	2201      	movs	r2, #1
 8003448:	2101      	movs	r1, #1
 800344a:	481b      	ldr	r0, [pc, #108]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 800344c:	f002 f90c 	bl	8005668 <HAL_GPIO_WritePin>
 8003450:	200a      	movs	r0, #10
 8003452:	f001 fd1f 	bl	8004e94 <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 8003456:	bf00      	nop
 8003458:	2102      	movs	r1, #2
 800345a:	4817      	ldr	r0, [pc, #92]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 800345c:	f002 f8ec 	bl	8005638 <HAL_GPIO_ReadPin>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d1f8      	bne.n	8003458 <WIFI_SendATCommand+0x58>

	WIFI_ENABLE_NSS();
 8003466:	2200      	movs	r2, #0
 8003468:	2101      	movs	r1, #1
 800346a:	4813      	ldr	r0, [pc, #76]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 800346c:	f002 f8fc 	bl	8005668 <HAL_GPIO_WritePin>
 8003470:	200a      	movs	r0, #10
 8003472:	f001 fd0f 	bl	8004e94 <HAL_Delay>

	if(WIFI_SPI_Receive(hwifi, bRx, sizeRx) != WIFI_OK) Error_Handler();
 8003476:	8b3b      	ldrh	r3, [r7, #24]
 8003478:	461a      	mov	r2, r3
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff feb5 	bl	80031ec <WIFI_SPI_Receive>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <WIFI_SendATCommand+0x8c>
 8003488:	f7fe fdc4 	bl	8002014 <Error_Handler>

	if(WIFI_IS_CMDDATA_READY()) Error_Handler(); // If CMDDATA_READY is still high, then the buffer is too small for the data
 800348c:	2102      	movs	r1, #2
 800348e:	480a      	ldr	r0, [pc, #40]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 8003490:	f002 f8d2 	bl	8005638 <HAL_GPIO_ReadPin>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <WIFI_SendATCommand+0x9e>
 800349a:	f7fe fdbb 	bl	8002014 <Error_Handler>

	WIFI_DISABLE_NSS();
 800349e:	2201      	movs	r2, #1
 80034a0:	2101      	movs	r1, #1
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <WIFI_SendATCommand+0xb8>)
 80034a4:	f002 f8e0 	bl	8005668 <HAL_GPIO_WritePin>
 80034a8:	200a      	movs	r0, #10
 80034aa:	f001 fcf3 	bl	8004e94 <HAL_Delay>

	return WIFI_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	48001000 	.word	0x48001000

080034bc <WIFI_SendATData>:
WIFI_StatusTypeDef WIFI_SendATData(WIFI_HandleTypeDef* hwifi, char* bCmd, uint16_t sizeCmd, char* bRx, uint16_t sizeRx){
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80fb      	strh	r3, [r7, #6]

	while(!WIFI_IS_CMDDATA_READY());
 80034cc:	bf00      	nop
 80034ce:	2102      	movs	r1, #2
 80034d0:	482a      	ldr	r0, [pc, #168]	; (800357c <WIFI_SendATData+0xc0>)
 80034d2:	f002 f8b1 	bl	8005638 <HAL_GPIO_ReadPin>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d1f8      	bne.n	80034ce <WIFI_SendATData+0x12>

	WIFI_ENABLE_NSS();
 80034dc:	2200      	movs	r2, #0
 80034de:	2101      	movs	r1, #1
 80034e0:	4826      	ldr	r0, [pc, #152]	; (800357c <WIFI_SendATData+0xc0>)
 80034e2:	f002 f8c1 	bl	8005668 <HAL_GPIO_WritePin>
 80034e6:	200a      	movs	r0, #10
 80034e8:	f001 fcd4 	bl	8004e94 <HAL_Delay>

	if (HAL_SPI_Transmit(hwifi->handle, (uint8_t*)bCmd, sizeCmd/2, WIFI_TIMEOUT) != HAL_OK) // size must be halved since 16bits are sent via SPI
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	f003 fd30 	bl	8006f60 <HAL_SPI_Transmit>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <WIFI_SendATData+0x4e>
	{
		Error_Handler();
 8003506:	f7fe fd85 	bl	8002014 <Error_Handler>
	}

	WIFI_DISABLE_NSS();
 800350a:	2201      	movs	r2, #1
 800350c:	2101      	movs	r1, #1
 800350e:	481b      	ldr	r0, [pc, #108]	; (800357c <WIFI_SendATData+0xc0>)
 8003510:	f002 f8aa 	bl	8005668 <HAL_GPIO_WritePin>
 8003514:	200a      	movs	r0, #10
 8003516:	f001 fcbd 	bl	8004e94 <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 800351a:	bf00      	nop
 800351c:	2102      	movs	r1, #2
 800351e:	4817      	ldr	r0, [pc, #92]	; (800357c <WIFI_SendATData+0xc0>)
 8003520:	f002 f88a 	bl	8005638 <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d1f8      	bne.n	800351c <WIFI_SendATData+0x60>

	WIFI_ENABLE_NSS();
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	4813      	ldr	r0, [pc, #76]	; (800357c <WIFI_SendATData+0xc0>)
 8003530:	f002 f89a 	bl	8005668 <HAL_GPIO_WritePin>
 8003534:	200a      	movs	r0, #10
 8003536:	f001 fcad 	bl	8004e94 <HAL_Delay>

	if(WIFI_SPI_Receive(hwifi, bRx, sizeRx) != WIFI_OK) Error_Handler();
 800353a:	8b3b      	ldrh	r3, [r7, #24]
 800353c:	461a      	mov	r2, r3
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fe53 	bl	80031ec <WIFI_SPI_Receive>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <WIFI_SendATData+0x94>
 800354c:	f7fe fd62 	bl	8002014 <Error_Handler>

	if(WIFI_IS_CMDDATA_READY()) Error_Handler(); // If CMDDATA_READY is still high, then the buffer is too small for the data
 8003550:	2102      	movs	r1, #2
 8003552:	480a      	ldr	r0, [pc, #40]	; (800357c <WIFI_SendATData+0xc0>)
 8003554:	f002 f870 	bl	8005638 <HAL_GPIO_ReadPin>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <WIFI_SendATData+0xa6>
 800355e:	f7fe fd59 	bl	8002014 <Error_Handler>

	WIFI_DISABLE_NSS();
 8003562:	2201      	movs	r2, #1
 8003564:	2101      	movs	r1, #1
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <WIFI_SendATData+0xc0>)
 8003568:	f002 f87e 	bl	8005668 <HAL_GPIO_WritePin>
 800356c:	200a      	movs	r0, #10
 800356e:	f001 fc91 	bl	8004e94 <HAL_Delay>

	return WIFI_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	48001000 	.word	0x48001000

08003580 <WIFI_JoinNetwork>:
  * 		the Wifi handle.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_JoinNetwork(WIFI_HandleTypeDef* hwifi){
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

	// Set SSID
	msgLength = sprintf(wifiTxBuffer, "C1=%s\r", hwifi->ssid);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	461a      	mov	r2, r3
 8003592:	4972      	ldr	r1, [pc, #456]	; (800375c <WIFI_JoinNetwork+0x1dc>)
 8003594:	4872      	ldr	r0, [pc, #456]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 8003596:	f009 fc55 	bl	800ce44 <siprintf>
 800359a:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80035ac:	496c      	ldr	r1, [pc, #432]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff26 	bl	8003400 <WIFI_SendATCommand>

	// Set passphrase
	msgLength = sprintf(wifiTxBuffer, "C2=%s\r", hwifi->passphrase);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	461a      	mov	r2, r3
 80035ba:	496b      	ldr	r1, [pc, #428]	; (8003768 <WIFI_JoinNetwork+0x1e8>)
 80035bc:	4868      	ldr	r0, [pc, #416]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80035be:	f009 fc41 	bl	800ce44 <siprintf>
 80035c2:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4b64      	ldr	r3, [pc, #400]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80035d4:	4962      	ldr	r1, [pc, #392]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff12 	bl	8003400 <WIFI_SendATCommand>

	// Set security type
	msgLength = sprintf(wifiTxBuffer, "C3=%d\r", hwifi->securityType);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7b1b      	ldrb	r3, [r3, #12]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4962      	ldr	r1, [pc, #392]	; (800376c <WIFI_JoinNetwork+0x1ec>)
 80035e4:	485e      	ldr	r0, [pc, #376]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80035e6:	f009 fc2d 	bl	800ce44 <siprintf>
 80035ea:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80035fc:	4958      	ldr	r1, [pc, #352]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fefe 	bl	8003400 <WIFI_SendATCommand>

	// Set if IP is requested via DHCP
	msgLength = sprintf(wifiTxBuffer, "C4=%d\r", hwifi->DHCP);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7b5b      	ldrb	r3, [r3, #13]
 8003608:	461a      	mov	r2, r3
 800360a:	4959      	ldr	r1, [pc, #356]	; (8003770 <WIFI_JoinNetwork+0x1f0>)
 800360c:	4854      	ldr	r0, [pc, #336]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 800360e:	f009 fc19 	bl	800ce44 <siprintf>
 8003612:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	b29b      	uxth	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4b50      	ldr	r3, [pc, #320]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 8003624:	494e      	ldr	r1, [pc, #312]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff feea 	bl	8003400 <WIFI_SendATCommand>

	// If DHCP is not used, set the additionally needed configurations
	if(hwifi->DHCP != SET){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7b5b      	ldrb	r3, [r3, #13]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d04f      	beq.n	80036d4 <WIFI_JoinNetwork+0x154>

		// Set module's IP address
		msgLength = sprintf(wifiTxBuffer, "C6=%s\r", hwifi->ipAddress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3314      	adds	r3, #20
 8003638:	461a      	mov	r2, r3
 800363a:	494e      	ldr	r1, [pc, #312]	; (8003774 <WIFI_JoinNetwork+0x1f4>)
 800363c:	4848      	ldr	r0, [pc, #288]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 800363e:	f009 fc01 	bl	800ce44 <siprintf>
 8003642:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	b29b      	uxth	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4b44      	ldr	r3, [pc, #272]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 8003654:	4942      	ldr	r1, [pc, #264]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fed2 	bl	8003400 <WIFI_SendATCommand>

		// Set module's network mask
		msgLength = sprintf(wifiTxBuffer, "C7=%s\r", hwifi->networkMask);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3345      	adds	r3, #69	; 0x45
 8003660:	461a      	mov	r2, r3
 8003662:	4945      	ldr	r1, [pc, #276]	; (8003778 <WIFI_JoinNetwork+0x1f8>)
 8003664:	483e      	ldr	r0, [pc, #248]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 8003666:	f009 fbed 	bl	800ce44 <siprintf>
 800366a:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	b29b      	uxth	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 800367c:	4938      	ldr	r1, [pc, #224]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff febe 	bl	8003400 <WIFI_SendATCommand>

		// Set module's default gateway
		msgLength = sprintf(wifiTxBuffer, "C8=%s\r", hwifi->defaultGateway);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3356      	adds	r3, #86	; 0x56
 8003688:	461a      	mov	r2, r3
 800368a:	493c      	ldr	r1, [pc, #240]	; (800377c <WIFI_JoinNetwork+0x1fc>)
 800368c:	4834      	ldr	r0, [pc, #208]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 800368e:	f009 fbd9 	bl	800ce44 <siprintf>
 8003692:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	b29b      	uxth	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80036a4:	492e      	ldr	r1, [pc, #184]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff feaa 	bl	8003400 <WIFI_SendATCommand>

		// Set module's primary DNS server
		msgLength = sprintf(wifiTxBuffer, "C9=%s\r", hwifi->primaryDNSServer);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3367      	adds	r3, #103	; 0x67
 80036b0:	461a      	mov	r2, r3
 80036b2:	4933      	ldr	r1, [pc, #204]	; (8003780 <WIFI_JoinNetwork+0x200>)
 80036b4:	482a      	ldr	r0, [pc, #168]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80036b6:	f009 fbc5 	bl	800ce44 <siprintf>
 80036ba:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80036cc:	4924      	ldr	r1, [pc, #144]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fe96 	bl	8003400 <WIFI_SendATCommand>

	}

	// Join the network
	msgLength = sprintf(wifiTxBuffer, "C0\r");
 80036d4:	492b      	ldr	r1, [pc, #172]	; (8003784 <WIFI_JoinNetwork+0x204>)
 80036d6:	4822      	ldr	r0, [pc, #136]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80036d8:	f009 fbb4 	bl	800ce44 <siprintf>
 80036dc:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80036ee:	491c      	ldr	r1, [pc, #112]	; (8003760 <WIFI_JoinNetwork+0x1e0>)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fe85 	bl	8003400 <WIFI_SendATCommand>

	// If there was an error, call the error handler
	if(strstr(wifiRxBuffer, "ERROR") != NULL) Error_Handler();
 80036f6:	4924      	ldr	r1, [pc, #144]	; (8003788 <WIFI_JoinNetwork+0x208>)
 80036f8:	481a      	ldr	r0, [pc, #104]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 80036fa:	f009 fc2a 	bl	800cf52 <strstr>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <WIFI_JoinNetwork+0x188>
 8003704:	f7fe fc86 	bl	8002014 <Error_Handler>

	// If the module's IP address was assigned by DHCP, then parse it
	// from the response and save it in the Wifi handle.
	if(hwifi->DHCP == SET){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7b5b      	ldrb	r3, [r3, #13]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d11f      	bne.n	8003750 <WIFI_JoinNetwork+0x1d0>
		// The IP address is between the first and second comma
		char* startPos = strstr(wifiRxBuffer, ",");
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	4814      	ldr	r0, [pc, #80]	; (8003764 <WIFI_JoinNetwork+0x1e4>)
 8003714:	f009 fc08 	bl	800cf28 <strchr>
 8003718:	6138      	str	r0, [r7, #16]
		char* endPos = strstr(startPos+1, ",");
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3301      	adds	r3, #1
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	4618      	mov	r0, r3
 8003722:	f009 fc01 	bl	800cf28 <strchr>
 8003726:	60f8      	str	r0, [r7, #12]

		// Check whether the commas have been found
		if(startPos == NULL || endPos == NULL) Error_Handler();
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <WIFI_JoinNetwork+0x1b4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <WIFI_JoinNetwork+0x1b8>
 8003734:	f7fe fc6e 	bl	8002014 <Error_Handler>

		// Copy the IP address from the response buffer into the Wifi handle
		// For n set IP_length+1, because the ending char \0 must be considered
		snprintf(hwifi->ipAddress, endPos - startPos, startPos+1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f103 0014 	add.w	r0, r3, #20
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4619      	mov	r1, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3301      	adds	r3, #1
 800374a:	461a      	mov	r2, r3
 800374c:	f009 fb46 	bl	800cddc <sniprintf>
	}

	return WIFI_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	0800f778 	.word	0x0800f778
 8003760:	20003774 	.word	0x20003774
 8003764:	20003b74 	.word	0x20003b74
 8003768:	0800f780 	.word	0x0800f780
 800376c:	0800f788 	.word	0x0800f788
 8003770:	0800f790 	.word	0x0800f790
 8003774:	0800f798 	.word	0x0800f798
 8003778:	0800f7a0 	.word	0x0800f7a0
 800377c:	0800f7a8 	.word	0x0800f7a8
 8003780:	0800f7b0 	.word	0x0800f7b0
 8003784:	0800f7b8 	.word	0x0800f7b8
 8003788:	0800f758 	.word	0x0800f758

0800378c <WIFI_ConnectServer>:
  * @param  strSize: C string size
  * @param  size: Character to trim
  * @retval None
  */
WIFI_StatusTypeDef WIFI_ConnectServer(WIFI_HandleTypeDef* hwifi,char *ip,char *port)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	int msgLength = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
	msgLength = sprintf(wifiTxBuffer,"P1=0\r");
 800379c:	492d      	ldr	r1, [pc, #180]	; (8003854 <WIFI_ConnectServer+0xc8>)
 800379e:	482e      	ldr	r0, [pc, #184]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037a0:	f009 fb50 	bl	800ce44 <siprintf>
 80037a4:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <WIFI_ConnectServer+0xd0>)
 80037b6:	4928      	ldr	r1, [pc, #160]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fe21 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 80037be:	4927      	ldr	r1, [pc, #156]	; (800385c <WIFI_ConnectServer+0xd0>)
 80037c0:	4825      	ldr	r0, [pc, #148]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037c2:	f7ff fccb 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"P3=%s\r",ip);
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4925      	ldr	r1, [pc, #148]	; (8003860 <WIFI_ConnectServer+0xd4>)
 80037ca:	4823      	ldr	r0, [pc, #140]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037cc:	f009 fb3a 	bl	800ce44 <siprintf>
 80037d0:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <WIFI_ConnectServer+0xd0>)
 80037e2:	491d      	ldr	r1, [pc, #116]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fe0b 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 80037ea:	491c      	ldr	r1, [pc, #112]	; (800385c <WIFI_ConnectServer+0xd0>)
 80037ec:	481a      	ldr	r0, [pc, #104]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037ee:	f7ff fcb5 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"P4=%s\r",port);
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	491b      	ldr	r1, [pc, #108]	; (8003864 <WIFI_ConnectServer+0xd8>)
 80037f6:	4818      	ldr	r0, [pc, #96]	; (8003858 <WIFI_ConnectServer+0xcc>)
 80037f8:	f009 fb24 	bl	800ce44 <siprintf>
 80037fc:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	b29b      	uxth	r3, r3
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <WIFI_ConnectServer+0xd0>)
 800380e:	4912      	ldr	r1, [pc, #72]	; (8003858 <WIFI_ConnectServer+0xcc>)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fdf5 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 8003816:	4911      	ldr	r1, [pc, #68]	; (800385c <WIFI_ConnectServer+0xd0>)
 8003818:	480f      	ldr	r0, [pc, #60]	; (8003858 <WIFI_ConnectServer+0xcc>)
 800381a:	f7ff fc9f 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"P6=1\r");
 800381e:	4912      	ldr	r1, [pc, #72]	; (8003868 <WIFI_ConnectServer+0xdc>)
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <WIFI_ConnectServer+0xcc>)
 8003822:	f009 fb0f 	bl	800ce44 <siprintf>
 8003826:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	b29b      	uxth	r3, r3
 800382c:	3301      	adds	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <WIFI_ConnectServer+0xd0>)
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <WIFI_ConnectServer+0xcc>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fde0 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <WIFI_ConnectServer+0xd0>)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <WIFI_ConnectServer+0xcc>)
 8003844:	f7ff fc8a 	bl	800315c <WIFI_DEBUG>
	return WIFI_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	0800f81c 	.word	0x0800f81c
 8003858:	20003774 	.word	0x20003774
 800385c:	20003b74 	.word	0x20003b74
 8003860:	0800f824 	.word	0x0800f824
 8003864:	0800f82c 	.word	0x0800f82c
 8003868:	0800f80c 	.word	0x0800f80c

0800386c <WIFI_SendData>:
	msgLength = sprintf(wifiTxBuffer,"P6=0\r");
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
}
WIFI_StatusTypeDef WIFI_SendData(WIFI_HandleTypeDef* hwifi,float data)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	ed87 0a00 	vstr	s0, [r7]
	strcpy(wifiTxBuffer,"S3=4\r");
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <WIFI_SendData+0x68>)
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <WIFI_SendData+0x6c>)
 800387c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	3304      	adds	r3, #4
 8003884:	8019      	strh	r1, [r3, #0]
	char *p_test = &data;
 8003886:	463b      	mov	r3, r7
 8003888:	60fb      	str	r3, [r7, #12]
	wifiTxBuffer[5] = p_test[0];
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <WIFI_SendData+0x68>)
 8003890:	715a      	strb	r2, [r3, #5]
	wifiTxBuffer[6] = p_test[1];
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	785a      	ldrb	r2, [r3, #1]
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <WIFI_SendData+0x68>)
 8003898:	719a      	strb	r2, [r3, #6]
	wifiTxBuffer[7] = p_test[2];
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	789a      	ldrb	r2, [r3, #2]
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <WIFI_SendData+0x68>)
 80038a0:	71da      	strb	r2, [r3, #7]
	wifiTxBuffer[8] = p_test[3];
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	78da      	ldrb	r2, [r3, #3]
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <WIFI_SendData+0x68>)
 80038a8:	721a      	strb	r2, [r3, #8]
	wifiTxBuffer[9] = 0;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <WIFI_SendData+0x68>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	725a      	strb	r2, [r3, #9]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, 10, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80038b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <WIFI_SendData+0x70>)
 80038b8:	220a      	movs	r2, #10
 80038ba:	4906      	ldr	r1, [pc, #24]	; (80038d4 <WIFI_SendData+0x68>)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fd9f 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 80038c2:	4906      	ldr	r1, [pc, #24]	; (80038dc <WIFI_SendData+0x70>)
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <WIFI_SendData+0x68>)
 80038c6:	f7ff fc49 	bl	800315c <WIFI_DEBUG>
	return WIFI_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20003774 	.word	0x20003774
 80038d8:	0800f834 	.word	0x0800f834
 80038dc:	20003b74 	.word	0x20003b74

080038e0 <WIFI_SendStr>:
WIFI_StatusTypeDef WIFI_SendStr(WIFI_HandleTypeDef* hwifi,char *data)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	int len = strlen(data);
 80038ea:	6838      	ldr	r0, [r7, #0]
 80038ec:	f7fc fc7a 	bl	80001e4 <strlen>
 80038f0:	4603      	mov	r3, r0
 80038f2:	60fb      	str	r3, [r7, #12]
	int msgLength = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
	msgLength = sprintf(wifiTxBuffer,"S1=4\r");
 80038f8:	4936      	ldr	r1, [pc, #216]	; (80039d4 <WIFI_SendStr+0xf4>)
 80038fa:	4837      	ldr	r0, [pc, #220]	; (80039d8 <WIFI_SendStr+0xf8>)
 80038fc:	f009 faa2 	bl	800ce44 <siprintf>
 8003900:	60b8      	str	r0, [r7, #8]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	b29b      	uxth	r3, r3
 8003906:	3301      	adds	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4b32      	ldr	r3, [pc, #200]	; (80039dc <WIFI_SendStr+0xfc>)
 8003912:	4931      	ldr	r1, [pc, #196]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fd73 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 800391a:	4930      	ldr	r1, [pc, #192]	; (80039dc <WIFI_SendStr+0xfc>)
 800391c:	482e      	ldr	r0, [pc, #184]	; (80039d8 <WIFI_SendStr+0xf8>)
 800391e:	f7ff fc1d 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"S0\r");
 8003922:	492f      	ldr	r1, [pc, #188]	; (80039e0 <WIFI_SendStr+0x100>)
 8003924:	482c      	ldr	r0, [pc, #176]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003926:	f009 fa8d 	bl	800ce44 <siprintf>
 800392a:	60b8      	str	r0, [r7, #8]
	wifiTxBuffer[3] = (len&0xff000000)>>24;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	0e1b      	lsrs	r3, r3, #24
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003934:	70da      	strb	r2, [r3, #3]
	wifiTxBuffer[4] = (len&0xff0000)>>16;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	141b      	asrs	r3, r3, #16
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <WIFI_SendStr+0xf8>)
 800393e:	711a      	strb	r2, [r3, #4]
	wifiTxBuffer[5] = (len&0xff00)>>8;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	121b      	asrs	r3, r3, #8
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003948:	715a      	strb	r2, [r3, #5]
	wifiTxBuffer[6] = (len&0xff);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003950:	719a      	strb	r2, [r3, #6]
	wifiTxBuffer[7] = '\0';
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003954:	2200      	movs	r2, #0
 8003956:	71da      	strb	r2, [r3, #7]
	WIFI_SendATData(hwifi, wifiTxBuffer,8, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8003958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <WIFI_SendStr+0xfc>)
 8003960:	2208      	movs	r2, #8
 8003962:	491d      	ldr	r1, [pc, #116]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fda9 	bl	80034bc <WIFI_SendATData>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 800396a:	491c      	ldr	r1, [pc, #112]	; (80039dc <WIFI_SendStr+0xfc>)
 800396c:	481a      	ldr	r0, [pc, #104]	; (80039d8 <WIFI_SendStr+0xf8>)
 800396e:	f7ff fbf5 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"S1=%d\r",len);
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	491b      	ldr	r1, [pc, #108]	; (80039e4 <WIFI_SendStr+0x104>)
 8003976:	4818      	ldr	r0, [pc, #96]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003978:	f009 fa64 	bl	800ce44 <siprintf>
 800397c:	60b8      	str	r0, [r7, #8]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	b29b      	uxth	r3, r3
 8003982:	3301      	adds	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <WIFI_SendStr+0xfc>)
 800398e:	4912      	ldr	r1, [pc, #72]	; (80039d8 <WIFI_SendStr+0xf8>)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fd35 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 8003996:	4911      	ldr	r1, [pc, #68]	; (80039dc <WIFI_SendStr+0xfc>)
 8003998:	480f      	ldr	r0, [pc, #60]	; (80039d8 <WIFI_SendStr+0xf8>)
 800399a:	f7ff fbdf 	bl	800315c <WIFI_DEBUG>
	msgLength = sprintf(wifiTxBuffer,"S0\r%s",data);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4911      	ldr	r1, [pc, #68]	; (80039e8 <WIFI_SendStr+0x108>)
 80039a2:	480d      	ldr	r0, [pc, #52]	; (80039d8 <WIFI_SendStr+0xf8>)
 80039a4:	f009 fa4e 	bl	800ce44 <siprintf>
 80039a8:	60b8      	str	r0, [r7, #8]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <WIFI_SendStr+0xfc>)
 80039ba:	4907      	ldr	r1, [pc, #28]	; (80039d8 <WIFI_SendStr+0xf8>)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fd1f 	bl	8003400 <WIFI_SendATCommand>
	WIFI_DEBUG(wifiTxBuffer,wifiRxBuffer);
 80039c2:	4906      	ldr	r1, [pc, #24]	; (80039dc <WIFI_SendStr+0xfc>)
 80039c4:	4804      	ldr	r0, [pc, #16]	; (80039d8 <WIFI_SendStr+0xf8>)
 80039c6:	f7ff fbc9 	bl	800315c <WIFI_DEBUG>
}
 80039ca:	bf00      	nop
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	0800f83c 	.word	0x0800f83c
 80039d8:	20003774 	.word	0x20003774
 80039dc:	20003b74 	.word	0x20003b74
 80039e0:	0800f844 	.word	0x0800f844
 80039e4:	0800f848 	.word	0x0800f848
 80039e8:	0800f850 	.word	0x0800f850

080039ec <trimstr>:
void trimstr(char* str, uint32_t strSize, char c){
 80039ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039f0:	b08d      	sub	sp, #52	; 0x34
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]

	uint32_t trimPos = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t endPos = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Find end of string a.k.a. first occurrence of '\0'
	for(uint32_t i = 0; i < strSize; i++){
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
 8003a08:	e00c      	b.n	8003a24 <trimstr+0x38>
		if( str[i] != '\0' ) continue;
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <trimstr+0x32>
	for(uint32_t i = 0; i < strSize; i++){
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	3301      	adds	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e002      	b.n	8003a24 <trimstr+0x38>
		else{
			endPos = i;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003a22:	e003      	b.n	8003a2c <trimstr+0x40>
	for(uint32_t i = 0; i < strSize; i++){
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3ee      	bcc.n	8003a0a <trimstr+0x1e>

	/**
	 * If c is at the end of the string, replace it with '\0'.
	 * Repeat until a char emerges that is not c.
	 */
	for(uint32_t i = endPos -1; i > 0; i--){
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	e010      	b.n	8003a56 <trimstr+0x6a>
		if( str[i] == c ){
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	4413      	add	r3, r2
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	79fa      	ldrb	r2, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10d      	bne.n	8003a5e <trimstr+0x72>
			str[i] = '\0';
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	4413      	add	r3, r2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
			endPos = i;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t i = endPos -1; i > 0; i--){
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1eb      	bne.n	8003a34 <trimstr+0x48>
 8003a5c:	e000      	b.n	8003a60 <trimstr+0x74>
		}
		else break;
 8003a5e:	bf00      	nop
	}

	// Find the position of the first char in the string that is not c.
	for(uint32_t i = 0; i < strSize; i++){
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e00c      	b.n	8003a80 <trimstr+0x94>
		if(str[i] == c){
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	79fa      	ldrb	r2, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10a      	bne.n	8003a8a <trimstr+0x9e>
			trimPos = i + 1;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
	for(uint32_t i = 0; i < strSize; i++){
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d3ee      	bcc.n	8003a66 <trimstr+0x7a>
 8003a88:	e000      	b.n	8003a8c <trimstr+0xa0>
		}else break;
 8003a8a:	bf00      	nop
	}
	// Trim leading c
	char message[strSize];
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	466b      	mov	r3, sp
 8003a90:	461e      	mov	r6, r3
 8003a92:	460b      	mov	r3, r1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4688      	mov	r8, r1
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	00eb      	lsls	r3, r5, #3
 8003ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac6:	00e2      	lsls	r2, r4, #3
 8003ac8:	1dcb      	adds	r3, r1, #7
 8003aca:	08db      	lsrs	r3, r3, #3
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	ebad 0d03 	sub.w	sp, sp, r3
 8003ad2:	466b      	mov	r3, sp
 8003ad4:	3300      	adds	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
	snprintf( message, endPos + 1 - trimPos, &str[trimPos] );
 8003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	1c59      	adds	r1, r3, #1
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	4413      	add	r3, r2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6978      	ldr	r0, [r7, #20]
 8003aea:	f009 f977 	bl	800cddc <sniprintf>
	strcpy(str,message);
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f009 fa26 	bl	800cf42 <strcpy>
 8003af6:	46b5      	mov	sp, r6
}
 8003af8:	bf00      	nop
 8003afa:	3734      	adds	r7, #52	; 0x34
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b0a:	e003      	b.n	8003b14 <LoopCopyDataInit>

08003b0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b12:	3104      	adds	r1, #4

08003b14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b1c:	d3f6      	bcc.n	8003b0c <CopyDataInit>
	ldr	r2, =_sbss
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b20:	e002      	b.n	8003b28 <LoopFillZerobss>

08003b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b24:	f842 3b04 	str.w	r3, [r2], #4

08003b28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <LoopForever+0x16>)
	cmp	r2, r3
 8003b2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b2c:	d3f9      	bcc.n	8003b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b2e:	f7ff fadf 	bl	80030f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b32:	f008 fbb3 	bl	800c29c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b36:	f7ff f87f 	bl	8002c38 <main>

08003b3a <LoopForever>:

LoopForever:
    b LoopForever
 8003b3a:	e7fe      	b.n	8003b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b40:	0801b9b0 	.word	0x0801b9b0
	ldr	r0, =_sdata
 8003b44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b48:	20000b5c 	.word	0x20000b5c
	ldr	r2, =_sbss
 8003b4c:	20000b5c 	.word	0x20000b5c
	ldr	r3, = _ebss
 8003b50:	2000413c 	.word	0x2000413c

08003b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b54:	e7fe      	b.n	8003b54 <ADC1_2_IRQHandler>
	...

08003b58 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003b78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b7e:	2312      	movs	r3, #18
 8003b80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	4619      	mov	r1, r3
 8003b94:	481b      	ldr	r0, [pc, #108]	; (8003c04 <I2Cx_MspInit+0xac>)
 8003b96:	f001 fab1 	bl	80050fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4818      	ldr	r0, [pc, #96]	; (8003c04 <I2Cx_MspInit+0xac>)
 8003ba2:	f001 faab 	bl	80050fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <I2Cx_MspInit+0xa8>)
 8003bd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bd4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	210f      	movs	r1, #15
 8003bda:	2021      	movs	r0, #33	; 0x21
 8003bdc:	f001 fa57 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003be0:	2021      	movs	r0, #33	; 0x21
 8003be2:	f001 fa70 	bl	80050c6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	210f      	movs	r1, #15
 8003bea:	2022      	movs	r0, #34	; 0x22
 8003bec:	f001 fa4f 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003bf0:	2022      	movs	r0, #34	; 0x22
 8003bf2:	f001 fa68 	bl	80050c6 <HAL_NVIC_EnableIRQ>
}
 8003bf6:	bf00      	nop
 8003bf8:	3728      	adds	r7, #40	; 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	48000400 	.word	0x48000400

08003c08 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <I2Cx_Init+0x54>)
 8003c14:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <I2Cx_Init+0x58>)
 8003c1a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff89 	bl	8003b58 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 fd58 	bl	80056fc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f002 fa5c 	bl	800610c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	00702681 	.word	0x00702681

08003c64 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	461a      	mov	r2, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	72fb      	strb	r3, [r7, #11]
 8003c76:	460b      	mov	r3, r1
 8003c78:	813b      	strh	r3, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	b299      	uxth	r1, r3
 8003c86:	88f8      	ldrh	r0, [r7, #6]
 8003c88:	893a      	ldrh	r2, [r7, #8]
 8003c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8e:	9302      	str	r3, [sp, #8]
 8003c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4603      	mov	r3, r0
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f001 ff00 	bl	8005aa0 <HAL_I2C_Mem_Read>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	4619      	mov	r1, r3
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f832 	bl	8003d18 <I2Cx_Error>
  }
  return status;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08a      	sub	sp, #40	; 0x28
 8003cc2:	af04      	add	r7, sp, #16
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4603      	mov	r3, r0
 8003cce:	72fb      	strb	r3, [r7, #11]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	813b      	strh	r3, [r7, #8]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	b299      	uxth	r1, r3
 8003ce0:	88f8      	ldrh	r0, [r7, #6]
 8003ce2:	893a      	ldrh	r2, [r7, #8]
 8003ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce8:	9302      	str	r3, [sp, #8]
 8003cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f001 fdbf 	bl	8005878 <HAL_I2C_Mem_Write>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003d04:	7afb      	ldrb	r3, [r7, #11]
 8003d06:	4619      	mov	r1, r3
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f805 	bl	8003d18 <I2Cx_Error>
  }
  return status;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f001 fd78 	bl	800581a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff6c 	bl	8003c08 <I2Cx_Init>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <SENSOR_IO_Init+0x10>)
 8003d3e:	f7ff ff63 	bl	8003c08 <I2Cx_Init>
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20003f74 	.word	0x20003f74

08003d4c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	460b      	mov	r3, r1
 8003d58:	71bb      	strb	r3, [r7, #6]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	79f9      	ldrb	r1, [r7, #7]
 8003d64:	2301      	movs	r3, #1
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	1d7b      	adds	r3, r7, #5
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4803      	ldr	r0, [pc, #12]	; (8003d7c <SENSOR_IO_Write+0x30>)
 8003d70:	f7ff ffa5 	bl	8003cbe <I2Cx_WriteMultiple>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20003f74 	.word	0x20003f74

08003d80 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	4603      	mov	r3, r0
 8003d88:	460a      	mov	r2, r1
 8003d8a:	71fb      	strb	r3, [r7, #7]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003d94:	79bb      	ldrb	r3, [r7, #6]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	79f9      	ldrb	r1, [r7, #7]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	f107 030f 	add.w	r3, r7, #15
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2301      	movs	r3, #1
 8003da6:	4804      	ldr	r0, [pc, #16]	; (8003db8 <SENSOR_IO_Read+0x38>)
 8003da8:	f7ff ff5c 	bl	8003c64 <I2Cx_ReadMultiple>

  return read_value;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20003f74 	.word	0x20003f74

08003dbc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	603a      	str	r2, [r7, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	71bb      	strb	r3, [r7, #6]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003dd2:	79bb      	ldrb	r3, [r7, #6]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	79f9      	ldrb	r1, [r7, #7]
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2301      	movs	r3, #1
 8003de2:	4804      	ldr	r0, [pc, #16]	; (8003df4 <SENSOR_IO_ReadMultiple+0x38>)
 8003de4:	f7ff ff3e 	bl	8003c64 <I2Cx_ReadMultiple>
 8003de8:	4603      	mov	r3, r0
 8003dea:	b29b      	uxth	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20003f74 	.word	0x20003f74

08003df8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003e02:	2300      	movs	r3, #0
 8003e04:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <BSP_ACCELERO_Init+0x74>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b6a      	cmp	r3, #106	; 0x6a
 8003e10:	d002      	beq.n	8003e18 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e024      	b.n	8003e62 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <BSP_ACCELERO_Init+0x78>)
 8003e1a:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <BSP_ACCELERO_Init+0x74>)
 8003e1c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_104Hz;
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_4G ;
 8003e26:	2308      	movs	r3, #8
 8003e28:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003e2a:	2340      	movs	r3, #64	; 0x40
 8003e2c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003e36:	797a      	ldrb	r2, [r7, #5]
 8003e38:	7abb      	ldrb	r3, [r7, #10]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003e40:	7a3b      	ldrb	r3, [r7, #8]
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <BSP_ACCELERO_Init+0x78>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	89ba      	ldrh	r2, [r7, #12]
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4798      	blx	r3
  }  

  return ret;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	200000b8 	.word	0x200000b8
 8003e70:	20003fc0 	.word	0x20003fc0

08003e74 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20003fc0 	.word	0x20003fc0

08003ea4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <BSP_GYRO_Init+0x7c>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4798      	blx	r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b6a      	cmp	r3, #106	; 0x6a
 8003ebc:	d002      	beq.n	8003ec4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e028      	b.n	8003f16 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <BSP_GYRO_Init+0x80>)
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <BSP_GYRO_Init+0x7c>)
 8003ec8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003ece:	2330      	movs	r3, #48	; 0x30
 8003ed0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8003ee6:	7aba      	ldrb	r2, [r7, #10]
 8003ee8:	797b      	ldrb	r3, [r7, #5]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003ef0:	7a3b      	ldrb	r3, [r7, #8]
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <BSP_GYRO_Init+0x80>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	89ba      	ldrh	r2, [r7, #12]
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4798      	blx	r3
    
    ret = GYRO_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200000f4 	.word	0x200000f4
 8003f24:	20003fc4 	.word	0x20003fc4

08003f28 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <BSP_HSENSOR_Init+0x38>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	20be      	movs	r0, #190	; 0xbe
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	2bbc      	cmp	r3, #188	; 0xbc
 8003f3a:	d002      	beq.n	8003f42 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e009      	b.n	8003f56 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <BSP_HSENSOR_Init+0x3c>)
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <BSP_HSENSOR_Init+0x38>)
 8003f46:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <BSP_HSENSOR_Init+0x3c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	20be      	movs	r0, #190	; 0xbe
 8003f50:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003f56:	687b      	ldr	r3, [r7, #4]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	2000003c 	.word	0x2000003c
 8003f64:	20003fc8 	.word	0x20003fc8

08003f68 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	20be      	movs	r0, #190	; 0xbe
 8003f74:	4798      	blx	r3
 8003f76:	eef0 7a40 	vmov.f32	s15, s0
}
 8003f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20003fc8 	.word	0x20003fc8

08003f84 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <BSP_MAGNETO_Init+0x50>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4798      	blx	r3
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b3d      	cmp	r3, #61	; 0x3d
 8003f98:	d002      	beq.n	8003fa0 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	71fb      	strb	r3, [r7, #7]
 8003f9e:	e013      	b.n	8003fc8 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <BSP_MAGNETO_Init+0x54>)
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <BSP_MAGNETO_Init+0x50>)
 8003fa4:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003fa6:	2358      	movs	r3, #88	; 0x58
 8003fa8:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003faa:	2300      	movs	r3, #0
 8003fac:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <BSP_MAGNETO_Init+0x54>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	463a      	mov	r2, r7
 8003fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc6:	4798      	blx	r3
  } 

  return ret;  
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000068 	.word	0x20000068
 8003fd8:	20003fcc 	.word	0x20003fcc

08003fdc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <BSP_PSENSOR_Init+0x38>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	20ba      	movs	r0, #186	; 0xba
 8003fe8:	4798      	blx	r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	2bb1      	cmp	r3, #177	; 0xb1
 8003fee:	d002      	beq.n	8003ff6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	e009      	b.n	800400a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <BSP_PSENSOR_Init+0x3c>)
 8003ff8:	4a06      	ldr	r2, [pc, #24]	; (8004014 <BSP_PSENSOR_Init+0x38>)
 8003ffa:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <BSP_PSENSOR_Init+0x3c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	20ba      	movs	r0, #186	; 0xba
 8004004:	4798      	blx	r3
    ret = PSENSOR_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800400a:	687b      	ldr	r3, [r7, #4]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200000a4 	.word	0x200000a4
 8004018:	20003fd0 	.word	0x20003fd0

0800401c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <BSP_TSENSOR_Init+0x30>)
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <BSP_TSENSOR_Init+0x34>)
 800402a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800402c:	f7ff fe84 	bl	8003d38 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <BSP_TSENSOR_Init+0x30>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2100      	movs	r1, #0
 8004038:	20be      	movs	r0, #190	; 0xbe
 800403a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8004040:	79fb      	ldrb	r3, [r7, #7]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20003fd4 	.word	0x20003fd4
 8004050:	20000050 	.word	0x20000050

08004054 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <BSP_TSENSOR_ReadTemp+0x18>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	20be      	movs	r0, #190	; 0xbe
 8004060:	4798      	blx	r3
 8004062:	eef0 7a40 	vmov.f32	s15, s0
}
 8004066:	eeb0 0a67 	vmov.f32	s0, s15
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20003fd4 	.word	0x20003fd4

08004070 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2120      	movs	r1, #32
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fe7d 	bl	8003d80 <SENSOR_IO_Read>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	f023 0303 	bic.w	r3, r3, #3
 80040a0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x03; /* Set ODR to 12.5Hz */
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	f043 0303 	orr.w	r3, r3, #3
 80040a8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040b0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	2120      	movs	r1, #32
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fe46 	bl	8003d4c <SENSOR_IO_Write>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80040d6:	f7ff fe2f 	bl	8003d38 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	210f      	movs	r1, #15
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fe4d 	bl	8003d80 <SENSOR_IO_Read>
 80040e6:	4603      	mov	r3, r0
 80040e8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	b2d8      	uxtb	r0, r3
 8004102:	f107 020c 	add.w	r2, r7, #12
 8004106:	2302      	movs	r3, #2
 8004108:	21b0      	movs	r1, #176	; 0xb0
 800410a:	f7ff fe57 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800410e:	7b3b      	ldrb	r3, [r7, #12]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	b2db      	uxtb	r3, r3
 8004114:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	b2d8      	uxtb	r0, r3
 8004122:	f107 020c 	add.w	r2, r7, #12
 8004126:	2302      	movs	r3, #2
 8004128:	21b6      	movs	r1, #182	; 0xb6
 800412a:	f7ff fe47 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	b21a      	sxth	r2, r3
 8004134:	7b3b      	ldrb	r3, [r7, #12]
 8004136:	b21b      	sxth	r3, r3
 8004138:	4313      	orrs	r3, r2
 800413a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	b2d8      	uxtb	r0, r3
 8004140:	f107 020c 	add.w	r2, r7, #12
 8004144:	2302      	movs	r3, #2
 8004146:	21ba      	movs	r1, #186	; 0xba
 8004148:	f7ff fe38 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800414c:	7b7b      	ldrb	r3, [r7, #13]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	b21a      	sxth	r2, r3
 8004152:	7b3b      	ldrb	r3, [r7, #12]
 8004154:	b21b      	sxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	b2d8      	uxtb	r0, r3
 800415e:	f107 020c 	add.w	r2, r7, #12
 8004162:	2302      	movs	r3, #2
 8004164:	21a8      	movs	r1, #168	; 0xa8
 8004166:	f7ff fe29 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800416a:	7b7b      	ldrb	r3, [r7, #13]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	b21a      	sxth	r2, r3
 8004170:	7b3b      	ldrb	r3, [r7, #12]
 8004172:	b21b      	sxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8004178:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800417c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800418e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80041a0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80041a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80041ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80041d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80041da:	edd7 7a04 	vldr	s15, [r7, #16]
 80041de:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004224 <HTS221_H_ReadHumidity+0x130>
 80041e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ea:	dd01      	ble.n	80041f0 <HTS221_H_ReadHumidity+0xfc>
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HTS221_H_ReadHumidity+0x134>)
 80041ee:	e00a      	b.n	8004206 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80041f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80041f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	d502      	bpl.n	8004204 <HTS221_H_ReadHumidity+0x110>
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e000      	b.n	8004206 <HTS221_H_ReadHumidity+0x112>
 8004204:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8004206:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8004208:	edd7 7a04 	vldr	s15, [r7, #16]
 800420c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004210:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004214:	eef0 7a66 	vmov.f32	s15, s13
}
 8004218:	eeb0 0a67 	vmov.f32	s0, s15
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	447a0000 	.word	0x447a0000
 8004228:	447a0000 	.word	0x447a0000

0800422c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2120      	movs	r1, #32
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fd9e 	bl	8003d80 <SENSOR_IO_Read>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	f043 0304 	orr.w	r3, r3, #4
 8004256:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800426e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	2120      	movs	r1, #32
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fd67 	bl	8003d4c <SENSOR_IO_Write>
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b088      	sub	sp, #32
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	b2d8      	uxtb	r0, r3
 8004294:	f107 0208 	add.w	r2, r7, #8
 8004298:	2302      	movs	r3, #2
 800429a:	21b2      	movs	r1, #178	; 0xb2
 800429c:	f7ff fd8e 	bl	8003dbc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2135      	movs	r1, #53	; 0x35
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd6a 	bl	8003d80 <SENSOR_IO_Read>
 80042ac:	4603      	mov	r3, r0
 80042ae:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	b21a      	sxth	r2, r3
 80042bc:	7a3b      	ldrb	r3, [r7, #8]
 80042be:	b21b      	sxth	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	019b      	lsls	r3, r3, #6
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	b21a      	sxth	r2, r3
 80042d0:	7a7b      	ldrb	r3, [r7, #9]
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80042d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80042dc:	10db      	asrs	r3, r3, #3
 80042de:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80042e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80042e4:	10db      	asrs	r3, r3, #3
 80042e6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	b2d8      	uxtb	r0, r3
 80042ec:	f107 0208 	add.w	r2, r7, #8
 80042f0:	2304      	movs	r3, #4
 80042f2:	21bc      	movs	r1, #188	; 0xbc
 80042f4:	f7ff fd62 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80042f8:	7a7b      	ldrb	r3, [r7, #9]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	b21a      	sxth	r2, r3
 80042fe:	7a3b      	ldrb	r3, [r7, #8]
 8004300:	b21b      	sxth	r3, r3
 8004302:	4313      	orrs	r3, r2
 8004304:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004306:	7afb      	ldrb	r3, [r7, #11]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	b21a      	sxth	r2, r3
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b21b      	sxth	r3, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	b2d8      	uxtb	r0, r3
 8004318:	f107 0208 	add.w	r2, r7, #8
 800431c:	2302      	movs	r3, #2
 800431e:	21aa      	movs	r1, #170	; 0xaa
 8004320:	f7ff fd4c 	bl	8003dbc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004324:	7a7b      	ldrb	r3, [r7, #9]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	b21a      	sxth	r2, r3
 800432a:	7a3b      	ldrb	r3, [r7, #8]
 800432c:	b21b      	sxth	r3, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004332:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004336:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004348:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004356:	ee67 6a27 	vmul.f32	s13, s14, s15
 800435a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800435e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004370:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800437c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004380:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	ee07 3a90 	vmov	s15, r3
}
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HTS221_TempReady>:
uint8_t HTS221_GetStatus(uint16_t DeviceAddr)
{
	return SENSOR_IO_Read(DeviceAddr, HTS221_STATUS_REG);
}
uint8_t HTS221_TempReady(uint16_t DeviceAddr)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
	uint8_t res = SENSOR_IO_Read(DeviceAddr, HTS221_STATUS_REG);
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2127      	movs	r1, #39	; 0x27
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fceb 	bl	8003d80 <SENSOR_IO_Read>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]
	return (res & 0b1)&&1;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HTS221_HumiReady>:
uint8_t HTS221_HumiReady(uint16_t DeviceAddr)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	80fb      	strh	r3, [r7, #6]
	uint8_t res = SENSOR_IO_Read(DeviceAddr, HTS221_STATUS_REG);
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2127      	movs	r1, #39	; 0x27
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fcd2 	bl	8003d80 <SENSOR_IO_Read>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
	return (res & 0b10)&&1;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HTS221_TempWaitReady>:
void HTS221_TempWaitReady(uint16_t DeviceAddr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		uint8_t res = SENSOR_IO_Read(DeviceAddr, HTS221_STATUS_REG);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2127      	movs	r1, #39	; 0x27
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fcb9 	bl	8003d80 <SENSOR_IO_Read>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
		res = res & 0b1;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
		if(res)break;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d100      	bne.n	8004422 <HTS221_TempWaitReady+0x2a>
	{
 8004420:	e7ef      	b.n	8004402 <HTS221_TempWaitReady+0xa>
		if(res)break;
 8004422:	bf00      	nop
	}
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HTS221_HumiWaitReady>:
void HTS221_HumiWaitReady(uint16_t DeviceAddr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		uint8_t res = SENSOR_IO_Read(DeviceAddr, HTS221_STATUS_REG);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2127      	movs	r1, #39	; 0x27
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fc9f 	bl	8003d80 <SENSOR_IO_Read>
 8004442:	4603      	mov	r3, r0
 8004444:	73fb      	strb	r3, [r7, #15]
		res = res & 0b10;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	73fb      	strb	r3, [r7, #15]
		if(res)break;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d100      	bne.n	8004456 <HTS221_HumiWaitReady+0x2a>
	{
 8004454:	e7ef      	b.n	8004436 <HTS221_HumiWaitReady+0xa>
		if(res)break;
 8004456:	bf00      	nop
	}
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	463b      	mov	r3, r7
 8004468:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800446c:	783b      	ldrb	r3, [r7, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	2120      	movs	r1, #32
 8004472:	203c      	movs	r0, #60	; 0x3c
 8004474:	f7ff fc6a 	bl	8003d4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8004478:	787b      	ldrb	r3, [r7, #1]
 800447a:	461a      	mov	r2, r3
 800447c:	2121      	movs	r1, #33	; 0x21
 800447e:	203c      	movs	r0, #60	; 0x3c
 8004480:	f7ff fc64 	bl	8003d4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8004484:	78bb      	ldrb	r3, [r7, #2]
 8004486:	461a      	mov	r2, r3
 8004488:	2122      	movs	r1, #34	; 0x22
 800448a:	203c      	movs	r0, #60	; 0x3c
 800448c:	f7ff fc5e 	bl	8003d4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	461a      	mov	r2, r3
 8004494:	2123      	movs	r1, #35	; 0x23
 8004496:	203c      	movs	r0, #60	; 0x3c
 8004498:	f7ff fc58 	bl	8003d4c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800449c:	793b      	ldrb	r3, [r7, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	2124      	movs	r1, #36	; 0x24
 80044a2:	203c      	movs	r0, #60	; 0x3c
 80044a4:	f7ff fc52 	bl	8003d4c <SENSOR_IO_Write>
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80044b6:	2300      	movs	r3, #0
 80044b8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80044ba:	2122      	movs	r1, #34	; 0x22
 80044bc:	203c      	movs	r0, #60	; 0x3c
 80044be:	f7ff fc5f 	bl	8003d80 <SENSOR_IO_Read>
 80044c2:	4603      	mov	r3, r0
 80044c4:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f023 0303 	bic.w	r3, r3, #3
 80044cc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	f043 0303 	orr.w	r3, r3, #3
 80044d4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	461a      	mov	r2, r3
 80044da:	2122      	movs	r1, #34	; 0x22
 80044dc:	203c      	movs	r0, #60	; 0x3c
 80044de:	f7ff fc35 	bl	8003d4c <SENSOR_IO_Write>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80044ee:	f7ff fc23 	bl	8003d38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80044f2:	210f      	movs	r1, #15
 80044f4:	203c      	movs	r0, #60	; 0x3c
 80044f6:	f7ff fc43 	bl	8003d80 <SENSOR_IO_Read>
 80044fa:	4603      	mov	r3, r0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}

08004500 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800450e:	2122      	movs	r1, #34	; 0x22
 8004510:	203c      	movs	r0, #60	; 0x3c
 8004512:	f7ff fc35 	bl	8003d80 <SENSOR_IO_Read>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	f023 0320 	bic.w	r3, r3, #32
 8004520:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	f043 0320 	orr.w	r3, r3, #32
 800452e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	461a      	mov	r2, r3
 8004534:	2122      	movs	r1, #34	; 0x22
 8004536:	203c      	movs	r0, #60	; 0x3c
 8004538:	f7ff fc08 	bl	8003d4c <SENSOR_IO_Write>
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800454c:	2300      	movs	r3, #0
 800454e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800455a:	2121      	movs	r1, #33	; 0x21
 800455c:	203c      	movs	r0, #60	; 0x3c
 800455e:	f7ff fc0f 	bl	8003d80 <SENSOR_IO_Read>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8004566:	f107 0208 	add.w	r2, r7, #8
 800456a:	2306      	movs	r3, #6
 800456c:	21a8      	movs	r1, #168	; 0xa8
 800456e:	203c      	movs	r0, #60	; 0x3c
 8004570:	f7ff fc24 	bl	8003dbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e01c      	b.n	80045b4 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	3301      	adds	r3, #1
 8004580:	3320      	adds	r3, #32
 8004582:	443b      	add	r3, r7
 8004584:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004588:	b29b      	uxth	r3, r3
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	b29a      	uxth	r2, r3
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	3320      	adds	r3, #32
 8004594:	443b      	add	r3, r7
 8004596:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800459a:	b29b      	uxth	r3, r3
 800459c:	4413      	add	r3, r2
 800459e:	b29a      	uxth	r2, r3
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
 80045a2:	b212      	sxth	r2, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	3320      	adds	r3, #32
 80045a8:	443b      	add	r3, r7
 80045aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80045ae:	7ffb      	ldrb	r3, [r7, #31]
 80045b0:	3301      	adds	r3, #1
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	7ffb      	ldrb	r3, [r7, #31]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d9df      	bls.n	800457a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d013      	beq.n	80045ec <LIS3MDL_MagReadXYZ+0xa8>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	dc14      	bgt.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d00c      	beq.n	80045e6 <LIS3MDL_MagReadXYZ+0xa2>
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	dc10      	bgt.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <LIS3MDL_MagReadXYZ+0x96>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d003      	beq.n	80045e0 <LIS3MDL_MagReadXYZ+0x9c>
 80045d8:	e00b      	b.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <LIS3MDL_MagReadXYZ+0xfc>)
 80045dc:	61bb      	str	r3, [r7, #24]
    break;
 80045de:	e008      	b.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <LIS3MDL_MagReadXYZ+0x100>)
 80045e2:	61bb      	str	r3, [r7, #24]
    break;
 80045e4:	e005      	b.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <LIS3MDL_MagReadXYZ+0x104>)
 80045e8:	61bb      	str	r3, [r7, #24]
    break;
 80045ea:	e002      	b.n	80045f2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <LIS3MDL_MagReadXYZ+0x108>)
 80045ee:	61bb      	str	r3, [r7, #24]
    break;    
 80045f0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e01a      	b.n	800462e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	3320      	adds	r3, #32
 80045fe:	443b      	add	r3, r7
 8004600:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	7ffb      	ldrb	r3, [r7, #31]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004620:	ee17 2a90 	vmov	r2, s15
 8004624:	b212      	sxth	r2, r2
 8004626:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004628:	7ffb      	ldrb	r3, [r7, #31]
 800462a:	3301      	adds	r3, #1
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	7ffb      	ldrb	r3, [r7, #31]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d9e1      	bls.n	80045f8 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	3e0f5c29 	.word	0x3e0f5c29
 8004644:	3e947ae1 	.word	0x3e947ae1
 8004648:	3edc28f6 	.word	0x3edc28f6
 800464c:	3f147ae1 	.word	0x3f147ae1

08004650 <LIS3MDL_GetStatus>:
uint8_t LIS3MDL_GetStatus(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
	return SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_STATUS_REG);
 8004654:	2127      	movs	r1, #39	; 0x27
 8004656:	203c      	movs	r0, #60	; 0x3c
 8004658:	f7ff fb92 	bl	8003d80 <SENSOR_IO_Read>
 800465c:	4603      	mov	r3, r0
}
 800465e:	4618      	mov	r0, r3
 8004660:	bd80      	pop	{r7, pc}

08004662 <LIS3MDL_Ready>:
uint8_t LIS3MDL_Ready(void)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
	uint8_t res = LIS3MDL_GetStatus();
 8004668:	f7ff fff2 	bl	8004650 <LIS3MDL_GetStatus>
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
	return (res & 0b1000)&&1;
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <LIS3MDL_WaitReady>:
void LIS3MDL_WaitReady(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	while(1)
	{
		uint8_t res = LIS3MDL_GetStatus();
 800468e:	f7ff ffdf 	bl	8004650 <LIS3MDL_GetStatus>
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
		res = res & 0b1000;
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	71fb      	strb	r3, [r7, #7]
		if(res)break;
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d100      	bne.n	80046a6 <LIS3MDL_WaitReady+0x1e>
	{
 80046a4:	e7f3      	b.n	800468e <LIS3MDL_WaitReady+0x6>
		if(res)break;
 80046a6:	bf00      	nop
	}
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f879 	bl	80047b4 <LPS22HB_Init>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80046d8:	f7ff fb2e 	bl	8003d38 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	210f      	movs	r1, #15
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fb4c 	bl	8003d80 <SENSOR_IO_Read>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	74fb      	strb	r3, [r7, #19]
 800470a:	e013      	b.n	8004734 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	3328      	adds	r3, #40	; 0x28
 8004714:	b2db      	uxtb	r3, r3
 8004716:	7cfc      	ldrb	r4, [r7, #19]
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7ff fb30 	bl	8003d80 <SENSOR_IO_Read>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	f104 0318 	add.w	r3, r4, #24
 8004728:	443b      	add	r3, r7
 800472a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	3301      	adds	r3, #1
 8004732:	74fb      	strb	r3, [r7, #19]
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d9e8      	bls.n	800470c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	74fb      	strb	r3, [r7, #19]
 800473e:	e00f      	b.n	8004760 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	3318      	adds	r3, #24
 8004744:	443b      	add	r3, r7
 8004746:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800474a:	461a      	mov	r2, r3
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	3301      	adds	r3, #1
 800475e:	74fb      	strb	r3, [r7, #19]
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d9ec      	bls.n	8004740 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2264      	movs	r2, #100	; 0x64
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	da01      	bge.n	800478c <LPS22HB_P_ReadPressure+0x94>
 8004788:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800478c:	131b      	asrs	r3, r3, #12
 800478e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80047b0 <LPS22HB_P_ReadPressure+0xb8>
 800479e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}
 80047b0:	42c80000 	.word	0x42c80000

080047b4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	211a      	movs	r1, #26
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fadb 	bl	8003d80 <SENSOR_IO_Read>
 80047ca:	4603      	mov	r3, r0
 80047cc:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	7bfa      	ldrb	r2, [r7, #15]
 80047e4:	211a      	movs	r1, #26
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fab0 	bl	8003d4c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2110      	movs	r1, #16
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fac4 	bl	8003d80 <SENSOR_IO_Read>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800480a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	f023 0302 	bic.w	r3, r3, #2
 8004812:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	f043 0302 	orr.w	r3, r3, #2
 800481a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	2110      	movs	r1, #16
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fa91 	bl	8003d4c <SENSOR_IO_Write>
}  
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <LPS22HB_GetStatus>:
uint8_t LPS22HB_GetStatus(uint16_t DeviceAddr)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	80fb      	strh	r3, [r7, #6]
	return SENSOR_IO_Read(DeviceAddr,LPS22HB_STATUS_REG  );
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2127      	movs	r1, #39	; 0x27
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fa9c 	bl	8003d80 <SENSOR_IO_Read>
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <LPS22HB_PReady>:
uint8_t LPS22HB_PReady(uint16_t DeviceAddr)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	4603      	mov	r3, r0
 800485a:	80fb      	strh	r3, [r7, #6]
	uint8_t res = LPS22HB_GetStatus(DeviceAddr);
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ffe7 	bl	8004832 <LPS22HB_GetStatus>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]
	return (res & 0b1)&&1;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <LPS22HB_WaitP>:
{
	uint8_t res = LPS22HB_GetStatus(DeviceAddr);
	return (res & 0b10)&&1;
}
void LPS22HB_WaitP(uint16_t DeviceAddr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		uint8_t res = LPS22HB_GetStatus(DeviceAddr);
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ffd0 	bl	8004832 <LPS22HB_GetStatus>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]
		if(res & 0b1) break;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d100      	bne.n	80048a2 <LPS22HB_WaitP+0x22>
	{
 80048a0:	e7f3      	b.n	800488a <LPS22HB_WaitP+0xa>
		if(res & 0b1) break;
 80048a2:	bf00      	nop
	}
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80048ba:	2110      	movs	r1, #16
 80048bc:	20d4      	movs	r0, #212	; 0xd4
 80048be:	f7ff fa5f 	bl	8003d80 <SENSOR_IO_Read>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80048ca:	7bbb      	ldrb	r3, [r7, #14]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80048d2:	7bba      	ldrb	r2, [r7, #14]
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	461a      	mov	r2, r3
 80048de:	2110      	movs	r1, #16
 80048e0:	20d4      	movs	r0, #212	; 0xd4
 80048e2:	f7ff fa33 	bl	8003d4c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80048e6:	2112      	movs	r1, #18
 80048e8:	20d4      	movs	r0, #212	; 0xd4
 80048ea:	f7ff fa49 	bl	8003d80 <SENSOR_IO_Read>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004900:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004902:	7bba      	ldrb	r2, [r7, #14]
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	4313      	orrs	r3, r2
 8004908:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	461a      	mov	r2, r3
 800490e:	2112      	movs	r1, #18
 8004910:	20d4      	movs	r0, #212	; 0xd4
 8004912:	f7ff fa1b 	bl	8003d4c <SENSOR_IO_Write>
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004924:	2300      	movs	r3, #0
 8004926:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004928:	2110      	movs	r1, #16
 800492a:	20d4      	movs	r0, #212	; 0xd4
 800492c:	f7ff fa28 	bl	8003d80 <SENSOR_IO_Read>
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	461a      	mov	r2, r3
 8004940:	2110      	movs	r1, #16
 8004942:	20d4      	movs	r0, #212	; 0xd4
 8004944:	f7ff fa02 	bl	8003d4c <SENSOR_IO_Write>
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004954:	f7ff f9f0 	bl	8003d38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004958:	210f      	movs	r1, #15
 800495a:	20d4      	movs	r0, #212	; 0xd4
 800495c:	f7ff fa10 	bl	8003d80 <SENSOR_IO_Read>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	bd80      	pop	{r7, pc}

08004966 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004974:	2115      	movs	r1, #21
 8004976:	20d4      	movs	r0, #212	; 0xd4
 8004978:	f7ff fa02 	bl	8003d80 <SENSOR_IO_Read>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	f043 0310 	orr.w	r3, r3, #16
 8004994:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	461a      	mov	r2, r3
 800499a:	2115      	movs	r1, #21
 800499c:	20d4      	movs	r0, #212	; 0xd4
 800499e:	f7ff f9d5 	bl	8003d4c <SENSOR_IO_Write>
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80049c2:	2110      	movs	r1, #16
 80049c4:	20d4      	movs	r0, #212	; 0xd4
 80049c6:	f7ff f9db 	bl	8003d80 <SENSOR_IO_Read>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80049ce:	f107 0208 	add.w	r2, r7, #8
 80049d2:	2306      	movs	r3, #6
 80049d4:	2128      	movs	r1, #40	; 0x28
 80049d6:	20d4      	movs	r0, #212	; 0xd4
 80049d8:	f7ff f9f0 	bl	8003dbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e01c      	b.n	8004a1c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	3301      	adds	r3, #1
 80049e8:	3320      	adds	r3, #32
 80049ea:	443b      	add	r3, r7
 80049ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	7ffb      	ldrb	r3, [r7, #31]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	3320      	adds	r3, #32
 80049fc:	443b      	add	r3, r7
 80049fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	b212      	sxth	r2, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	3320      	adds	r3, #32
 8004a10:	443b      	add	r3, r7
 8004a12:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	7ffb      	ldrb	r3, [r7, #31]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d9df      	bls.n	80049e2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	d829      	bhi.n	8004a80 <LSM6DSL_AccReadXYZ+0xd4>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <LSM6DSL_AccReadXYZ+0x88>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a81 	.word	0x08004a81
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004a81 	.word	0x08004a81
 8004a54:	08004a6f 	.word	0x08004a6f
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a81 	.word	0x08004a81
 8004a64:	08004a75 	.word	0x08004a75
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <LSM6DSL_AccReadXYZ+0x120>)
 8004a6a:	61bb      	str	r3, [r7, #24]
    break;
 8004a6c:	e008      	b.n	8004a80 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <LSM6DSL_AccReadXYZ+0x124>)
 8004a70:	61bb      	str	r3, [r7, #24]
    break;
 8004a72:	e005      	b.n	8004a80 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <LSM6DSL_AccReadXYZ+0x128>)
 8004a76:	61bb      	str	r3, [r7, #24]
    break;
 8004a78:	e002      	b.n	8004a80 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <LSM6DSL_AccReadXYZ+0x12c>)
 8004a7c:	61bb      	str	r3, [r7, #24]
    break;    
 8004a7e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e01a      	b.n	8004abc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	443b      	add	r3, r7
 8004a8e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	7ffb      	ldrb	r3, [r7, #31]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aae:	ee17 2a90 	vmov	r2, s15
 8004ab2:	b212      	sxth	r2, r2
 8004ab4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004ab6:	7ffb      	ldrb	r3, [r7, #31]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	7ffb      	ldrb	r3, [r7, #31]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d9e1      	bls.n	8004a86 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	3d79db23 	.word	0x3d79db23
 8004ad0:	3df9db23 	.word	0x3df9db23
 8004ad4:	3e79db23 	.word	0x3e79db23
 8004ad8:	3ef9db23 	.word	0x3ef9db23

08004adc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004aea:	2111      	movs	r1, #17
 8004aec:	20d4      	movs	r0, #212	; 0xd4
 8004aee:	f7ff f947 	bl	8003d80 <SENSOR_IO_Read>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004b02:	7bba      	ldrb	r2, [r7, #14]
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2111      	movs	r1, #17
 8004b10:	20d4      	movs	r0, #212	; 0xd4
 8004b12:	f7ff f91b 	bl	8003d4c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004b16:	2112      	movs	r1, #18
 8004b18:	20d4      	movs	r0, #212	; 0xd4
 8004b1a:	f7ff f931 	bl	8003d80 <SENSOR_IO_Read>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004b30:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004b32:	7bba      	ldrb	r2, [r7, #14]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004b3a:	7bbb      	ldrb	r3, [r7, #14]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2112      	movs	r1, #18
 8004b40:	20d4      	movs	r0, #212	; 0xd4
 8004b42:	f7ff f903 	bl	8003d4c <SENSOR_IO_Write>
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004b54:	2300      	movs	r3, #0
 8004b56:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004b58:	2111      	movs	r1, #17
 8004b5a:	20d4      	movs	r0, #212	; 0xd4
 8004b5c:	f7ff f910 	bl	8003d80 <SENSOR_IO_Read>
 8004b60:	4603      	mov	r3, r0
 8004b62:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2111      	movs	r1, #17
 8004b72:	20d4      	movs	r0, #212	; 0xd4
 8004b74:	f7ff f8ea 	bl	8003d4c <SENSOR_IO_Write>
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004b84:	f7ff f8d8 	bl	8003d38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004b88:	210f      	movs	r1, #15
 8004b8a:	20d4      	movs	r0, #212	; 0xd4
 8004b8c:	f7ff f8f8 	bl	8003d80 <SENSOR_IO_Read>
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8004ba4:	2116      	movs	r1, #22
 8004ba6:	20d4      	movs	r0, #212	; 0xd4
 8004ba8:	f7ff f8ea 	bl	8003d80 <SENSOR_IO_Read>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bc4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2116      	movs	r1, #22
 8004bcc:	20d4      	movs	r0, #212	; 0xd4
 8004bce:	f7ff f8bd 	bl	8003d4c <SENSOR_IO_Write>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004bf2:	2111      	movs	r1, #17
 8004bf4:	20d4      	movs	r0, #212	; 0xd4
 8004bf6:	f7ff f8c3 	bl	8003d80 <SENSOR_IO_Read>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004bfe:	f107 0208 	add.w	r2, r7, #8
 8004c02:	2306      	movs	r3, #6
 8004c04:	2122      	movs	r1, #34	; 0x22
 8004c06:	20d4      	movs	r0, #212	; 0xd4
 8004c08:	f7ff f8d8 	bl	8003dbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e01c      	b.n	8004c4c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	3301      	adds	r3, #1
 8004c18:	3320      	adds	r3, #32
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	3320      	adds	r3, #32
 8004c2c:	443b      	add	r3, r7
 8004c2e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	b212      	sxth	r2, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	3320      	adds	r3, #32
 8004c40:	443b      	add	r3, r7
 8004c42:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d9df      	bls.n	8004c12 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d829      	bhi.n	8004cb0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004cb1 	.word	0x08004cb1
 8004c6c:	08004cb1 	.word	0x08004cb1
 8004c70:	08004cb1 	.word	0x08004cb1
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004cb1 	.word	0x08004cb1
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004ca5 	.word	0x08004ca5
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb1 	.word	0x08004cb1
 8004c94:	08004cab 	.word	0x08004cab
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8004c98:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8004c9a:	61bb      	str	r3, [r7, #24]
    break;
 8004c9c:	e008      	b.n	8004cb0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8004c9e:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8004ca0:	61bb      	str	r3, [r7, #24]
    break;
 8004ca2:	e005      	b.n	8004cb0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8004ca6:	61bb      	str	r3, [r7, #24]
    break;
 8004ca8:	e002      	b.n	8004cb0 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8004cac:	61bb      	str	r3, [r7, #24]
    break;    
 8004cae:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e016      	b.n	8004ce4 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8004cb6:	7ffb      	ldrb	r3, [r7, #31]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	3320      	adds	r3, #32
 8004cbc:	443b      	add	r3, r7
 8004cbe:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	7ffb      	ldrb	r3, [r7, #31]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d9e5      	bls.n	8004cb6 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	410c0000 	.word	0x410c0000
 8004cf8:	418c0000 	.word	0x418c0000
 8004cfc:	420c0000 	.word	0x420c0000
 8004d00:	428c0000 	.word	0x428c0000

08004d04 <LSM6DSL_GetStatus>:
uint8_t LSM6DSL_GetStatus(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_STATUS_REG);
 8004d08:	211e      	movs	r1, #30
 8004d0a:	20d4      	movs	r0, #212	; 0xd4
 8004d0c:	f7ff f838 	bl	8003d80 <SENSOR_IO_Read>
 8004d10:	4603      	mov	r3, r0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <LSM6DSL_AccReady>:
uint8_t LSM6DSL_AccReady(void)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
	uint8_t res = LSM6DSL_GetStatus();
 8004d1c:	f7ff fff2 	bl	8004d04 <LSM6DSL_GetStatus>
 8004d20:	4603      	mov	r3, r0
 8004d22:	71fb      	strb	r3, [r7, #7]
	return (res & 0b01)&&1;
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <LSM6DSL_GyroReady>:
uint8_t LSM6DSL_GyroReady(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
	uint8_t res = LSM6DSL_GetStatus();
 8004d42:	f7ff ffdf 	bl	8004d04 <LSM6DSL_GetStatus>
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
	return (res &0b10)&&1;
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <LSM6DSL_AccWaitReady>:
{
	uint8_t res = LSM6DSL_GetStatus();
	return (res&0b100)&&1;
}
void LSM6DSL_AccWaitReady(void)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
	while(1)
	{
		uint8_t res = LSM6DSL_GetStatus();
 8004d68:	f7ff ffcc 	bl	8004d04 <LSM6DSL_GetStatus>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	71fb      	strb	r3, [r7, #7]
		res = res & 0b01;
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	71fb      	strb	r3, [r7, #7]
		if(res)break;
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d100      	bne.n	8004d80 <LSM6DSL_AccWaitReady+0x1e>
	{
 8004d7e:	e7f3      	b.n	8004d68 <LSM6DSL_AccWaitReady+0x6>
		if(res)break;
 8004d80:	bf00      	nop
	}
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <LSM6DSL_GyroWaitReady>:
void LSM6DSL_GyroWaitReady(void)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
	while(1)
	{
		uint8_t res = LSM6DSL_GetStatus();
 8004d90:	f7ff ffb8 	bl	8004d04 <LSM6DSL_GetStatus>
 8004d94:	4603      	mov	r3, r0
 8004d96:	71fb      	strb	r3, [r7, #7]
		res = res & 0b10;
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	71fb      	strb	r3, [r7, #7]
		if(res)break;
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d100      	bne.n	8004da8 <LSM6DSL_GyroWaitReady+0x1e>
	{
 8004da6:	e7f3      	b.n	8004d90 <LSM6DSL_GyroWaitReady+0x6>
		if(res)break;
 8004da8:	bf00      	nop
	}
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dbc:	2003      	movs	r0, #3
 8004dbe:	f000 f95b 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f000 f80e 	bl	8004de4 <HAL_InitTick>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	71fb      	strb	r3, [r7, #7]
 8004dd2:	e001      	b.n	8004dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dd4:	f7fd ffc2 	bl	8002d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_InitTick+0x68>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_InitTick+0x6c>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_InitTick+0x68>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f968 	bl	80050e2 <HAL_SYSTICK_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d809      	bhi.n	8004e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	f04f 30ff 	mov.w	r0, #4294967295
 8004e26:	f000 f932 	bl	800508e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <HAL_InitTick+0x70>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e007      	b.n	8004e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	e004      	b.n	8004e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e001      	b.n	8004e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000134 	.word	0x20000134
 8004e50:	20000038 	.word	0x20000038
 8004e54:	20000130 	.word	0x20000130

08004e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_IncTick+0x1c>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_IncTick+0x20>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <HAL_IncTick+0x1c>)
 8004e68:	6013      	str	r3, [r2, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	20003fd8 	.word	0x20003fd8
 8004e78:	20000134 	.word	0x20000134

08004e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_GetTick+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20003fd8 	.word	0x20003fd8

08004e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7ff ffee 	bl	8004e7c <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d004      	beq.n	8004eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_Delay+0x40>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eb8:	bf00      	nop
 8004eba:	f7ff ffdf 	bl	8004e7c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d8f7      	bhi.n	8004eba <HAL_Delay+0x26>
  {
  }
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000134 	.word	0x20000134

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	60d3      	str	r3, [r2, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	; (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005044:	d301      	bcc.n	800504a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <SysTick_Config+0x40>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005052:	210f      	movs	r1, #15
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	f7ff ff8e 	bl	8004f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <SysTick_Config+0x40>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SysTick_Config+0x40>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000e010 	.word	0xe000e010

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff29 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050a0:	f7ff ff3e 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 80050a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	f7ff ff8e 	bl	8004fcc <NVIC_EncodePriority>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff ff5d 	bl	8004f78 <__NVIC_SetPriority>
}
 80050be:	bf00      	nop
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	4603      	mov	r3, r0
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff31 	bl	8004f3c <__NVIC_EnableIRQ>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ffa2 	bl	8005034 <SysTick_Config>
 80050f0:	4603      	mov	r3, r0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510a:	e17f      	b.n	800540c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2101      	movs	r1, #1
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8171 	beq.w	8005406 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d00b      	beq.n	8005144 <HAL_GPIO_Init+0x48>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d007      	beq.n	8005144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005138:	2b11      	cmp	r3, #17
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b12      	cmp	r3, #18
 8005142:	d130      	bne.n	80051a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	2203      	movs	r2, #3
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800517a:	2201      	movs	r2, #1
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 0201 	and.w	r2, r3, #1
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d118      	bne.n	80051e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80051b8:	2201      	movs	r2, #1
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	08db      	lsrs	r3, r3, #3
 80051ce:	f003 0201 	and.w	r2, r3, #1
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	2203      	movs	r2, #3
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4013      	ands	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x128>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b12      	cmp	r3, #18
 8005222:	d123      	bne.n	800526c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	6939      	ldr	r1, [r7, #16]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4013      	ands	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80ac 	beq.w	8005406 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	4b5f      	ldr	r3, [pc, #380]	; (800542c <HAL_GPIO_Init+0x330>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	4a5e      	ldr	r2, [pc, #376]	; (800542c <HAL_GPIO_Init+0x330>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6613      	str	r3, [r2, #96]	; 0x60
 80052ba:	4b5c      	ldr	r3, [pc, #368]	; (800542c <HAL_GPIO_Init+0x330>)
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052c6:	4a5a      	ldr	r2, [pc, #360]	; (8005430 <HAL_GPIO_Init+0x334>)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	3302      	adds	r3, #2
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	220f      	movs	r2, #15
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052f0:	d025      	beq.n	800533e <HAL_GPIO_Init+0x242>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a4f      	ldr	r2, [pc, #316]	; (8005434 <HAL_GPIO_Init+0x338>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01f      	beq.n	800533a <HAL_GPIO_Init+0x23e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a4e      	ldr	r2, [pc, #312]	; (8005438 <HAL_GPIO_Init+0x33c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d019      	beq.n	8005336 <HAL_GPIO_Init+0x23a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a4d      	ldr	r2, [pc, #308]	; (800543c <HAL_GPIO_Init+0x340>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_GPIO_Init+0x236>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a4c      	ldr	r2, [pc, #304]	; (8005440 <HAL_GPIO_Init+0x344>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00d      	beq.n	800532e <HAL_GPIO_Init+0x232>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a4b      	ldr	r2, [pc, #300]	; (8005444 <HAL_GPIO_Init+0x348>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_GPIO_Init+0x22e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a4a      	ldr	r2, [pc, #296]	; (8005448 <HAL_GPIO_Init+0x34c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d101      	bne.n	8005326 <HAL_GPIO_Init+0x22a>
 8005322:	2306      	movs	r3, #6
 8005324:	e00c      	b.n	8005340 <HAL_GPIO_Init+0x244>
 8005326:	2307      	movs	r3, #7
 8005328:	e00a      	b.n	8005340 <HAL_GPIO_Init+0x244>
 800532a:	2305      	movs	r3, #5
 800532c:	e008      	b.n	8005340 <HAL_GPIO_Init+0x244>
 800532e:	2304      	movs	r3, #4
 8005330:	e006      	b.n	8005340 <HAL_GPIO_Init+0x244>
 8005332:	2303      	movs	r3, #3
 8005334:	e004      	b.n	8005340 <HAL_GPIO_Init+0x244>
 8005336:	2302      	movs	r3, #2
 8005338:	e002      	b.n	8005340 <HAL_GPIO_Init+0x244>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_GPIO_Init+0x244>
 800533e:	2300      	movs	r3, #0
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	f002 0203 	and.w	r2, r2, #3
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	4093      	lsls	r3, r2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005350:	4937      	ldr	r1, [pc, #220]	; (8005430 <HAL_GPIO_Init+0x334>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	3302      	adds	r3, #2
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800535e:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_GPIO_Init+0x350>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005382:	4a32      	ldr	r2, [pc, #200]	; (800544c <HAL_GPIO_Init+0x350>)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_GPIO_Init+0x350>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	43db      	mvns	r3, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053ac:	4a27      	ldr	r2, [pc, #156]	; (800544c <HAL_GPIO_Init+0x350>)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_GPIO_Init+0x350>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053d6:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_GPIO_Init+0x350>)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_GPIO_Init+0x350>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005400:	4a12      	ldr	r2, [pc, #72]	; (800544c <HAL_GPIO_Init+0x350>)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f47f ae78 	bne.w	800510c <HAL_GPIO_Init+0x10>
  }
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
 8005430:	40010000 	.word	0x40010000
 8005434:	48000400 	.word	0x48000400
 8005438:	48000800 	.word	0x48000800
 800543c:	48000c00 	.word	0x48000c00
 8005440:	48001000 	.word	0x48001000
 8005444:	48001400 	.word	0x48001400
 8005448:	48001800 	.word	0x48001800
 800544c:	40010400 	.word	0x40010400

08005450 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800545e:	e0cd      	b.n	80055fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005460:	2201      	movs	r2, #1
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80c0 	beq.w	80055f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005476:	4a68      	ldr	r2, [pc, #416]	; (8005618 <HAL_GPIO_DeInit+0x1c8>)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	3302      	adds	r3, #2
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	220f      	movs	r2, #15
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800549e:	d025      	beq.n	80054ec <HAL_GPIO_DeInit+0x9c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a5e      	ldr	r2, [pc, #376]	; (800561c <HAL_GPIO_DeInit+0x1cc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d01f      	beq.n	80054e8 <HAL_GPIO_DeInit+0x98>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a5d      	ldr	r2, [pc, #372]	; (8005620 <HAL_GPIO_DeInit+0x1d0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d019      	beq.n	80054e4 <HAL_GPIO_DeInit+0x94>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a5c      	ldr	r2, [pc, #368]	; (8005624 <HAL_GPIO_DeInit+0x1d4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_GPIO_DeInit+0x90>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a5b      	ldr	r2, [pc, #364]	; (8005628 <HAL_GPIO_DeInit+0x1d8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00d      	beq.n	80054dc <HAL_GPIO_DeInit+0x8c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a5a      	ldr	r2, [pc, #360]	; (800562c <HAL_GPIO_DeInit+0x1dc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <HAL_GPIO_DeInit+0x88>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a59      	ldr	r2, [pc, #356]	; (8005630 <HAL_GPIO_DeInit+0x1e0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_GPIO_DeInit+0x84>
 80054d0:	2306      	movs	r3, #6
 80054d2:	e00c      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054d4:	2307      	movs	r3, #7
 80054d6:	e00a      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054d8:	2305      	movs	r3, #5
 80054da:	e008      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054dc:	2304      	movs	r3, #4
 80054de:	e006      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054e0:	2303      	movs	r3, #3
 80054e2:	e004      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e002      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054ec:	2300      	movs	r3, #0
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	f002 0203 	and.w	r2, r2, #3
 80054f4:	0092      	lsls	r2, r2, #2
 80054f6:	4093      	lsls	r3, r2
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d132      	bne.n	8005564 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80054fe:	4b4d      	ldr	r3, [pc, #308]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	43db      	mvns	r3, r3
 8005506:	494b      	ldr	r1, [pc, #300]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005508:	4013      	ands	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800550c:	4b49      	ldr	r3, [pc, #292]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	43db      	mvns	r3, r3
 8005514:	4947      	ldr	r1, [pc, #284]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005516:	4013      	ands	r3, r2
 8005518:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800551a:	4b46      	ldr	r3, [pc, #280]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	43db      	mvns	r3, r3
 8005522:	4944      	ldr	r1, [pc, #272]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005524:	4013      	ands	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	43db      	mvns	r3, r3
 8005530:	4940      	ldr	r1, [pc, #256]	; (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005532:	4013      	ands	r3, r2
 8005534:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	220f      	movs	r2, #15
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005546:	4a34      	ldr	r2, [pc, #208]	; (8005618 <HAL_GPIO_DeInit+0x1c8>)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	3302      	adds	r3, #2
 800554e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	43da      	mvns	r2, r3
 8005556:	4830      	ldr	r0, [pc, #192]	; (8005618 <HAL_GPIO_DeInit+0x1c8>)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	400a      	ands	r2, r1
 800555e:	3302      	adds	r3, #2
 8005560:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2103      	movs	r1, #3
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	08da      	lsrs	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3208      	adds	r2, #8
 8005580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	220f      	movs	r2, #15
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	08d2      	lsrs	r2, r2, #3
 8005598:	4019      	ands	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3208      	adds	r2, #8
 800559e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	2103      	movs	r1, #3
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	2101      	movs	r1, #1
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	401a      	ands	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2103      	movs	r1, #3
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	401a      	ands	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	2101      	movs	r1, #1
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	401a      	ands	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f af2b 	bne.w	8005460 <HAL_GPIO_DeInit+0x10>
  }
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000
 800561c:	48000400 	.word	0x48000400
 8005620:	48000800 	.word	0x48000800
 8005624:	48000c00 	.word	0x48000c00
 8005628:	48001000 	.word	0x48001000
 800562c:	48001400 	.word	0x48001400
 8005630:	48001800 	.word	0x48001800
 8005634:	40010400 	.word	0x40010400

08005638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	4013      	ands	r3, r2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
 8005654:	e001      	b.n	800565a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
 8005674:	4613      	mov	r3, r2
 8005676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005678:	787b      	ldrb	r3, [r7, #1]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005684:	e002      	b.n	800568c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80056b6:	e002      	b.n	80056be <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056b8:	887a      	ldrh	r2, [r7, #2]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	619a      	str	r2, [r3, #24]
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056e2:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fcf4 	bl	80020d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40010400 	.word	0x40010400

080056fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e081      	b.n	8005812 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd fb3e 	bl	8002da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800574c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d107      	bne.n	8005776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	e006      	b.n	8005784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d104      	bne.n	8005796 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005794:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	ea42 0103 	orr.w	r1, r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	021a      	lsls	r2, r3, #8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e021      	b.n	8005870 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fd faf1 	bl	8002e2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	4608      	mov	r0, r1
 8005882:	4611      	mov	r1, r2
 8005884:	461a      	mov	r2, r3
 8005886:	4603      	mov	r3, r0
 8005888:	817b      	strh	r3, [r7, #10]
 800588a:	460b      	mov	r3, r1
 800588c:	813b      	strh	r3, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	f040 80f9 	bne.w	8005a92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_I2C_Mem_Write+0x34>
 80058a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0ed      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_I2C_Mem_Write+0x4e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0e6      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ce:	f7ff fad5 	bl	8004e7c <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2319      	movs	r3, #25
 80058da:	2201      	movs	r2, #1
 80058dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fac3 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0d1      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2221      	movs	r2, #33	; 0x21
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2240      	movs	r2, #64	; 0x40
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005918:	88f8      	ldrh	r0, [r7, #6]
 800591a:	893a      	ldrh	r2, [r7, #8]
 800591c:	8979      	ldrh	r1, [r7, #10]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	4603      	mov	r3, r0
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f9d3 	bl	8005cd4 <I2C_RequestMemoryWrite>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0a9      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2bff      	cmp	r3, #255	; 0xff
 8005948:	d90e      	bls.n	8005968 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	b2da      	uxtb	r2, r3
 8005956:	8979      	ldrh	r1, [r7, #10]
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fba5 	bl	80060b0 <I2C_TransferConfig>
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	b2da      	uxtb	r2, r3
 8005978:	8979      	ldrh	r1, [r7, #10]
 800597a:	2300      	movs	r3, #0
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fb94 	bl	80060b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 faad 	bl	8005eec <I2C_WaitOnTXISFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e07b      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d034      	beq.n	8005a40 <HAL_I2C_Mem_Write+0x1c8>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d130      	bne.n	8005a40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2200      	movs	r2, #0
 80059e6:	2180      	movs	r1, #128	; 0x80
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fa3f 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e04d      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2bff      	cmp	r3, #255	; 0xff
 8005a00:	d90e      	bls.n	8005a20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	8979      	ldrh	r1, [r7, #10]
 8005a10:	2300      	movs	r3, #0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fb49 	bl	80060b0 <I2C_TransferConfig>
 8005a1e:	e00f      	b.n	8005a40 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	8979      	ldrh	r1, [r7, #10]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fb38 	bl	80060b0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d19e      	bne.n	8005988 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fa8c 	bl	8005f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e01a      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2220      	movs	r2, #32
 8005a64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_I2C_Mem_Write+0x224>)
 8005a72:	400b      	ands	r3, r1
 8005a74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	fe00e800 	.word	0xfe00e800

08005aa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	813b      	strh	r3, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	f040 80fd 	bne.w	8005cc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_I2C_Mem_Read+0x34>
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0f1      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_Mem_Read+0x4e>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0ea      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005af6:	f7ff f9c1 	bl	8004e7c <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2319      	movs	r3, #25
 8005b02:	2201      	movs	r2, #1
 8005b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f9af 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0d5      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2222      	movs	r2, #34	; 0x22
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b40:	88f8      	ldrh	r0, [r7, #6]
 8005b42:	893a      	ldrh	r2, [r7, #8]
 8005b44:	8979      	ldrh	r1, [r7, #10]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4603      	mov	r3, r0
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f913 	bl	8005d7c <I2C_RequestMemoryRead>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0ad      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	d90e      	bls.n	8005b90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	8979      	ldrh	r1, [r7, #10]
 8005b80:	4b52      	ldr	r3, [pc, #328]	; (8005ccc <HAL_I2C_Mem_Read+0x22c>)
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fa91 	bl	80060b0 <I2C_TransferConfig>
 8005b8e:	e00f      	b.n	8005bb0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	8979      	ldrh	r1, [r7, #10]
 8005ba2:	4b4a      	ldr	r3, [pc, #296]	; (8005ccc <HAL_I2C_Mem_Read+0x22c>)
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fa80 	bl	80060b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2104      	movs	r1, #4
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f956 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07c      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d034      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x1d0>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d130      	bne.n	8005c70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f927 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e04d      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d90e      	bls.n	8005c50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	8979      	ldrh	r1, [r7, #10]
 8005c40:	2300      	movs	r3, #0
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fa31 	bl	80060b0 <I2C_TransferConfig>
 8005c4e:	e00f      	b.n	8005c70 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	8979      	ldrh	r1, [r7, #10]
 8005c62:	2300      	movs	r3, #0
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa20 	bl	80060b0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d19a      	bne.n	8005bb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f974 	bl	8005f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e01a      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2220      	movs	r2, #32
 8005c94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_I2C_Mem_Read+0x230>)
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	80002400 	.word	0x80002400
 8005cd0:	fe00e800 	.word	0xfe00e800

08005cd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	817b      	strh	r3, [r7, #10]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	813b      	strh	r3, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	8979      	ldrh	r1, [r7, #10]
 8005cf4:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <I2C_RequestMemoryWrite+0xa4>)
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f9d7 	bl	80060b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8f0 	bl	8005eec <I2C_WaitOnTXISFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02c      	b.n	8005d70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
 8005d26:	e015      	b.n	8005d54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f8d6 	bl	8005eec <I2C_WaitOnTXISFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e012      	b.n	8005d70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4a:	893b      	ldrh	r3, [r7, #8]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2180      	movs	r1, #128	; 0x80
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f884 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	80002000 	.word	0x80002000

08005d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	8979      	ldrh	r1, [r7, #10]
 8005d9c:	4b20      	ldr	r3, [pc, #128]	; (8005e20 <I2C_RequestMemoryRead+0xa4>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	2300      	movs	r3, #0
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f984 	bl	80060b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f89d 	bl	8005eec <I2C_WaitOnTXISFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e02c      	b.n	8005e16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d105      	bne.n	8005dce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc2:	893b      	ldrh	r3, [r7, #8]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
 8005dcc:	e015      	b.n	8005dfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	69b9      	ldr	r1, [r7, #24]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f883 	bl	8005eec <I2C_WaitOnTXISFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e012      	b.n	8005e16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005df0:	893b      	ldrh	r3, [r7, #8]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2140      	movs	r1, #64	; 0x40
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f831 	bl	8005e6c <I2C_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	80002000 	.word	0x80002000

08005e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d103      	bne.n	8005e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d007      	beq.n	8005e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	619a      	str	r2, [r3, #24]
  }
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e7c:	e022      	b.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d01e      	beq.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fe fff9 	bl	8004e7c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d113      	bne.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e00f      	b.n	8005ee4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d0cd      	beq.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ef8:	e02c      	b.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f870 	bl	8005fe4 <I2C_IsAcknowledgeFailed>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e02a      	b.n	8005f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d01e      	beq.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f16:	f7fe ffb1 	bl	8004e7c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d113      	bne.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e007      	b.n	8005f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d1cb      	bne.n	8005efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f78:	e028      	b.n	8005fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f830 	bl	8005fe4 <I2C_IsAcknowledgeFailed>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e026      	b.n	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fe ff75 	bl	8004e7c <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d113      	bne.n	8005fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e007      	b.n	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d1cf      	bne.n	8005f7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d151      	bne.n	80060a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ffe:	e022      	b.n	8006046 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d01e      	beq.n	8006046 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006008:	f7fe ff38 	bl	8004e7c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <I2C_IsAcknowledgeFailed+0x3a>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d113      	bne.n	8006046 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02e      	b.n	80060a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b20      	cmp	r3, #32
 8006052:	d1d5      	bne.n	8006000 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2210      	movs	r2, #16
 800605a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2220      	movs	r2, #32
 8006062:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff fedd 	bl	8005e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6859      	ldr	r1, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <I2C_IsAcknowledgeFailed+0xc8>)
 8006076:	400b      	ands	r3, r1
 8006078:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f043 0204 	orr.w	r2, r3, #4
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	fe00e800 	.word	0xfe00e800

080060b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	817b      	strh	r3, [r7, #10]
 80060be:	4613      	mov	r3, r2
 80060c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	0d5b      	lsrs	r3, r3, #21
 80060cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060d0:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <I2C_TransferConfig+0x58>)
 80060d2:	430b      	orrs	r3, r1
 80060d4:	43db      	mvns	r3, r3
 80060d6:	ea02 0103 	and.w	r1, r2, r3
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060e0:	7a7b      	ldrb	r3, [r7, #9]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	03ff63ff 	.word	0x03ff63ff

0800610c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b20      	cmp	r3, #32
 8006120:	d138      	bne.n	8006194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800612c:	2302      	movs	r3, #2
 800612e:	e032      	b.n	8006196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800615e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <HAL_PWREx_GetVoltageRange+0x18>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40007000 	.word	0x40007000

080061c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ce:	d130      	bne.n	8006232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d0:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d038      	beq.n	8006250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061ee:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2232      	movs	r2, #50	; 0x32
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	4a1b      	ldr	r2, [pc, #108]	; (8006268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	0c9b      	lsrs	r3, r3, #18
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006204:	e002      	b.n	800620c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3b01      	subs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d102      	bne.n	8006220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f2      	bne.n	8006206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622c:	d110      	bne.n	8006250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e00f      	b.n	8006252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623e:	d007      	beq.n	8006250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006248:	4a05      	ldr	r2, [pc, #20]	; (8006260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800624e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40007000 	.word	0x40007000
 8006264:	20000038 	.word	0x20000038
 8006268:	431bde83 	.word	0x431bde83

0800626c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e3da      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800627e:	4b97      	ldr	r3, [pc, #604]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006288:	4b94      	ldr	r3, [pc, #592]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80e4 	beq.w	8006468 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_RCC_OscConfig+0x4a>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b0c      	cmp	r3, #12
 80062aa:	f040 808b 	bne.w	80063c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	f040 8087 	bne.w	80063c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062b6:	4b89      	ldr	r3, [pc, #548]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_RCC_OscConfig+0x62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e3b2      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1a      	ldr	r2, [r3, #32]
 80062d2:	4b82      	ldr	r3, [pc, #520]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <HAL_RCC_OscConfig+0x7c>
 80062de:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e6:	e005      	b.n	80062f4 <HAL_RCC_OscConfig+0x88>
 80062e8:	4b7c      	ldr	r3, [pc, #496]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80062ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d223      	bcs.n	8006340 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fd45 	bl	8006d8c <RCC_SetFlashLatencyFromMSIRange>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e393      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800630c:	4b73      	ldr	r3, [pc, #460]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a72      	ldr	r2, [pc, #456]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006312:	f043 0308 	orr.w	r3, r3, #8
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4b70      	ldr	r3, [pc, #448]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	496d      	ldr	r1, [pc, #436]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800632a:	4b6c      	ldr	r3, [pc, #432]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	4968      	ldr	r1, [pc, #416]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800633a:	4313      	orrs	r3, r2
 800633c:	604b      	str	r3, [r1, #4]
 800633e:	e025      	b.n	800638c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006340:	4b66      	ldr	r3, [pc, #408]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a65      	ldr	r2, [pc, #404]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006346:	f043 0308 	orr.w	r3, r3, #8
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b63      	ldr	r3, [pc, #396]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	4960      	ldr	r1, [pc, #384]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800635e:	4b5f      	ldr	r3, [pc, #380]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	495b      	ldr	r1, [pc, #364]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800636e:	4313      	orrs	r3, r2
 8006370:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fd05 	bl	8006d8c <RCC_SetFlashLatencyFromMSIRange>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e353      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800638c:	f000 fc3a 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006390:	4602      	mov	r2, r0
 8006392:	4b52      	ldr	r3, [pc, #328]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	4950      	ldr	r1, [pc, #320]	; (80064e0 <HAL_RCC_OscConfig+0x274>)
 800639e:	5ccb      	ldrb	r3, [r1, r3]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
 80063a8:	4a4e      	ldr	r2, [pc, #312]	; (80064e4 <HAL_RCC_OscConfig+0x278>)
 80063aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063ac:	4b4e      	ldr	r3, [pc, #312]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe fd17 	bl	8004de4 <HAL_InitTick>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d052      	beq.n	8006466 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	e337      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d032      	beq.n	8006432 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a42      	ldr	r2, [pc, #264]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063d8:	f7fe fd50 	bl	8004e7c <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063e0:	f7fe fd4c 	bl	8004e7c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e320      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063f2:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063fe:	4b37      	ldr	r3, [pc, #220]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a36      	ldr	r2, [pc, #216]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006404:	f043 0308 	orr.w	r3, r3, #8
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b34      	ldr	r3, [pc, #208]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	4931      	ldr	r1, [pc, #196]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006418:	4313      	orrs	r3, r2
 800641a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800641c:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	492c      	ldr	r1, [pc, #176]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800642c:	4313      	orrs	r3, r2
 800642e:	604b      	str	r3, [r1, #4]
 8006430:	e01a      	b.n	8006468 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006432:	4b2a      	ldr	r3, [pc, #168]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a29      	ldr	r2, [pc, #164]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800643e:	f7fe fd1d 	bl	8004e7c <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006446:	f7fe fd19 	bl	8004e7c <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e2ed      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006458:	4b20      	ldr	r3, [pc, #128]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1f0      	bne.n	8006446 <HAL_RCC_OscConfig+0x1da>
 8006464:	e000      	b.n	8006468 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006466:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d076      	beq.n	8006562 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b08      	cmp	r3, #8
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x21a>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d10e      	bne.n	800649e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b03      	cmp	r3, #3
 8006484:	d10b      	bne.n	800649e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d066      	beq.n	8006560 <HAL_RCC_OscConfig+0x2f4>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d162      	bne.n	8006560 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e2ca      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a6:	d106      	bne.n	80064b6 <HAL_RCC_OscConfig+0x24a>
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a0b      	ldr	r2, [pc, #44]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e026      	b.n	8006504 <HAL_RCC_OscConfig+0x298>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064be:	d115      	bne.n	80064ec <HAL_RCC_OscConfig+0x280>
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a05      	ldr	r2, [pc, #20]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a02      	ldr	r2, [pc, #8]	; (80064dc <HAL_RCC_OscConfig+0x270>)
 80064d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	e014      	b.n	8006504 <HAL_RCC_OscConfig+0x298>
 80064da:	bf00      	nop
 80064dc:	40021000 	.word	0x40021000
 80064e0:	0800f888 	.word	0x0800f888
 80064e4:	20000038 	.word	0x20000038
 80064e8:	20000130 	.word	0x20000130
 80064ec:	4ba1      	ldr	r3, [pc, #644]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4aa0      	ldr	r2, [pc, #640]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4b9e      	ldr	r3, [pc, #632]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a9d      	ldr	r2, [pc, #628]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80064fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d014      	beq.n	8006536 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fe fcb6 	bl	8004e7c <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006512:	e009      	b.n	8006528 <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006514:	f7fe fcb2 	bl	8004e7c <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006522:	d301      	bcc.n	8006528 <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e285      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006528:	4b92      	ldr	r3, [pc, #584]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ef      	beq.n	8006514 <HAL_RCC_OscConfig+0x2a8>
 8006534:	e015      	b.n	8006562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006536:	f7fe fca1 	bl	8004e7c <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800653c:	e009      	b.n	8006552 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800653e:	f7fe fc9d 	bl	8004e7c <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d301      	bcc.n	8006552 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e270      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006552:	4b88      	ldr	r3, [pc, #544]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ef      	bne.n	800653e <HAL_RCC_OscConfig+0x2d2>
 800655e:	e000      	b.n	8006562 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d060      	beq.n	8006630 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d005      	beq.n	8006580 <HAL_RCC_OscConfig+0x314>
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b0c      	cmp	r3, #12
 8006578:	d119      	bne.n	80065ae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d116      	bne.n	80065ae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	4b7c      	ldr	r3, [pc, #496]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_OscConfig+0x32c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e24d      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006598:	4b76      	ldr	r3, [pc, #472]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	4973      	ldr	r1, [pc, #460]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ac:	e040      	b.n	8006630 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d023      	beq.n	80065fe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b6:	4b6f      	ldr	r3, [pc, #444]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6e      	ldr	r2, [pc, #440]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7fe fc5b 	bl	8004e7c <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ca:	f7fe fc57 	bl	8004e7c <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e22b      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065dc:	4b65      	ldr	r3, [pc, #404]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e8:	4b62      	ldr	r3, [pc, #392]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	061b      	lsls	r3, r3, #24
 80065f6:	495f      	ldr	r1, [pc, #380]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	604b      	str	r3, [r1, #4]
 80065fc:	e018      	b.n	8006630 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b5d      	ldr	r3, [pc, #372]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a5c      	ldr	r2, [pc, #368]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fe fc37 	bl	8004e7c <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006612:	f7fe fc33 	bl	8004e7c <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e207      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006624:	4b53      	ldr	r3, [pc, #332]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d03c      	beq.n	80066b6 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01c      	beq.n	800667e <HAL_RCC_OscConfig+0x412>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664a:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fe fc12 	bl	8004e7c <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800665c:	f7fe fc0e 	bl	8004e7c <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e1e2      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800666e:	4b41      	ldr	r3, [pc, #260]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <HAL_RCC_OscConfig+0x3f0>
 800667c:	e01b      	b.n	80066b6 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800667e:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006684:	4a3b      	ldr	r2, [pc, #236]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fe fbf5 	bl	8004e7c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x43c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006696:	f7fe fbf1 	bl	8004e7c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e1c5      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a8:	4b32      	ldr	r3, [pc, #200]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ef      	bne.n	8006696 <HAL_RCC_OscConfig+0x42a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80a6 	beq.w	8006810 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c4:	2300      	movs	r3, #0
 80066c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066c8:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCC_OscConfig+0x484>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80066da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066de:	6593      	str	r3, [r2, #88]	; 0x58
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ec:	2301      	movs	r3, #1
 80066ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_RCC_OscConfig+0x50c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d118      	bne.n	800672e <HAL_RCC_OscConfig+0x4c2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_RCC_OscConfig+0x50c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_RCC_OscConfig+0x50c>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006708:	f7fe fbb8 	bl	8004e7c <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x4b6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fe fbb4 	bl	8004e7c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e188      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <HAL_RCC_OscConfig+0x50c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x4a4>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d108      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006746:	e029      	b.n	800679c <HAL_RCC_OscConfig+0x530>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b05      	cmp	r3, #5
 800674e:	d115      	bne.n	800677c <HAL_RCC_OscConfig+0x510>
 8006750:	4b08      	ldr	r3, [pc, #32]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006758:	f043 0304 	orr.w	r3, r3, #4
 800675c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	4a03      	ldr	r2, [pc, #12]	; (8006774 <HAL_RCC_OscConfig+0x508>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006770:	e014      	b.n	800679c <HAL_RCC_OscConfig+0x530>
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000
 8006778:	40007000 	.word	0x40007000
 800677c:	4b91      	ldr	r3, [pc, #580]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	4a90      	ldr	r2, [pc, #576]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800678c:	4b8d      	ldr	r3, [pc, #564]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	4a8c      	ldr	r2, [pc, #560]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d016      	beq.n	80067d2 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fe fb6a 	bl	8004e7c <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fe fb66 	bl	8004e7c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e138      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c2:	4b80      	ldr	r3, [pc, #512]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ed      	beq.n	80067ac <HAL_RCC_OscConfig+0x540>
 80067d0:	e015      	b.n	80067fe <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fe fb53 	bl	8004e7c <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x584>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fe fb4f 	bl	8004e7c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e121      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f0:	4b74      	ldr	r3, [pc, #464]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1ed      	bne.n	80067da <HAL_RCC_OscConfig+0x56e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006804:	4b6f      	ldr	r3, [pc, #444]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	4a6e      	ldr	r2, [pc, #440]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800680a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 810c 	beq.w	8006a32 <HAL_RCC_OscConfig+0x7c6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	2b02      	cmp	r3, #2
 8006820:	f040 80d4 	bne.w	80069cc <HAL_RCC_OscConfig+0x760>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006824:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f003 0203 	and.w	r2, r3, #3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	429a      	cmp	r2, r3
 8006836:	d130      	bne.n	800689a <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	3b01      	subs	r3, #1
 8006844:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d127      	bne.n	800689a <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006854:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d11f      	bne.n	800689a <HAL_RCC_OscConfig+0x62e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006864:	2a07      	cmp	r2, #7
 8006866:	bf14      	ite	ne
 8006868:	2201      	movne	r2, #1
 800686a:	2200      	moveq	r2, #0
 800686c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800686e:	4293      	cmp	r3, r2
 8006870:	d113      	bne.n	800689a <HAL_RCC_OscConfig+0x62e>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	3b01      	subs	r3, #1
 8006880:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d109      	bne.n	800689a <HAL_RCC_OscConfig+0x62e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	3b01      	subs	r3, #1
 8006894:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d06e      	beq.n	8006978 <HAL_RCC_OscConfig+0x70c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b0c      	cmp	r3, #12
 800689e:	d069      	beq.n	8006974 <HAL_RCC_OscConfig+0x708>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068a0:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <HAL_RCC_OscConfig+0x64c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80068ac:	4b45      	ldr	r3, [pc, #276]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x650>
#endif
            )
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0bb      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068bc:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a40      	ldr	r2, [pc, #256]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068c8:	f7fe fad8 	bl	8004e7c <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x676>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fe fad4 	bl	8004e7c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x676>
              {
                return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0a8      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e2:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x664>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ee:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <HAL_RCC_OscConfig+0x75c>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068fe:	3a01      	subs	r2, #1
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	4311      	orrs	r1, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006908:	0212      	lsls	r2, r2, #8
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	3a01      	subs	r2, #1
 8006914:	0552      	lsls	r2, r2, #21
 8006916:	4311      	orrs	r1, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800691c:	0852      	lsrs	r2, r2, #1
 800691e:	3a01      	subs	r2, #1
 8006920:	0652      	lsls	r2, r2, #25
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006928:	0912      	lsrs	r2, r2, #4
 800692a:	0452      	lsls	r2, r2, #17
 800692c:	430a      	orrs	r2, r1
 800692e:	4925      	ldr	r1, [pc, #148]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006930:	4313      	orrs	r3, r2
 8006932:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800693a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800693e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006940:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800694a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800694c:	f7fe fa96 	bl	8004e7c <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x6fa>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006954:	f7fe fa92 	bl	8004e7c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x6fa>
              {
                return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e066      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x6e8>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006972:	e05e      	b.n	8006a32 <HAL_RCC_OscConfig+0x7c6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e05d      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d156      	bne.n	8006a32 <HAL_RCC_OscConfig+0x7c6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a0e      	ldr	r2, [pc, #56]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 800698a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800698e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a0b      	ldr	r2, [pc, #44]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 8006996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800699a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800699c:	f7fe fa6e 	bl	8004e7c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x74a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fe fa6a 	bl	8004e7c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x74a>
            {
              return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e03e      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <HAL_RCC_OscConfig+0x758>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x738>
 80069c2:	e036      	b.n	8006a32 <HAL_RCC_OscConfig+0x7c6>
 80069c4:	40021000 	.word	0x40021000
 80069c8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d02d      	beq.n	8006a2e <HAL_RCC_OscConfig+0x7c2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d2:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80069de:	4b17      	ldr	r3, [pc, #92]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <HAL_RCC_OscConfig+0x78a>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069ea:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069f0:	f023 0303 	bic.w	r3, r3, #3
 80069f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80069f6:	4b11      	ldr	r3, [pc, #68]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4a10      	ldr	r2, [pc, #64]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 80069fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fe fa39 	bl	8004e7c <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x7b4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0e:	f7fe fa35 	bl	8004e7c <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x7b4>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e009      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RCC_OscConfig+0x7d0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f0      	bne.n	8006a0e <HAL_RCC_OscConfig+0x7a2>
 8006a2c:	e001      	b.n	8006a32 <HAL_RCC_OscConfig+0x7c6>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <HAL_RCC_OscConfig+0x7c8>
      }
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40021000 	.word	0x40021000

08006a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0c8      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a54:	4b66      	ldr	r3, [pc, #408]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d910      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 0207 	bic.w	r2, r3, #7
 8006a6a:	4961      	ldr	r1, [pc, #388]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b5f      	ldr	r3, [pc, #380]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0b0      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d04c      	beq.n	8006b2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a98:	4b56      	ldr	r3, [pc, #344]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d121      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e09e      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab0:	4b50      	ldr	r3, [pc, #320]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d115      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e092      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ac8:	4b4a      	ldr	r3, [pc, #296]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d109      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e086      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ad8:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e07e      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ae8:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f023 0203 	bic.w	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	493f      	ldr	r1, [pc, #252]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006afa:	f7fe f9bf 	bl	8004e7c <HAL_GetTick>
 8006afe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b00:	e00a      	b.n	8006b18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b02:	f7fe f9bb 	bl	8004e7c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e066      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b18:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 020c 	and.w	r2, r3, #12
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d1eb      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b36:	4b2f      	ldr	r3, [pc, #188]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	492c      	ldr	r1, [pc, #176]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b29      	ldr	r3, [pc, #164]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d210      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b26      	ldr	r3, [pc, #152]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 0207 	bic.w	r2, r3, #7
 8006b5e:	4924      	ldr	r1, [pc, #144]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b0>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e036      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4918      	ldr	r1, [pc, #96]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba2:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4910      	ldr	r1, [pc, #64]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bb6:	f000 f825 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <HAL_RCC_ClockConfig+0x1b4>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	490c      	ldr	r1, [pc, #48]	; (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc8:	5ccb      	ldrb	r3, [r1, r3]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd2:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe f902 	bl	8004de4 <HAL_InitTick>
 8006be0:	4603      	mov	r3, r0
 8006be2:	72fb      	strb	r3, [r7, #11]

  return status;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40022000 	.word	0x40022000
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	0800f888 	.word	0x0800f888
 8006bfc:	20000038 	.word	0x20000038
 8006c00:	20000130 	.word	0x20000130

08006c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c12:	4b3e      	ldr	r3, [pc, #248]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c1c:	4b3b      	ldr	r3, [pc, #236]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_GetSysClockFreq+0x34>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b0c      	cmp	r3, #12
 8006c30:	d121      	bne.n	8006c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d11e      	bne.n	8006c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c38:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c44:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e005      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c54:	4b2d      	ldr	r3, [pc, #180]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c60:	4a2b      	ldr	r2, [pc, #172]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10d      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d102      	bne.n	8006c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e004      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c88:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	d134      	bne.n	8006cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c92:	4b1e      	ldr	r3, [pc, #120]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0xa6>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d003      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ca8:	e005      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006caa:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8006cac:	617b      	str	r3, [r7, #20]
      break;
 8006cae:	e005      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cb2:	617b      	str	r3, [r7, #20]
      break;
 8006cb4:	e002      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	617b      	str	r3, [r7, #20]
      break;
 8006cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cbc:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	fb03 f202 	mul.w	r2, r3, r2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	0e5b      	lsrs	r3, r3, #25
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	3301      	adds	r3, #1
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3724      	adds	r7, #36	; 0x24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	0800f8a0 	.word	0x0800f8a0
 8006d14:	00f42400 	.word	0x00f42400
 8006d18:	007a1200 	.word	0x007a1200

08006d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000038 	.word	0x20000038

08006d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d38:	f7ff fff0 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4904      	ldr	r1, [pc, #16]	; (8006d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	0800f898 	.word	0x0800f898

08006d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d64:	f7ff ffda 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	0adb      	lsrs	r3, r3, #11
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	4904      	ldr	r1, [pc, #16]	; (8006d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d76:	5ccb      	ldrb	r3, [r1, r3]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40021000 	.word	0x40021000
 8006d88:	0800f898 	.word	0x0800f898

08006d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d98:	4b2a      	ldr	r3, [pc, #168]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006da4:	f7ff f9fe 	bl	80061a4 <HAL_PWREx_GetVoltageRange>
 8006da8:	6178      	str	r0, [r7, #20]
 8006daa:	e014      	b.n	8006dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dac:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	4a24      	ldr	r2, [pc, #144]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db6:	6593      	str	r3, [r2, #88]	; 0x58
 8006db8:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006dc4:	f7ff f9ee 	bl	80061a4 <HAL_PWREx_GetVoltageRange>
 8006dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dca:	4b1e      	ldr	r3, [pc, #120]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ddc:	d10b      	bne.n	8006df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d919      	bls.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2ba0      	cmp	r3, #160	; 0xa0
 8006de8:	d902      	bls.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dea:	2302      	movs	r3, #2
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e013      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006df0:	2301      	movs	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e010      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d902      	bls.n	8006e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	e00a      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d102      	bne.n	8006e0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e08:	2302      	movs	r3, #2
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e004      	b.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b70      	cmp	r3, #112	; 0x70
 8006e12:	d101      	bne.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e14:	2301      	movs	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 0207 	bic.w	r2, r3, #7
 8006e20:	4909      	ldr	r1, [pc, #36]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e28:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d001      	beq.n	8006e3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40021000 	.word	0x40021000
 8006e48:	40022000 	.word	0x40022000

08006e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e07c      	b.n	8006f58 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fb fff5 	bl	8002e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e9e:	d902      	bls.n	8006ea6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e002      	b.n	8006eac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eaa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006eb4:	d007      	beq.n	8006ec6 <HAL_SPI_Init+0x7a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ed6:	d903      	bls.n	8006ee0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
 8006ede:	e002      	b.n	8006ee6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	ea42 0103 	orr.w	r1, r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f003 0204 	and.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	ea42 0103 	orr.w	r1, r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_SPI_Transmit+0x22>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e150      	b.n	8007224 <HAL_SPI_Transmit+0x2c4>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f8a:	f7fd ff77 	bl	8004e7c <HAL_GetTick>
 8006f8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d002      	beq.n	8006fa6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fa4:	e135      	b.n	8007212 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x52>
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fb6:	e12c      	b.n	8007212 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2203      	movs	r2, #3
 8006fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007002:	d107      	bne.n	8007014 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007012:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d007      	beq.n	8007032 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800703a:	d94b      	bls.n	80070d4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HAL_SPI_Transmit+0xea>
 8007044:	8afb      	ldrh	r3, [r7, #22]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d13e      	bne.n	80070c8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	1c9a      	adds	r2, r3, #2
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800706e:	e02b      	b.n	80070c8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d112      	bne.n	80070a4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070a2:	e011      	b.n	80070c8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a4:	f7fd feea 	bl	8004e7c <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d803      	bhi.n	80070bc <HAL_SPI_Transmit+0x15c>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d102      	bne.n	80070c2 <HAL_SPI_Transmit+0x162>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070c6:	e0a4      	b.n	8007212 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1ce      	bne.n	8007070 <HAL_SPI_Transmit+0x110>
 80070d2:	e07c      	b.n	80071ce <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_SPI_Transmit+0x182>
 80070dc:	8afb      	ldrh	r3, [r7, #22]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d170      	bne.n	80071c4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d912      	bls.n	8007112 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b02      	subs	r3, #2
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007110:	e058      	b.n	80071c4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007138:	e044      	b.n	80071c4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d12b      	bne.n	80071a0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d912      	bls.n	8007178 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	881a      	ldrh	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	1c9a      	adds	r2, r3, #2
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b02      	subs	r3, #2
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007176:	e025      	b.n	80071c4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800719e:	e011      	b.n	80071c4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a0:	f7fd fe6c 	bl	8004e7c <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d803      	bhi.n	80071b8 <HAL_SPI_Transmit+0x258>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Transmit+0x25e>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071c2:	e026      	b.n	8007212 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1b5      	bne.n	800713a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fc94 	bl	8007b00 <SPI_EndRxTxTransaction>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e000      	b.n	8007212 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007222:	7ffb      	ldrb	r3, [r7, #31]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007248:	d112      	bne.n	8007270 <HAL_SPI_Receive+0x44>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10e      	bne.n	8007270 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2204      	movs	r2, #4
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f908 	bl	800747c <HAL_SPI_TransmitReceive>
 800726c:	4603      	mov	r3, r0
 800726e:	e101      	b.n	8007474 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_SPI_Receive+0x52>
 800727a:	2302      	movs	r3, #2
 800727c:	e0fa      	b.n	8007474 <HAL_SPI_Receive+0x248>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007286:	f7fd fdf9 	bl	8004e7c <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	d002      	beq.n	800729e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007298:	2302      	movs	r3, #2
 800729a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800729c:	e0e1      	b.n	8007462 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <HAL_SPI_Receive+0x7e>
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072ae:	e0d8      	b.n	8007462 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2204      	movs	r2, #4
 80072b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	88fa      	ldrh	r2, [r7, #6]
 80072d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072fa:	d908      	bls.n	800730e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	e007      	b.n	800731e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007326:	d107      	bne.n	8007338 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007336:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d007      	beq.n	8007356 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007354:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735e:	d867      	bhi.n	8007430 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007360:	e030      	b.n	80073c4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d117      	bne.n	80073a0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f103 020c 	add.w	r2, r3, #12
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800739e:	e011      	b.n	80073c4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a0:	f7fd fd6c 	bl	8004e7c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d803      	bhi.n	80073b8 <HAL_SPI_Receive+0x18c>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d102      	bne.n	80073be <HAL_SPI_Receive+0x192>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c2:	e04e      	b.n	8007462 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1c8      	bne.n	8007362 <HAL_SPI_Receive+0x136>
 80073d0:	e034      	b.n	800743c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d115      	bne.n	800740c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	b292      	uxth	r2, r2
 80073ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800740a:	e011      	b.n	8007430 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800740c:	f7fd fd36 	bl	8004e7c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d803      	bhi.n	8007424 <HAL_SPI_Receive+0x1f8>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d102      	bne.n	800742a <HAL_SPI_Receive+0x1fe>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800742e:	e018      	b.n	8007462 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ca      	bne.n	80073d2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fb05 	bl	8007a50 <SPI_EndRxTransaction>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
 800745e:	e000      	b.n	8007462 <HAL_SPI_Receive+0x236>
  }

error :
 8007460:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800748a:	2301      	movs	r3, #1
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_SPI_TransmitReceive+0x26>
 800749e:	2302      	movs	r3, #2
 80074a0:	e1fb      	b.n	800789a <HAL_SPI_TransmitReceive+0x41e>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074aa:	f7fd fce7 	bl	8004e7c <HAL_GetTick>
 80074ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074c6:	7efb      	ldrb	r3, [r7, #27]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d00e      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x6e>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d2:	d106      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x66>
 80074dc:	7efb      	ldrb	r3, [r7, #27]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d003      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80074e8:	e1cd      	b.n	8007886 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x80>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x80>
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007502:	e1c0      	b.n	8007886 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b04      	cmp	r3, #4
 800750e:	d003      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2205      	movs	r2, #5
 8007514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	887a      	ldrh	r2, [r7, #2]
 800753e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800755a:	d802      	bhi.n	8007562 <HAL_SPI_TransmitReceive+0xe6>
 800755c:	8a3b      	ldrh	r3, [r7, #16]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d908      	bls.n	8007574 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e007      	b.n	8007584 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007582:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	d007      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075aa:	d97c      	bls.n	80076a6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_SPI_TransmitReceive+0x13e>
 80075b4:	8a7b      	ldrh	r3, [r7, #18]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d169      	bne.n	800768e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	881a      	ldrh	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	1c9a      	adds	r2, r3, #2
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075de:	e056      	b.n	800768e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d11b      	bne.n	8007626 <HAL_SPI_TransmitReceive+0x1aa>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d016      	beq.n	8007626 <HAL_SPI_TransmitReceive+0x1aa>
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d113      	bne.n	8007626 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	881a      	ldrh	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d11c      	bne.n	800766e <HAL_SPI_TransmitReceive+0x1f2>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	b292      	uxth	r2, r2
 800764c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800766a:	2301      	movs	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800766e:	f7fd fc05 	bl	8004e7c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767a:	429a      	cmp	r2, r3
 800767c:	d807      	bhi.n	800768e <HAL_SPI_TransmitReceive+0x212>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d003      	beq.n	800768e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800768c:	e0fb      	b.n	8007886 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1a3      	bne.n	80075e0 <HAL_SPI_TransmitReceive+0x164>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d19d      	bne.n	80075e0 <HAL_SPI_TransmitReceive+0x164>
 80076a4:	e0df      	b.n	8007866 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x23a>
 80076ae:	8a7b      	ldrh	r3, [r7, #18]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	f040 80cb 	bne.w	800784c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d912      	bls.n	80076e6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b02      	subs	r3, #2
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076e4:	e0b2      	b.n	800784c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800770c:	e09e      	b.n	800784c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d134      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x30a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d02f      	beq.n	8007786 <HAL_SPI_TransmitReceive+0x30a>
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b01      	cmp	r3, #1
 800772a:	d12c      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b01      	cmp	r3, #1
 8007734:	d912      	bls.n	800775c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	1c9a      	adds	r2, r3, #2
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b02      	subs	r3, #2
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800775a:	e012      	b.n	8007782 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	7812      	ldrb	r2, [r2, #0]
 8007768:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	d148      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x3aa>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d042      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d923      	bls.n	80077f4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	b292      	uxth	r2, r2
 80077b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	1c9a      	adds	r2, r3, #2
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b02      	subs	r3, #2
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d81f      	bhi.n	8007822 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	e016      	b.n	8007822 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f103 020c 	add.w	r2, r3, #12
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007822:	2301      	movs	r3, #1
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007826:	f7fd fb29 	bl	8004e7c <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007832:	429a      	cmp	r2, r3
 8007834:	d803      	bhi.n	800783e <HAL_SPI_TransmitReceive+0x3c2>
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d102      	bne.n	8007844 <HAL_SPI_TransmitReceive+0x3c8>
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800784a:	e01c      	b.n	8007886 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	f47f af5b 	bne.w	800770e <HAL_SPI_TransmitReceive+0x292>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	f47f af54 	bne.w	800770e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f948 	bl	8007b00 <SPI_EndRxTxTransaction>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d006      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
 8007882:	e000      	b.n	8007886 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007884:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078b2:	e04c      	b.n	800794e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d048      	beq.n	800794e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80078bc:	f7fd fade 	bl	8004e7c <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d902      	bls.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d13d      	bne.n	800794e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ea:	d111      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f4:	d004      	beq.n	8007900 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fe:	d107      	bne.n	8007910 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007918:	d10f      	bne.n	800793a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e00f      	b.n	800796e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4013      	ands	r3, r2
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	429a      	cmp	r2, r3
 800795c:	bf0c      	ite	eq
 800795e:	2301      	moveq	r3, #1
 8007960:	2300      	movne	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	429a      	cmp	r2, r3
 800796a:	d1a3      	bne.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007984:	e057      	b.n	8007a36 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800798c:	d106      	bne.n	800799c <SPI_WaitFifoStateUntilTimeout+0x26>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d048      	beq.n	8007a36 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079a4:	f7fd fa6a 	bl	8004e7c <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d902      	bls.n	80079ba <SPI_WaitFifoStateUntilTimeout+0x44>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d13d      	bne.n	8007a36 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079d2:	d111      	bne.n	80079f8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079dc:	d004      	beq.n	80079e8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e6:	d107      	bne.n	80079f8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a00:	d10f      	bne.n	8007a22 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e008      	b.n	8007a48 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d19f      	bne.n	8007986 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a64:	d111      	bne.n	8007a8a <SPI_EndRxTransaction+0x3a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6e:	d004      	beq.n	8007a7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a78:	d107      	bne.n	8007a8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	2180      	movs	r1, #128	; 0x80
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff04 	bl	80078a2 <SPI_WaitFlagStateUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e023      	b.n	8007af8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ab8:	d11d      	bne.n	8007af6 <SPI_EndRxTransaction+0xa6>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac2:	d004      	beq.n	8007ace <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	d113      	bne.n	8007af6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ff4b 	bl	8007976 <SPI_WaitFifoStateUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aea:	f043 0220 	orr.w	r2, r3, #32
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e000      	b.n	8007af8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff ff2c 	bl	8007976 <SPI_WaitFifoStateUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b28:	f043 0220 	orr.w	r2, r3, #32
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e027      	b.n	8007b84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2180      	movs	r1, #128	; 0x80
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7ff feaf 	bl	80078a2 <SPI_WaitFlagStateUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b4e:	f043 0220 	orr.w	r2, r3, #32
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e014      	b.n	8007b84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff ff05 	bl	8007976 <SPI_WaitFifoStateUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b76:	f043 0220 	orr.w	r2, r3, #32
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e000      	b.n	8007b84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e01d      	b.n	8007bda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fa fcee 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f000 f9fc 	bl	8007fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <HAL_TIM_Base_Start+0x50>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b06      	cmp	r3, #6
 8007c04:	d00b      	beq.n	8007c1e <HAL_TIM_Base_Start+0x3a>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d007      	beq.n	8007c1e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	00010007 	.word	0x00010007

08007c38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6a1a      	ldr	r2, [r3, #32]
 8007c4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10f      	bne.n	8007c78 <HAL_TIM_Base_Stop+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	f240 4344 	movw	r3, #1092	; 0x444
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d107      	bne.n	8007c78 <HAL_TIM_Base_Stop+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <HAL_TIM_Base_Start_IT+0x50>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d00b      	beq.n	8007cd2 <HAL_TIM_Base_Start_IT+0x42>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc0:	d007      	beq.n	8007cd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0201 	orr.w	r2, r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	00010007 	.word	0x00010007

08007ce4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10f      	bne.n	8007d2c <HAL_TIM_Base_Stop_IT+0x48>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a1a      	ldr	r2, [r3, #32]
 8007d12:	f240 4344 	movw	r3, #1092	; 0x444
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d107      	bne.n	8007d2c <HAL_TIM_Base_Stop_IT+0x48>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d122      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d11b      	bne.n	8007d96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f06f 0202 	mvn.w	r2, #2
 8007d66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f905 	bl	8007f8c <HAL_TIM_IC_CaptureCallback>
 8007d82:	e005      	b.n	8007d90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8f7 	bl	8007f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f908 	bl	8007fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d122      	bne.n	8007dea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d11b      	bne.n	8007dea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f06f 0204 	mvn.w	r2, #4
 8007dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8db 	bl	8007f8c <HAL_TIM_IC_CaptureCallback>
 8007dd6:	e005      	b.n	8007de4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8cd 	bl	8007f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8de 	bl	8007fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d122      	bne.n	8007e3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d11b      	bne.n	8007e3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f06f 0208 	mvn.w	r2, #8
 8007e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2204      	movs	r2, #4
 8007e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8b1 	bl	8007f8c <HAL_TIM_IC_CaptureCallback>
 8007e2a:	e005      	b.n	8007e38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f8a3 	bl	8007f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8b4 	bl	8007fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d122      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d11b      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f06f 0210 	mvn.w	r2, #16
 8007e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2208      	movs	r2, #8
 8007e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f887 	bl	8007f8c <HAL_TIM_IC_CaptureCallback>
 8007e7e:	e005      	b.n	8007e8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f879 	bl	8007f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f88a 	bl	8007fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10e      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d107      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f06f 0201 	mvn.w	r2, #1
 8007eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7fa fbbf 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d10e      	bne.n	8007eea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	2b80      	cmp	r3, #128	; 0x80
 8007ed8:	d107      	bne.n	8007eea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f913 	bl	8008110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef8:	d10e      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d107      	bne.n	8007f18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f906 	bl	8008124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d10e      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d107      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f838 	bl	8007fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d10e      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d107      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0220 	mvn.w	r2, #32
 8007f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f8c6 	bl	80080fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a40      	ldr	r2, [pc, #256]	; (80080dc <TIM_Base_SetConfig+0x114>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d013      	beq.n	8008008 <TIM_Base_SetConfig+0x40>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe6:	d00f      	beq.n	8008008 <TIM_Base_SetConfig+0x40>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a3d      	ldr	r2, [pc, #244]	; (80080e0 <TIM_Base_SetConfig+0x118>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00b      	beq.n	8008008 <TIM_Base_SetConfig+0x40>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a3c      	ldr	r2, [pc, #240]	; (80080e4 <TIM_Base_SetConfig+0x11c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d007      	beq.n	8008008 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a3b      	ldr	r2, [pc, #236]	; (80080e8 <TIM_Base_SetConfig+0x120>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d003      	beq.n	8008008 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a3a      	ldr	r2, [pc, #232]	; (80080ec <TIM_Base_SetConfig+0x124>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d108      	bne.n	800801a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a2f      	ldr	r2, [pc, #188]	; (80080dc <TIM_Base_SetConfig+0x114>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d01f      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008028:	d01b      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a2c      	ldr	r2, [pc, #176]	; (80080e0 <TIM_Base_SetConfig+0x118>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d017      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a2b      	ldr	r2, [pc, #172]	; (80080e4 <TIM_Base_SetConfig+0x11c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <TIM_Base_SetConfig+0x120>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00f      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a29      	ldr	r2, [pc, #164]	; (80080ec <TIM_Base_SetConfig+0x124>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00b      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a28      	ldr	r2, [pc, #160]	; (80080f0 <TIM_Base_SetConfig+0x128>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d007      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a27      	ldr	r2, [pc, #156]	; (80080f4 <TIM_Base_SetConfig+0x12c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d003      	beq.n	8008062 <TIM_Base_SetConfig+0x9a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a26      	ldr	r2, [pc, #152]	; (80080f8 <TIM_Base_SetConfig+0x130>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d108      	bne.n	8008074 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a10      	ldr	r2, [pc, #64]	; (80080dc <TIM_Base_SetConfig+0x114>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00f      	beq.n	80080c0 <TIM_Base_SetConfig+0xf8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a12      	ldr	r2, [pc, #72]	; (80080ec <TIM_Base_SetConfig+0x124>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00b      	beq.n	80080c0 <TIM_Base_SetConfig+0xf8>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a11      	ldr	r2, [pc, #68]	; (80080f0 <TIM_Base_SetConfig+0x128>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d007      	beq.n	80080c0 <TIM_Base_SetConfig+0xf8>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a10      	ldr	r2, [pc, #64]	; (80080f4 <TIM_Base_SetConfig+0x12c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d003      	beq.n	80080c0 <TIM_Base_SetConfig+0xf8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a0f      	ldr	r2, [pc, #60]	; (80080f8 <TIM_Base_SetConfig+0x130>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d103      	bne.n	80080c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	615a      	str	r2, [r3, #20]
}
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40000400 	.word	0x40000400
 80080e4:	40000800 	.word	0x40000800
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	40013400 	.word	0x40013400
 80080f0:	40014000 	.word	0x40014000
 80080f4:	40014400 	.word	0x40014400
 80080f8:	40014800 	.word	0x40014800

080080fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e040      	b.n	80081cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fa fec8 	bl	8002ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0201 	bic.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8c0 	bl	80082fc <UART_SetConfig>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e022      	b.n	80081cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc54 	bl	8008a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0201 	orr.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fcdb 	bl	8008b80 <UART_CheckIdleState>
 80081ca:	4603      	mov	r3, r0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	f040 8081 	bne.w	80082f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_UART_Transmit+0x26>
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e079      	b.n	80082f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_UART_Transmit+0x38>
 8008208:	2302      	movs	r3, #2
 800820a:	e072      	b.n	80082f2 <HAL_UART_Transmit+0x11e>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2221      	movs	r2, #33	; 0x21
 800821e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008220:	f7fc fe2c 	bl	8004e7c <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	88fa      	ldrh	r2, [r7, #6]
 800822a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823e:	d108      	bne.n	8008252 <HAL_UART_Transmit+0x7e>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d104      	bne.n	8008252 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	61bb      	str	r3, [r7, #24]
 8008250:	e003      	b.n	800825a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008262:	e02d      	b.n	80082c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2200      	movs	r2, #0
 800826c:	2180      	movs	r1, #128	; 0x80
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fccb 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e039      	b.n	80082f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008290:	b292      	uxth	r2, r2
 8008292:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	3302      	adds	r3, #2
 8008298:	61bb      	str	r3, [r7, #24]
 800829a:	e008      	b.n	80082ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	b292      	uxth	r2, r2
 80082a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1cb      	bne.n	8008264 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2200      	movs	r2, #0
 80082d4:	2140      	movs	r1, #64	; 0x40
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fc97 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e005      	b.n	80082f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e000      	b.n	80082f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
  }
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008300:	b0a0      	sub	sp, #128	; 0x80
 8008302:	af00      	add	r7, sp, #0
 8008304:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008306:	2300      	movs	r3, #0
 8008308:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008310:	2300      	movs	r3, #0
 8008312:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	431a      	orrs	r2, r3
 800831e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	431a      	orrs	r2, r3
 8008324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	4313      	orrs	r3, r2
 800832a:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800832c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	49a4      	ldr	r1, [pc, #656]	; (80085c4 <UART_SetConfig+0x2c8>)
 8008334:	4019      	ands	r1, r3
 8008336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800833c:	430b      	orrs	r3, r1
 800833e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800834a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800834c:	68d9      	ldr	r1, [r3, #12]
 800834e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	ea40 0301 	orr.w	r3, r0, r1
 8008356:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800835e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b99      	ldr	r3, [pc, #612]	; (80085c8 <UART_SetConfig+0x2cc>)
 8008364:	429a      	cmp	r2, r3
 8008366:	d004      	beq.n	8008372 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836a:	6a1a      	ldr	r2, [r3, #32]
 800836c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800836e:	4313      	orrs	r3, r2
 8008370:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800837c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008382:	430b      	orrs	r3, r1
 8008384:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b90      	ldr	r3, [pc, #576]	; (80085cc <UART_SetConfig+0x2d0>)
 800838c:	429a      	cmp	r2, r3
 800838e:	d125      	bne.n	80083dc <UART_SetConfig+0xe0>
 8008390:	4b8f      	ldr	r3, [pc, #572]	; (80085d0 <UART_SetConfig+0x2d4>)
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d81a      	bhi.n	80083d4 <UART_SetConfig+0xd8>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0xa8>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083ba:	e116      	b.n	80085ea <UART_SetConfig+0x2ee>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083c2:	e112      	b.n	80085ea <UART_SetConfig+0x2ee>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083ca:	e10e      	b.n	80085ea <UART_SetConfig+0x2ee>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083d2:	e10a      	b.n	80085ea <UART_SetConfig+0x2ee>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80083da:	e106      	b.n	80085ea <UART_SetConfig+0x2ee>
 80083dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	4b7c      	ldr	r3, [pc, #496]	; (80085d4 <UART_SetConfig+0x2d8>)
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d138      	bne.n	8008458 <UART_SetConfig+0x15c>
 80083e6:	4b7a      	ldr	r3, [pc, #488]	; (80085d0 <UART_SetConfig+0x2d4>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	f003 030c 	and.w	r3, r3, #12
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d82d      	bhi.n	8008450 <UART_SetConfig+0x154>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <UART_SetConfig+0x100>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008431 	.word	0x08008431
 8008400:	08008451 	.word	0x08008451
 8008404:	08008451 	.word	0x08008451
 8008408:	08008451 	.word	0x08008451
 800840c:	08008441 	.word	0x08008441
 8008410:	08008451 	.word	0x08008451
 8008414:	08008451 	.word	0x08008451
 8008418:	08008451 	.word	0x08008451
 800841c:	08008439 	.word	0x08008439
 8008420:	08008451 	.word	0x08008451
 8008424:	08008451 	.word	0x08008451
 8008428:	08008451 	.word	0x08008451
 800842c:	08008449 	.word	0x08008449
 8008430:	2300      	movs	r3, #0
 8008432:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008436:	e0d8      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008438:	2302      	movs	r3, #2
 800843a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800843e:	e0d4      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008446:	e0d0      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800844e:	e0cc      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008456:	e0c8      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	4b5e      	ldr	r3, [pc, #376]	; (80085d8 <UART_SetConfig+0x2dc>)
 800845e:	429a      	cmp	r2, r3
 8008460:	d125      	bne.n	80084ae <UART_SetConfig+0x1b2>
 8008462:	4b5b      	ldr	r3, [pc, #364]	; (80085d0 <UART_SetConfig+0x2d4>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d016      	beq.n	800849e <UART_SetConfig+0x1a2>
 8008470:	2b30      	cmp	r3, #48	; 0x30
 8008472:	d818      	bhi.n	80084a6 <UART_SetConfig+0x1aa>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d00a      	beq.n	800848e <UART_SetConfig+0x192>
 8008478:	2b20      	cmp	r3, #32
 800847a:	d814      	bhi.n	80084a6 <UART_SetConfig+0x1aa>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <UART_SetConfig+0x18a>
 8008480:	2b10      	cmp	r3, #16
 8008482:	d008      	beq.n	8008496 <UART_SetConfig+0x19a>
 8008484:	e00f      	b.n	80084a6 <UART_SetConfig+0x1aa>
 8008486:	2300      	movs	r3, #0
 8008488:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800848c:	e0ad      	b.n	80085ea <UART_SetConfig+0x2ee>
 800848e:	2302      	movs	r3, #2
 8008490:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008494:	e0a9      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008496:	2304      	movs	r3, #4
 8008498:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800849c:	e0a5      	b.n	80085ea <UART_SetConfig+0x2ee>
 800849e:	2308      	movs	r3, #8
 80084a0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084a4:	e0a1      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084a6:	2310      	movs	r3, #16
 80084a8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084ac:	e09d      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b4a      	ldr	r3, [pc, #296]	; (80085dc <UART_SetConfig+0x2e0>)
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d125      	bne.n	8008504 <UART_SetConfig+0x208>
 80084b8:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <UART_SetConfig+0x2d4>)
 80084ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084c2:	2bc0      	cmp	r3, #192	; 0xc0
 80084c4:	d016      	beq.n	80084f4 <UART_SetConfig+0x1f8>
 80084c6:	2bc0      	cmp	r3, #192	; 0xc0
 80084c8:	d818      	bhi.n	80084fc <UART_SetConfig+0x200>
 80084ca:	2b80      	cmp	r3, #128	; 0x80
 80084cc:	d00a      	beq.n	80084e4 <UART_SetConfig+0x1e8>
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d814      	bhi.n	80084fc <UART_SetConfig+0x200>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <UART_SetConfig+0x1e0>
 80084d6:	2b40      	cmp	r3, #64	; 0x40
 80084d8:	d008      	beq.n	80084ec <UART_SetConfig+0x1f0>
 80084da:	e00f      	b.n	80084fc <UART_SetConfig+0x200>
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084e2:	e082      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084ea:	e07e      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084f2:	e07a      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80084fa:	e076      	b.n	80085ea <UART_SetConfig+0x2ee>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008502:	e072      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b35      	ldr	r3, [pc, #212]	; (80085e0 <UART_SetConfig+0x2e4>)
 800850a:	429a      	cmp	r2, r3
 800850c:	d12a      	bne.n	8008564 <UART_SetConfig+0x268>
 800850e:	4b30      	ldr	r3, [pc, #192]	; (80085d0 <UART_SetConfig+0x2d4>)
 8008510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851c:	d01a      	beq.n	8008554 <UART_SetConfig+0x258>
 800851e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008522:	d81b      	bhi.n	800855c <UART_SetConfig+0x260>
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d00c      	beq.n	8008544 <UART_SetConfig+0x248>
 800852a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800852e:	d815      	bhi.n	800855c <UART_SetConfig+0x260>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <UART_SetConfig+0x240>
 8008534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008538:	d008      	beq.n	800854c <UART_SetConfig+0x250>
 800853a:	e00f      	b.n	800855c <UART_SetConfig+0x260>
 800853c:	2300      	movs	r3, #0
 800853e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008542:	e052      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008544:	2302      	movs	r3, #2
 8008546:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800854a:	e04e      	b.n	80085ea <UART_SetConfig+0x2ee>
 800854c:	2304      	movs	r3, #4
 800854e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008552:	e04a      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008554:	2308      	movs	r3, #8
 8008556:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800855a:	e046      	b.n	80085ea <UART_SetConfig+0x2ee>
 800855c:	2310      	movs	r3, #16
 800855e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008562:	e042      	b.n	80085ea <UART_SetConfig+0x2ee>
 8008564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <UART_SetConfig+0x2cc>)
 800856a:	429a      	cmp	r2, r3
 800856c:	d13a      	bne.n	80085e4 <UART_SetConfig+0x2e8>
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <UART_SetConfig+0x2d4>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800857c:	d01a      	beq.n	80085b4 <UART_SetConfig+0x2b8>
 800857e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008582:	d81b      	bhi.n	80085bc <UART_SetConfig+0x2c0>
 8008584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008588:	d00c      	beq.n	80085a4 <UART_SetConfig+0x2a8>
 800858a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800858e:	d815      	bhi.n	80085bc <UART_SetConfig+0x2c0>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <UART_SetConfig+0x2a0>
 8008594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008598:	d008      	beq.n	80085ac <UART_SetConfig+0x2b0>
 800859a:	e00f      	b.n	80085bc <UART_SetConfig+0x2c0>
 800859c:	2300      	movs	r3, #0
 800859e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80085a2:	e022      	b.n	80085ea <UART_SetConfig+0x2ee>
 80085a4:	2302      	movs	r3, #2
 80085a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80085aa:	e01e      	b.n	80085ea <UART_SetConfig+0x2ee>
 80085ac:	2304      	movs	r3, #4
 80085ae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80085b2:	e01a      	b.n	80085ea <UART_SetConfig+0x2ee>
 80085b4:	2308      	movs	r3, #8
 80085b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80085ba:	e016      	b.n	80085ea <UART_SetConfig+0x2ee>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80085c2:	e012      	b.n	80085ea <UART_SetConfig+0x2ee>
 80085c4:	efff69f3 	.word	0xefff69f3
 80085c8:	40008000 	.word	0x40008000
 80085cc:	40013800 	.word	0x40013800
 80085d0:	40021000 	.word	0x40021000
 80085d4:	40004400 	.word	0x40004400
 80085d8:	40004800 	.word	0x40004800
 80085dc:	40004c00 	.word	0x40004c00
 80085e0:	40005000 	.word	0x40005000
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4bb6      	ldr	r3, [pc, #728]	; (80088c8 <UART_SetConfig+0x5cc>)
 80085f0:	429a      	cmp	r2, r3
 80085f2:	f040 810c 	bne.w	800880e <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085f6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d823      	bhi.n	8008646 <UART_SetConfig+0x34a>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <UART_SetConfig+0x308>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008629 	.word	0x08008629
 8008608:	08008647 	.word	0x08008647
 800860c:	08008631 	.word	0x08008631
 8008610:	08008647 	.word	0x08008647
 8008614:	08008637 	.word	0x08008637
 8008618:	08008647 	.word	0x08008647
 800861c:	08008647 	.word	0x08008647
 8008620:	08008647 	.word	0x08008647
 8008624:	0800863f 	.word	0x0800863f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008628:	f7fe fb84 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 800862c:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800862e:	e00e      	b.n	800864e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8008630:	4ba6      	ldr	r3, [pc, #664]	; (80088cc <UART_SetConfig+0x5d0>)
 8008632:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8008634:	e00b      	b.n	800864e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8008636:	f7fe fae5 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 800863a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800863c:	e007      	b.n	800864e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008642:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8008644:	e003      	b.n	800864e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800864c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800864e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 81e5 	beq.w	8008a20 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	441a      	add	r2, r3
 8008660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008662:	4293      	cmp	r3, r2
 8008664:	d305      	bcc.n	8008672 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800866c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866e:	4293      	cmp	r3, r2
 8008670:	d903      	bls.n	800867a <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008678:	e1d2      	b.n	8008a20 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 800867a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800867e:	2b08      	cmp	r3, #8
 8008680:	f200 80b0 	bhi.w	80087e4 <UART_SetConfig+0x4e8>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x390>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080087e5 	.word	0x080087e5
 8008694:	08008711 	.word	0x08008711
 8008698:	080087e5 	.word	0x080087e5
 800869c:	08008751 	.word	0x08008751
 80086a0:	080087e5 	.word	0x080087e5
 80086a4:	080087e5 	.word	0x080087e5
 80086a8:	080087e5 	.word	0x080087e5
 80086ac:	080087ad 	.word	0x080087ad
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fe fb40 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 80086b4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80086b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086b8:	2200      	movs	r2, #0
 80086ba:	4698      	mov	r8, r3
 80086bc:	4691      	mov	r9, r2
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80086ca:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80086ce:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80086d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80086d4:	6849      	ldr	r1, [r1, #4]
 80086d6:	0849      	lsrs	r1, r1, #1
 80086d8:	2000      	movs	r0, #0
 80086da:	6539      	str	r1, [r7, #80]	; 0x50
 80086dc:	6578      	str	r0, [r7, #84]	; 0x54
 80086de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80086e2:	4621      	mov	r1, r4
 80086e4:	1851      	adds	r1, r2, r1
 80086e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80086e8:	4629      	mov	r1, r5
 80086ea:	eb43 0101 	adc.w	r1, r3, r1
 80086ee:	64f9      	str	r1, [r7, #76]	; 0x4c
 80086f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	643b      	str	r3, [r7, #64]	; 0x40
 80086f8:	647a      	str	r2, [r7, #68]	; 0x44
 80086fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008702:	f7f8 fa61 	bl	8000bc8 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4613      	mov	r3, r2
 800870c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800870e:	e06d      	b.n	80087ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8008710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	2200      	movs	r2, #0
 8008718:	63bb      	str	r3, [r7, #56]	; 0x38
 800871a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800871c:	4b6c      	ldr	r3, [pc, #432]	; (80088d0 <UART_SetConfig+0x5d4>)
 800871e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008722:	4602      	mov	r2, r0
 8008724:	18d3      	adds	r3, r2, r3
 8008726:	633b      	str	r3, [r7, #48]	; 0x30
 8008728:	460b      	mov	r3, r1
 800872a:	f143 0300 	adc.w	r3, r3, #0
 800872e:	637b      	str	r3, [r7, #52]	; 0x34
 8008730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
 8008738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800873a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800873e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008742:	f7f8 fa41 	bl	8000bc8 <__aeabi_uldivmod>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4613      	mov	r3, r2
 800874c:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 800874e:	e04d      	b.n	80087ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8008750:	f7fe fa58 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8008754:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008758:	2200      	movs	r2, #0
 800875a:	461c      	mov	r4, r3
 800875c:	4615      	mov	r5, r2
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	022b      	lsls	r3, r5, #8
 8008768:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800876c:	0222      	lsls	r2, r4, #8
 800876e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008770:	6849      	ldr	r1, [r1, #4]
 8008772:	0849      	lsrs	r1, r1, #1
 8008774:	2000      	movs	r0, #0
 8008776:	6239      	str	r1, [r7, #32]
 8008778:	6278      	str	r0, [r7, #36]	; 0x24
 800877a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800877e:	4621      	mov	r1, r4
 8008780:	1851      	adds	r1, r2, r1
 8008782:	61b9      	str	r1, [r7, #24]
 8008784:	4629      	mov	r1, r5
 8008786:	eb43 0101 	adc.w	r1, r3, r1
 800878a:	61f9      	str	r1, [r7, #28]
 800878c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	617a      	str	r2, [r7, #20]
 8008796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800879a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800879e:	f7f8 fa13 	bl	8000bc8 <__aeabi_uldivmod>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4613      	mov	r3, r2
 80087a8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80087aa:	e01f      	b.n	80087ec <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80087ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	2200      	movs	r2, #0
 80087b4:	469a      	mov	sl, r3
 80087b6:	4693      	mov	fp, r2
 80087b8:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 80087bc:	60bb      	str	r3, [r7, #8]
 80087be:	f14b 0300 	adc.w	r3, fp, #0
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087d6:	f7f8 f9f7 	bl	8000bc8 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4613      	mov	r3, r2
 80087e0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 80087e2:	e003      	b.n	80087ec <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 80087ea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087f2:	d308      	bcc.n	8008806 <UART_SetConfig+0x50a>
 80087f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087fa:	d204      	bcs.n	8008806 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 80087fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	e10c      	b.n	8008a20 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800880c:	e108      	b.n	8008a20 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008816:	f040 808f 	bne.w	8008938 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 800881a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800881e:	2b08      	cmp	r3, #8
 8008820:	d864      	bhi.n	80088ec <UART_SetConfig+0x5f0>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x52c>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	0800884d 	.word	0x0800884d
 800882c:	0800886d 	.word	0x0800886d
 8008830:	0800888d 	.word	0x0800888d
 8008834:	080088ed 	.word	0x080088ed
 8008838:	080088a9 	.word	0x080088a9
 800883c:	080088ed 	.word	0x080088ed
 8008840:	080088ed 	.word	0x080088ed
 8008844:	080088ed 	.word	0x080088ed
 8008848:	080088d5 	.word	0x080088d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800884c:	f7fe fa72 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8008850:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008854:	005a      	lsls	r2, r3, #1
 8008856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800886a:	e043      	b.n	80088f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886c:	f7fe fa78 	bl	8006d60 <HAL_RCC_GetPCLK2Freq>
 8008870:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008874:	005a      	lsls	r2, r3, #1
 8008876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	441a      	add	r2, r3
 800887e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	fbb2 f3f3 	udiv	r3, r2, r3
 8008886:	b29b      	uxth	r3, r3
 8008888:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 800888a:	e033      	b.n	80088f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800888c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8008896:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800889a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800889c:	6852      	ldr	r2, [r2, #4]
 800889e:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80088a6:	e025      	b.n	80088f4 <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a8:	f7fe f9ac 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 80088ac:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088b0:	005a      	lsls	r2, r3, #1
 80088b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	441a      	add	r2, r3
 80088ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80088c6:	e015      	b.n	80088f4 <UART_SetConfig+0x5f8>
 80088c8:	40008000 	.word	0x40008000
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80088d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	085b      	lsrs	r3, r3, #1
 80088da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80088de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80088ea:	e003      	b.n	80088f4 <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 80088f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d91a      	bls.n	8008930 <UART_SetConfig+0x634>
 80088fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d216      	bcs.n	8008930 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008904:	b29b      	uxth	r3, r3
 8008906:	f023 030f 	bic.w	r3, r3, #15
 800890a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800890e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008910:	085b      	lsrs	r3, r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	b29a      	uxth	r2, r3
 800891a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800891e:	4313      	orrs	r3, r2
 8008920:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 8008924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800892c:	60da      	str	r2, [r3, #12]
 800892e:	e077      	b.n	8008a20 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008936:	e073      	b.n	8008a20 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8008938:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800893c:	2b08      	cmp	r3, #8
 800893e:	d85c      	bhi.n	80089fa <UART_SetConfig+0x6fe>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x64c>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800896d 	.word	0x0800896d
 800894c:	0800898b 	.word	0x0800898b
 8008950:	080089a9 	.word	0x080089a9
 8008954:	080089fb 	.word	0x080089fb
 8008958:	080089c5 	.word	0x080089c5
 800895c:	080089fb 	.word	0x080089fb
 8008960:	080089fb 	.word	0x080089fb
 8008964:	080089fb 	.word	0x080089fb
 8008968:	080089e3 	.word	0x080089e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fe f9e2 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8008970:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	085a      	lsrs	r2, r3, #1
 8008978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800897a:	441a      	add	r2, r3
 800897c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	fbb2 f3f3 	udiv	r3, r2, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8008988:	e03b      	b.n	8008a02 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800898a:	f7fe f9e9 	bl	8006d60 <HAL_RCC_GetPCLK2Freq>
 800898e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	085a      	lsrs	r2, r3, #1
 8008996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008998:	441a      	add	r2, r3
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80089a6:	e02c      	b.n	8008a02 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80089a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80089b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80089b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089b8:	6852      	ldr	r2, [r2, #4]
 80089ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80089c2:	e01e      	b.n	8008a02 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089c4:	f7fe f91e 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 80089c8:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	085a      	lsrs	r2, r3, #1
 80089d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089d2:	441a      	add	r2, r3
 80089d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80089e0:	e00f      	b.n	8008a02 <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80089e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80089ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	677b      	str	r3, [r7, #116]	; 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 80089f8:	e003      	b.n	8008a02 <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8008a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a04:	2b0f      	cmp	r3, #15
 8008a06:	d908      	bls.n	8008a1a <UART_SetConfig+0x71e>
 8008a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0e:	d204      	bcs.n	8008a1a <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8008a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a16:	60da      	str	r2, [r3, #12]
 8008a18:	e002      	b.n	8008a20 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a22:	2200      	movs	r2, #0
 8008a24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a28:	2200      	movs	r2, #0
 8008a2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008a2c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3780      	adds	r7, #128	; 0x80
 8008a34:	46bd      	mov	sp, r7
 8008a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a3a:	bf00      	nop

08008a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00a      	beq.n	8008a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01a      	beq.n	8008b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3a:	d10a      	bne.n	8008b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
  }
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b8e:	f7fc f975 	bl	8004e7c <HAL_GetTick>
 8008b92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d10e      	bne.n	8008bc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f82a 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e020      	b.n	8008c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d10e      	bne.n	8008bec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f814 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e00a      	b.n	8008c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4613      	mov	r3, r2
 8008c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1a:	e05d      	b.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d059      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c24:	f7fc f92a 	bl	8004e7c <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11b      	bne.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e042      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d02b      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8e:	d123      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ca8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0201 	bic.w	r2, r2, #1
 8008cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e00f      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69da      	ldr	r2, [r3, #28]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d092      	beq.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	482c      	ldr	r0, [pc, #176]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d10:	f000 fc50 	bl	80095b4 <ai_platform_get_activations_map>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d047      	beq.n	8008daa <network_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 8008d1a:	4b29      	ldr	r3, [pc, #164]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8008d22:	4a28      	ldr	r2, [pc, #160]	; (8008dc4 <network_configure_activations+0xc4>)
 8008d24:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 8008d26:	4b26      	ldr	r3, [pc, #152]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8008d2e:	4a25      	ldr	r2, [pc, #148]	; (8008dc4 <network_configure_activations+0xc4>)
 8008d30:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 8008d32:	4b23      	ldr	r3, [pc, #140]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3320      	adds	r3, #32
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <network_configure_activations+0xc8>)
 8008d3a:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 8008d3c:	4b20      	ldr	r3, [pc, #128]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3320      	adds	r3, #32
 8008d42:	4a21      	ldr	r2, [pc, #132]	; (8008dc8 <network_configure_activations+0xc8>)
 8008d44:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008d46:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <network_configure_activations+0xcc>)
 8008d4c:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008d4e:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a1e      	ldr	r2, [pc, #120]	; (8008dcc <network_configure_activations+0xcc>)
 8008d54:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <network_configure_activations+0xd0>)
 8008d60:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 8008d62:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8008d6a:	4a19      	ldr	r2, [pc, #100]	; (8008dd0 <network_configure_activations+0xd0>)
 8008d6c:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008d6e:	4b14      	ldr	r3, [pc, #80]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a18      	ldr	r2, [pc, #96]	; (8008dd4 <network_configure_activations+0xd4>)
 8008d74:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008d76:	4b12      	ldr	r3, [pc, #72]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a16      	ldr	r2, [pc, #88]	; (8008dd4 <network_configure_activations+0xd4>)
 8008d7c:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d86:	4a14      	ldr	r2, [pc, #80]	; (8008dd8 <network_configure_activations+0xd8>)
 8008d88:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d92:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <network_configure_activations+0xd8>)
 8008d94:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8008d96:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <network_configure_activations+0xc0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a10      	ldr	r2, [pc, #64]	; (8008ddc <network_configure_activations+0xdc>)
 8008d9c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8008d9e:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <network_configure_activations+0xc0>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a0e      	ldr	r2, [pc, #56]	; (8008ddc <network_configure_activations+0xdc>)
 8008da4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e005      	b.n	8008db6 <network_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008daa:	2213      	movs	r2, #19
 8008dac:	2130      	movs	r1, #48	; 0x30
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fce4 	bl	800977c <ai_platform_network_set_error>
  return false;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20003fdc 	.word	0x20003fdc
 8008dc4:	20000178 	.word	0x20000178
 8008dc8:	20000188 	.word	0x20000188
 8008dcc:	200001a8 	.word	0x200001a8
 8008dd0:	200001b8 	.word	0x200001b8
 8008dd4:	200001d8 	.word	0x200001d8
 8008dd8:	200001e8 	.word	0x200001e8
 8008ddc:	20000208 	.word	0x20000208

08008de0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	2101      	movs	r1, #1
 8008dee:	4850      	ldr	r0, [pc, #320]	; (8008f30 <network_configure_weights+0x150>)
 8008df0:	f000 fb8c 	bl	800950c <ai_platform_get_weights_map>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8090 	beq.w	8008f1c <network_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008dfc:	4b4d      	ldr	r3, [pc, #308]	; (8008f34 <network_configure_weights+0x154>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e04:	4a4b      	ldr	r2, [pc, #300]	; (8008f34 <network_configure_weights+0x154>)
 8008e06:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8008e08:	4b49      	ldr	r3, [pc, #292]	; (8008f30 <network_configure_weights+0x150>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a49      	ldr	r2, [pc, #292]	; (8008f34 <network_configure_weights+0x154>)
 8008e0e:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8008e10:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <network_configure_weights+0x150>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a47      	ldr	r2, [pc, #284]	; (8008f34 <network_configure_weights+0x154>)
 8008e16:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e18:	4b47      	ldr	r3, [pc, #284]	; (8008f38 <network_configure_weights+0x158>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e20:	4a45      	ldr	r2, [pc, #276]	; (8008f38 <network_configure_weights+0x158>)
 8008e22:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 12);
 8008e24:	4b42      	ldr	r3, [pc, #264]	; (8008f30 <network_configure_weights+0x150>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	4a43      	ldr	r2, [pc, #268]	; (8008f38 <network_configure_weights+0x158>)
 8008e2c:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 12);
 8008e2e:	4b40      	ldr	r3, [pc, #256]	; (8008f30 <network_configure_weights+0x150>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	4a40      	ldr	r2, [pc, #256]	; (8008f38 <network_configure_weights+0x158>)
 8008e36:	60d3      	str	r3, [r2, #12]
    
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e38:	4b40      	ldr	r3, [pc, #256]	; (8008f3c <network_configure_weights+0x15c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e40:	4a3e      	ldr	r2, [pc, #248]	; (8008f3c <network_configure_weights+0x15c>)
 8008e42:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 588);
 8008e44:	4b3a      	ldr	r3, [pc, #232]	; (8008f30 <network_configure_weights+0x150>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008e4c:	4a3b      	ldr	r2, [pc, #236]	; (8008f3c <network_configure_weights+0x15c>)
 8008e4e:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 588);
 8008e50:	4b37      	ldr	r3, [pc, #220]	; (8008f30 <network_configure_weights+0x150>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8008e58:	4a38      	ldr	r2, [pc, #224]	; (8008f3c <network_configure_weights+0x15c>)
 8008e5a:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8008e5c:	4b38      	ldr	r3, [pc, #224]	; (8008f40 <network_configure_weights+0x160>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e64:	4a36      	ldr	r2, [pc, #216]	; (8008f40 <network_configure_weights+0x160>)
 8008e66:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 652);
 8008e68:	4b31      	ldr	r3, [pc, #196]	; (8008f30 <network_configure_weights+0x150>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e70:	4a33      	ldr	r2, [pc, #204]	; (8008f40 <network_configure_weights+0x160>)
 8008e72:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 652);
 8008e74:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <network_configure_weights+0x150>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e7c:	4a30      	ldr	r2, [pc, #192]	; (8008f40 <network_configure_weights+0x160>)
 8008e7e:	60d3      	str	r3, [r2, #12]
    
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8008e80:	4b30      	ldr	r3, [pc, #192]	; (8008f44 <network_configure_weights+0x164>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e88:	4a2e      	ldr	r2, [pc, #184]	; (8008f44 <network_configure_weights+0x164>)
 8008e8a:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2188);
 8008e8c:	4b28      	ldr	r3, [pc, #160]	; (8008f30 <network_configure_weights+0x150>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8008e94:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <network_configure_weights+0x164>)
 8008e96:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2188);
 8008e98:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <network_configure_weights+0x150>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 8008ea0:	4a28      	ldr	r2, [pc, #160]	; (8008f44 <network_configure_weights+0x164>)
 8008ea2:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <network_configure_weights+0x168>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eac:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <network_configure_weights+0x168>)
 8008eae:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2220);
 8008eb0:	4b1f      	ldr	r3, [pc, #124]	; (8008f30 <network_configure_weights+0x150>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f603 03ac 	addw	r3, r3, #2220	; 0x8ac
 8008eb8:	4a23      	ldr	r2, [pc, #140]	; (8008f48 <network_configure_weights+0x168>)
 8008eba:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2220);
 8008ebc:	4b1c      	ldr	r3, [pc, #112]	; (8008f30 <network_configure_weights+0x150>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f603 03ac 	addw	r3, r3, #2220	; 0x8ac
 8008ec4:	4a20      	ldr	r2, [pc, #128]	; (8008f48 <network_configure_weights+0x168>)
 8008ec6:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8008ec8:	4b20      	ldr	r3, [pc, #128]	; (8008f4c <network_configure_weights+0x16c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ed0:	4a1e      	ldr	r2, [pc, #120]	; (8008f4c <network_configure_weights+0x16c>)
 8008ed2:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47276);
 8008ed4:	4b16      	ldr	r3, [pc, #88]	; (8008f30 <network_configure_weights+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8008edc:	33ac      	adds	r3, #172	; 0xac
 8008ede:	4a1b      	ldr	r2, [pc, #108]	; (8008f4c <network_configure_weights+0x16c>)
 8008ee0:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47276);
 8008ee2:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <network_configure_weights+0x150>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8008eea:	33ac      	adds	r3, #172	; 0xac
 8008eec:	4a17      	ldr	r2, [pc, #92]	; (8008f4c <network_configure_weights+0x16c>)
 8008eee:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <network_configure_weights+0x170>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef8:	4a15      	ldr	r2, [pc, #84]	; (8008f50 <network_configure_weights+0x170>)
 8008efa:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47532);
 8008efc:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <network_configure_weights+0x150>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8008f04:	33ac      	adds	r3, #172	; 0xac
 8008f06:	4a12      	ldr	r2, [pc, #72]	; (8008f50 <network_configure_weights+0x170>)
 8008f08:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47532);
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <network_configure_weights+0x150>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8008f12:	33ac      	adds	r3, #172	; 0xac
 8008f14:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <network_configure_weights+0x170>)
 8008f16:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e005      	b.n	8008f28 <network_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8008f1c:	2212      	movs	r2, #18
 8008f1e:	2130      	movs	r1, #48	; 0x30
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc2b 	bl	800977c <ai_platform_network_set_error>
  return false;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20003fe0 	.word	0x20003fe0
 8008f34:	20000138 	.word	0x20000138
 8008f38:	20000148 	.word	0x20000148
 8008f3c:	20000158 	.word	0x20000158
 8008f40:	20000168 	.word	0x20000168
 8008f44:	20000198 	.word	0x20000198
 8008f48:	200001c8 	.word	0x200001c8
 8008f4c:	200001f8 	.word	0x200001f8
 8008f50:	20000218 	.word	0x20000218

08008f54 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fb9f 	bl	80096a0 <ai_platform_network_get_error>
 8008f62:	4603      	mov	r3, r0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008f76:	2300      	movs	r3, #0
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	2305      	movs	r3, #5
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	2301      	movs	r3, #1
 8008f80:	4a04      	ldr	r2, [pc, #16]	; (8008f94 <ai_network_create+0x28>)
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fda5 	bl	8009ad4 <ai_platform_network_create>
 8008f8a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	200008e8 	.word	0x200008e8

08008f98 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b096      	sub	sp, #88	; 0x58
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f7ff ffe0 	bl	8008f6c <ai_network_create>
 8008fac:	4603      	mov	r3, r0
 8008fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8008fb0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <ai_network_create_and_init+0x24>
        return err;
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fba:	e05d      	b.n	8009078 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f8dd 	bl	8009180 <ai_network_data_params_get>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f083 0301 	eor.w	r3, r3, #1
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d008      	beq.n	8008fe4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff ffbc 	bl	8008f54 <ai_network_get_error>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8008fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe2:	e049      	b.n	8009078 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d016      	beq.n	8009018 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8008fea:	2300      	movs	r3, #0
 8008fec:	657b      	str	r3, [r7, #84]	; 0x54
 8008fee:	e00e      	b.n	800900e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8008ff0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f107 0314 	add.w	r3, r7, #20
 8009000:	330c      	adds	r3, #12
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fa6e 	bl	80094e4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8009008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800900a:	3301      	adds	r3, #1
 800900c:	657b      	str	r3, [r7, #84]	; 0x54
 800900e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009010:	461a      	mov	r2, r3
 8009012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009014:	4293      	cmp	r3, r2
 8009016:	dbeb      	blt.n	8008ff0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d016      	beq.n	800904c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800901e:	2300      	movs	r3, #0
 8009020:	653b      	str	r3, [r7, #80]	; 0x50
 8009022:	e00e      	b.n	8009042 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8009024:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	f107 0314 	add.w	r3, r7, #20
 8009034:	3304      	adds	r3, #4
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa54 	bl	80094e4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800903c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903e:	3301      	adds	r3, #1
 8009040:	653b      	str	r3, [r7, #80]	; 0x50
 8009042:	8b7b      	ldrh	r3, [r7, #26]
 8009044:	461a      	mov	r2, r3
 8009046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009048:	4293      	cmp	r3, r2
 800904a:	dbeb      	blt.n	8009024 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f107 0214 	add.w	r2, r7, #20
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f846 	bl	80090e8 <ai_network_init>
 800905c:	4603      	mov	r3, r0
 800905e:	f083 0301 	eor.w	r3, r3, #1
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d006      	beq.n	8009076 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff ff71 	bl	8008f54 <ai_network_get_error>
 8009072:	4603      	mov	r3, r0
 8009074:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8009076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009078:	4618      	mov	r0, r3
 800907a:	3758      	adds	r7, #88	; 0x58
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <ai_network_inputs_get+0x2c>)
 8009092:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <ai_network_inputs_get+0x30>)
 8009098:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fb73 	bl	8009788 <ai_platform_inputs_get>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200008e8 	.word	0x200008e8
 80090b0:	a1c00100 	.word	0xa1c00100

080090b4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80090c4:	4b06      	ldr	r3, [pc, #24]	; (80090e0 <ai_network_outputs_get+0x2c>)
 80090c6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a06      	ldr	r2, [pc, #24]	; (80090e4 <ai_network_outputs_get+0x30>)
 80090cc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc2f 	bl	8009934 <ai_platform_outputs_get>
 80090d6:	4603      	mov	r3, r0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	200008e8 	.word	0x200008e8
 80090e4:	a1c00100 	.word	0xa1c00100

080090e8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fdc3 	bl	8009c80 <ai_platform_network_init>
 80090fa:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <ai_network_init+0x1e>
 8009102:	2300      	movs	r3, #0
 8009104:	e028      	b.n	8009158 <ai_network_init+0x70>

  ai_bool ok = true;
 8009106:	2301      	movs	r3, #1
 8009108:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff fe67 	bl	8008de0 <network_configure_weights>
 8009112:	4603      	mov	r3, r0
 8009114:	461a      	mov	r2, r3
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	4013      	ands	r3, r2
 800911a:	2b00      	cmp	r3, #0
 800911c:	bf14      	ite	ne
 800911e:	2301      	movne	r3, #1
 8009120:	2300      	moveq	r3, #0
 8009122:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff fdea 	bl	8008d00 <network_configure_activations>
 800912c:	4603      	mov	r3, r0
 800912e:	461a      	mov	r2, r3
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	bf14      	ite	ne
 8009138:	2301      	movne	r3, #1
 800913a:	2300      	moveq	r3, #0
 800913c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fe8c 	bl	8009e5c <ai_platform_network_post_init>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	7afb      	ldrb	r3, [r7, #11]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	bf14      	ite	ne
 8009150:	2301      	movne	r3, #1
 8009152:	2300      	moveq	r3, #0
 8009154:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009156:	7afb      	ldrb	r3, [r7, #11]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 fefb 	bl	8009f6c <ai_platform_network_process>
 8009176:	4603      	mov	r3, r0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <ai_network_data_params_get+0x12>
 800918e:	2300      	movs	r3, #0
 8009190:	e016      	b.n	80091c0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8009192:	4a0d      	ldr	r2, [pc, #52]	; (80091c8 <ai_network_data_params_get+0x48>)
 8009194:	f107 0310 	add.w	r3, r7, #16
 8009198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800919c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <ai_network_data_params_get+0x4c>)
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091aa:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80091ae:	f107 0210 	add.w	r2, r7, #16
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa4f 	bl	800965c <ai_platform_bind_network_params>
 80091be:	4603      	mov	r3, r0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	0800f878 	.word	0x0800f878
 80091cc:	0800f880 	.word	0x0800f880

080091d0 <findslot>:
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <findslot+0x2c>)
 80091d2:	b510      	push	{r4, lr}
 80091d4:	4604      	mov	r4, r0
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	b118      	cbz	r0, 80091e2 <findslot+0x12>
 80091da:	6983      	ldr	r3, [r0, #24]
 80091dc:	b90b      	cbnz	r3, 80091e2 <findslot+0x12>
 80091de:	f002 ffbf 	bl	800c160 <__sinit>
 80091e2:	2c13      	cmp	r4, #19
 80091e4:	d807      	bhi.n	80091f6 <findslot+0x26>
 80091e6:	4806      	ldr	r0, [pc, #24]	; (8009200 <findslot+0x30>)
 80091e8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80091ec:	3201      	adds	r2, #1
 80091ee:	d002      	beq.n	80091f6 <findslot+0x26>
 80091f0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	2000      	movs	r0, #0
 80091f8:	e7fc      	b.n	80091f4 <findslot+0x24>
 80091fa:	bf00      	nop
 80091fc:	2000098c 	.word	0x2000098c
 8009200:	2000408c 	.word	0x2000408c

08009204 <error>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	4604      	mov	r4, r0
 8009208:	f002 ff4c 	bl	800c0a4 <__errno>
 800920c:	2613      	movs	r6, #19
 800920e:	4605      	mov	r5, r0
 8009210:	2700      	movs	r7, #0
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	beab      	bkpt	0x00ab
 8009218:	4606      	mov	r6, r0
 800921a:	602e      	str	r6, [r5, #0]
 800921c:	4620      	mov	r0, r4
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009220 <checkerror>:
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d101      	bne.n	8009228 <checkerror+0x8>
 8009224:	f7ff bfee 	b.w	8009204 <error>
 8009228:	4770      	bx	lr

0800922a <_swiread>:
 800922a:	b530      	push	{r4, r5, lr}
 800922c:	b085      	sub	sp, #20
 800922e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009232:	9203      	str	r2, [sp, #12]
 8009234:	2406      	movs	r4, #6
 8009236:	ad01      	add	r5, sp, #4
 8009238:	4620      	mov	r0, r4
 800923a:	4629      	mov	r1, r5
 800923c:	beab      	bkpt	0x00ab
 800923e:	4604      	mov	r4, r0
 8009240:	4620      	mov	r0, r4
 8009242:	f7ff ffed 	bl	8009220 <checkerror>
 8009246:	b005      	add	sp, #20
 8009248:	bd30      	pop	{r4, r5, pc}

0800924a <_read>:
 800924a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800924c:	4615      	mov	r5, r2
 800924e:	9101      	str	r1, [sp, #4]
 8009250:	f7ff ffbe 	bl	80091d0 <findslot>
 8009254:	9901      	ldr	r1, [sp, #4]
 8009256:	4604      	mov	r4, r0
 8009258:	b938      	cbnz	r0, 800926a <_read+0x20>
 800925a:	f002 ff23 	bl	800c0a4 <__errno>
 800925e:	2309      	movs	r3, #9
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	f04f 30ff 	mov.w	r0, #4294967295
 8009266:	b003      	add	sp, #12
 8009268:	bd30      	pop	{r4, r5, pc}
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	462a      	mov	r2, r5
 800926e:	f7ff ffdc 	bl	800922a <_swiread>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d0f7      	beq.n	8009266 <_read+0x1c>
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	1a2a      	subs	r2, r5, r0
 800927a:	4413      	add	r3, r2
 800927c:	6063      	str	r3, [r4, #4]
 800927e:	4610      	mov	r0, r2
 8009280:	e7f1      	b.n	8009266 <_read+0x1c>

08009282 <_swilseek>:
 8009282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	4616      	mov	r6, r2
 8009288:	f7ff ffa2 	bl	80091d0 <findslot>
 800928c:	4605      	mov	r5, r0
 800928e:	b940      	cbnz	r0, 80092a2 <_swilseek+0x20>
 8009290:	f002 ff08 	bl	800c0a4 <__errno>
 8009294:	2309      	movs	r3, #9
 8009296:	6003      	str	r3, [r0, #0]
 8009298:	f04f 34ff 	mov.w	r4, #4294967295
 800929c:	4620      	mov	r0, r4
 800929e:	b003      	add	sp, #12
 80092a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a2:	2e02      	cmp	r6, #2
 80092a4:	d903      	bls.n	80092ae <_swilseek+0x2c>
 80092a6:	f002 fefd 	bl	800c0a4 <__errno>
 80092aa:	2316      	movs	r3, #22
 80092ac:	e7f3      	b.n	8009296 <_swilseek+0x14>
 80092ae:	2e01      	cmp	r6, #1
 80092b0:	d112      	bne.n	80092d8 <_swilseek+0x56>
 80092b2:	6843      	ldr	r3, [r0, #4]
 80092b4:	18e4      	adds	r4, r4, r3
 80092b6:	d4f6      	bmi.n	80092a6 <_swilseek+0x24>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	260a      	movs	r6, #10
 80092bc:	e9cd 3400 	strd	r3, r4, [sp]
 80092c0:	466f      	mov	r7, sp
 80092c2:	4630      	mov	r0, r6
 80092c4:	4639      	mov	r1, r7
 80092c6:	beab      	bkpt	0x00ab
 80092c8:	4606      	mov	r6, r0
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ffa8 	bl	8009220 <checkerror>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	dbe1      	blt.n	8009298 <_swilseek+0x16>
 80092d4:	606c      	str	r4, [r5, #4]
 80092d6:	e7e1      	b.n	800929c <_swilseek+0x1a>
 80092d8:	2e02      	cmp	r6, #2
 80092da:	d1ed      	bne.n	80092b8 <_swilseek+0x36>
 80092dc:	6803      	ldr	r3, [r0, #0]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	260c      	movs	r6, #12
 80092e2:	466f      	mov	r7, sp
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	beab      	bkpt	0x00ab
 80092ea:	4606      	mov	r6, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff ff97 	bl	8009220 <checkerror>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d0d0      	beq.n	8009298 <_swilseek+0x16>
 80092f6:	4404      	add	r4, r0
 80092f8:	e7de      	b.n	80092b8 <_swilseek+0x36>

080092fa <_lseek>:
 80092fa:	f7ff bfc2 	b.w	8009282 <_swilseek>

080092fe <_swiwrite>:
 80092fe:	b530      	push	{r4, r5, lr}
 8009300:	b085      	sub	sp, #20
 8009302:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009306:	9203      	str	r2, [sp, #12]
 8009308:	2405      	movs	r4, #5
 800930a:	ad01      	add	r5, sp, #4
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	beab      	bkpt	0x00ab
 8009312:	4604      	mov	r4, r0
 8009314:	4620      	mov	r0, r4
 8009316:	f7ff ff83 	bl	8009220 <checkerror>
 800931a:	b005      	add	sp, #20
 800931c:	bd30      	pop	{r4, r5, pc}

0800931e <_write>:
 800931e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009320:	4615      	mov	r5, r2
 8009322:	9101      	str	r1, [sp, #4]
 8009324:	f7ff ff54 	bl	80091d0 <findslot>
 8009328:	9901      	ldr	r1, [sp, #4]
 800932a:	4604      	mov	r4, r0
 800932c:	b930      	cbnz	r0, 800933c <_write+0x1e>
 800932e:	f002 feb9 	bl	800c0a4 <__errno>
 8009332:	2309      	movs	r3, #9
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	f04f 30ff 	mov.w	r0, #4294967295
 800933a:	e012      	b.n	8009362 <_write+0x44>
 800933c:	6800      	ldr	r0, [r0, #0]
 800933e:	462a      	mov	r2, r5
 8009340:	f7ff ffdd 	bl	80092fe <_swiwrite>
 8009344:	2800      	cmp	r0, #0
 8009346:	dbf6      	blt.n	8009336 <_write+0x18>
 8009348:	6862      	ldr	r2, [r4, #4]
 800934a:	1a2b      	subs	r3, r5, r0
 800934c:	441a      	add	r2, r3
 800934e:	42a8      	cmp	r0, r5
 8009350:	6062      	str	r2, [r4, #4]
 8009352:	d105      	bne.n	8009360 <_write+0x42>
 8009354:	2000      	movs	r0, #0
 8009356:	b003      	add	sp, #12
 8009358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800935c:	f7ff bf52 	b.w	8009204 <error>
 8009360:	4618      	mov	r0, r3
 8009362:	b003      	add	sp, #12
 8009364:	bd30      	pop	{r4, r5, pc}

08009366 <_swiclose>:
 8009366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009368:	2402      	movs	r4, #2
 800936a:	9001      	str	r0, [sp, #4]
 800936c:	ad01      	add	r5, sp, #4
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	beab      	bkpt	0x00ab
 8009374:	4604      	mov	r4, r0
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff ff52 	bl	8009220 <checkerror>
 800937c:	b003      	add	sp, #12
 800937e:	bd30      	pop	{r4, r5, pc}

08009380 <_close>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4605      	mov	r5, r0
 8009384:	f7ff ff24 	bl	80091d0 <findslot>
 8009388:	4604      	mov	r4, r0
 800938a:	b930      	cbnz	r0, 800939a <_close+0x1a>
 800938c:	f002 fe8a 	bl	800c0a4 <__errno>
 8009390:	2309      	movs	r3, #9
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	3d01      	subs	r5, #1
 800939c:	2d01      	cmp	r5, #1
 800939e:	d809      	bhi.n	80093b4 <_close+0x34>
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <_close+0x48>)
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d104      	bne.n	80093b4 <_close+0x34>
 80093aa:	f04f 33ff 	mov.w	r3, #4294967295
 80093ae:	6003      	str	r3, [r0, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7f1      	b.n	8009398 <_close+0x18>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	f7ff ffd6 	bl	8009366 <_swiclose>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d1ec      	bne.n	8009398 <_close+0x18>
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	e7e8      	b.n	8009398 <_close+0x18>
 80093c6:	bf00      	nop
 80093c8:	2000408c 	.word	0x2000408c

080093cc <_getpid>:
 80093cc:	2001      	movs	r0, #1
 80093ce:	4770      	bx	lr

080093d0 <_swistat>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	460c      	mov	r4, r1
 80093d4:	f7ff fefc 	bl	80091d0 <findslot>
 80093d8:	4605      	mov	r5, r0
 80093da:	b930      	cbnz	r0, 80093ea <_swistat+0x1a>
 80093dc:	f002 fe62 	bl	800c0a4 <__errno>
 80093e0:	2309      	movs	r3, #9
 80093e2:	6003      	str	r3, [r0, #0]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	bd70      	pop	{r4, r5, r6, pc}
 80093ea:	6863      	ldr	r3, [r4, #4]
 80093ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80093f8:	260c      	movs	r6, #12
 80093fa:	4630      	mov	r0, r6
 80093fc:	4629      	mov	r1, r5
 80093fe:	beab      	bkpt	0x00ab
 8009400:	4605      	mov	r5, r0
 8009402:	4628      	mov	r0, r5
 8009404:	f7ff ff0c 	bl	8009220 <checkerror>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	bf1c      	itt	ne
 800940c:	6120      	strne	r0, [r4, #16]
 800940e:	2000      	movne	r0, #0
 8009410:	e7ea      	b.n	80093e8 <_swistat+0x18>

08009412 <_fstat>:
 8009412:	460b      	mov	r3, r1
 8009414:	b510      	push	{r4, lr}
 8009416:	2100      	movs	r1, #0
 8009418:	4604      	mov	r4, r0
 800941a:	2258      	movs	r2, #88	; 0x58
 800941c:	4618      	mov	r0, r3
 800941e:	f002 ff7b 	bl	800c318 <memset>
 8009422:	4601      	mov	r1, r0
 8009424:	4620      	mov	r0, r4
 8009426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800942a:	f7ff bfd1 	b.w	80093d0 <_swistat>

0800942e <_isatty>:
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	f7ff fece 	bl	80091d0 <findslot>
 8009434:	2509      	movs	r5, #9
 8009436:	4604      	mov	r4, r0
 8009438:	b920      	cbnz	r0, 8009444 <_isatty+0x16>
 800943a:	f002 fe33 	bl	800c0a4 <__errno>
 800943e:	6005      	str	r5, [r0, #0]
 8009440:	4620      	mov	r0, r4
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	4628      	mov	r0, r5
 8009446:	4621      	mov	r1, r4
 8009448:	beab      	bkpt	0x00ab
 800944a:	4604      	mov	r4, r0
 800944c:	2c01      	cmp	r4, #1
 800944e:	d0f7      	beq.n	8009440 <_isatty+0x12>
 8009450:	f002 fe28 	bl	800c0a4 <__errno>
 8009454:	2400      	movs	r4, #0
 8009456:	4605      	mov	r5, r0
 8009458:	2613      	movs	r6, #19
 800945a:	4630      	mov	r0, r6
 800945c:	4621      	mov	r1, r4
 800945e:	beab      	bkpt	0x00ab
 8009460:	4606      	mov	r6, r0
 8009462:	602e      	str	r6, [r5, #0]
 8009464:	e7ec      	b.n	8009440 <_isatty+0x12>
	...

08009468 <ai_buffer_get_size>:
 8009468:	b378      	cbz	r0, 80094ca <ai_buffer_get_size+0x62>
 800946a:	b410      	push	{r4}
 800946c:	6803      	ldr	r3, [r0, #0]
 800946e:	4a17      	ldr	r2, [pc, #92]	; (80094cc <ai_buffer_get_size+0x64>)
 8009470:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009474:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009478:	4293      	cmp	r3, r2
 800947a:	d01e      	beq.n	80094ba <ai_buffer_get_size+0x52>
 800947c:	6984      	ldr	r4, [r0, #24]
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	7d03      	ldrb	r3, [r0, #20]
 8009482:	6941      	ldr	r1, [r0, #20]
 8009484:	f1a3 0301 	sub.w	r3, r3, #1
 8009488:	fab3 f383 	clz	r3, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8009492:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009496:	da0b      	bge.n	80094b0 <ai_buffer_get_size+0x48>
 8009498:	2b01      	cmp	r3, #1
 800949a:	d102      	bne.n	80094a2 <ai_buffer_get_size+0x3a>
 800949c:	2802      	cmp	r0, #2
 800949e:	d007      	beq.n	80094b0 <ai_buffer_get_size+0x48>
 80094a0:	2302      	movs	r3, #2
 80094a2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80094a6:	3301      	adds	r3, #1
 80094a8:	4298      	cmp	r0, r3
 80094aa:	fb01 f202 	mul.w	r2, r1, r2
 80094ae:	d1f3      	bne.n	8009498 <ai_buffer_get_size+0x30>
 80094b0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80094b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	2900      	cmp	r1, #0
 80094bc:	d0de      	beq.n	800947c <ai_buffer_get_size+0x14>
 80094be:	6984      	ldr	r4, [r0, #24]
 80094c0:	6863      	ldr	r3, [r4, #4]
 80094c2:	331f      	adds	r3, #31
 80094c4:	f023 021f 	bic.w	r2, r3, #31
 80094c8:	e7da      	b.n	8009480 <ai_buffer_get_size+0x18>
 80094ca:	4770      	bx	lr
 80094cc:	000400c0 	.word	0x000400c0

080094d0 <ai_buffer_array_sane>:
 80094d0:	b138      	cbz	r0, 80094e2 <ai_buffer_array_sane+0x12>
 80094d2:	6843      	ldr	r3, [r0, #4]
 80094d4:	b123      	cbz	r3, 80094e0 <ai_buffer_array_sane+0x10>
 80094d6:	8840      	ldrh	r0, [r0, #2]
 80094d8:	3800      	subs	r0, #0
 80094da:	bf18      	it	ne
 80094dc:	2001      	movne	r0, #1
 80094de:	4770      	bx	lr
 80094e0:	4618      	mov	r0, r3
 80094e2:	4770      	bx	lr

080094e4 <ai_buffer_array_item_set_address>:
 80094e4:	b150      	cbz	r0, 80094fc <ai_buffer_array_item_set_address+0x18>
 80094e6:	6843      	ldr	r3, [r0, #4]
 80094e8:	b14b      	cbz	r3, 80094fe <ai_buffer_array_item_set_address+0x1a>
 80094ea:	8840      	ldrh	r0, [r0, #2]
 80094ec:	b900      	cbnz	r0, 80094f0 <ai_buffer_array_item_set_address+0xc>
 80094ee:	4770      	bx	lr
 80094f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80094f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80094f8:	2001      	movs	r0, #1
 80094fa:	604a      	str	r2, [r1, #4]
 80094fc:	4770      	bx	lr
 80094fe:	4618      	mov	r0, r3
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <_ai_platform_acquire_crc>:
 8009504:	2001      	movs	r0, #1
 8009506:	4770      	bx	lr

08009508 <_ai_platform_release_crc>:
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop

0800950c <ai_platform_get_weights_map>:
 800950c:	2a00      	cmp	r2, #0
 800950e:	d037      	beq.n	8009580 <ai_platform_get_weights_map+0x74>
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	b1a0      	cbz	r0, 8009540 <ai_platform_get_weights_map+0x34>
 8009516:	460f      	mov	r7, r1
 8009518:	b191      	cbz	r1, 8009540 <ai_platform_get_weights_map+0x34>
 800951a:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <ai_platform_get_weights_map+0xa4>)
 800951c:	6810      	ldr	r0, [r2, #0]
 800951e:	4298      	cmp	r0, r3
 8009520:	4615      	mov	r5, r2
 8009522:	d00f      	beq.n	8009544 <ai_platform_get_weights_map+0x38>
 8009524:	6855      	ldr	r5, [r2, #4]
 8009526:	b15d      	cbz	r5, 8009540 <ai_platform_get_weights_map+0x34>
 8009528:	682e      	ldr	r6, [r5, #0]
 800952a:	429e      	cmp	r6, r3
 800952c:	d02a      	beq.n	8009584 <ai_platform_get_weights_map+0x78>
 800952e:	f1a1 0001 	sub.w	r0, r1, #1
 8009532:	6025      	str	r5, [r4, #0]
 8009534:	fab0 f080 	clz	r0, r0
 8009538:	0940      	lsrs	r0, r0, #5
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800953c:	42a7      	cmp	r7, r4
 800953e:	d034      	beq.n	80095aa <ai_platform_get_weights_map+0x9e>
 8009540:	2000      	movs	r0, #0
 8009542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009544:	1d10      	adds	r0, r2, #4
 8009546:	f7ff ffc3 	bl	80094d0 <ai_buffer_array_sane>
 800954a:	2800      	cmp	r0, #0
 800954c:	d0f8      	beq.n	8009540 <ai_platform_get_weights_map+0x34>
 800954e:	88eb      	ldrh	r3, [r5, #6]
 8009550:	429f      	cmp	r7, r3
 8009552:	d1f5      	bne.n	8009540 <ai_platform_get_weights_map+0x34>
 8009554:	f04f 0e00 	mov.w	lr, #0
 8009558:	1f23      	subs	r3, r4, #4
 800955a:	4670      	mov	r0, lr
 800955c:	68aa      	ldr	r2, [r5, #8]
 800955e:	eb02 0c0e 	add.w	ip, r2, lr
 8009562:	f10e 0e1c 	add.w	lr, lr, #28
 8009566:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800956a:	b124      	cbz	r4, 8009576 <ai_platform_get_weights_map+0x6a>
 800956c:	3001      	adds	r0, #1
 800956e:	4287      	cmp	r7, r0
 8009570:	f843 4f04 	str.w	r4, [r3, #4]!
 8009574:	d1f2      	bne.n	800955c <ai_platform_get_weights_map+0x50>
 8009576:	1a38      	subs	r0, r7, r0
 8009578:	fab0 f080 	clz	r0, r0
 800957c:	0940      	lsrs	r0, r0, #5
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	2000      	movs	r0, #0
 8009582:	4770      	bx	lr
 8009584:	1f23      	subs	r3, r4, #4
 8009586:	4628      	mov	r0, r5
 8009588:	2400      	movs	r4, #0
 800958a:	e000      	b.n	800958e <ai_platform_get_weights_map+0x82>
 800958c:	4614      	mov	r4, r2
 800958e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8009592:	42b2      	cmp	r2, r6
 8009594:	d0d2      	beq.n	800953c <ai_platform_get_weights_map+0x30>
 8009596:	f843 2f04 	str.w	r2, [r3, #4]!
 800959a:	1c62      	adds	r2, r4, #1
 800959c:	4297      	cmp	r7, r2
 800959e:	d1f5      	bne.n	800958c <ai_platform_get_weights_map+0x80>
 80095a0:	3402      	adds	r4, #2
 80095a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80095a6:	42b3      	cmp	r3, r6
 80095a8:	d1ca      	bne.n	8009540 <ai_platform_get_weights_map+0x34>
 80095aa:	2001      	movs	r0, #1
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ae:	bf00      	nop
 80095b0:	a1facade 	.word	0xa1facade

080095b4 <ai_platform_get_activations_map>:
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	d038      	beq.n	800962a <ai_platform_get_activations_map+0x76>
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	4604      	mov	r4, r0
 80095bc:	b1a0      	cbz	r0, 80095e8 <ai_platform_get_activations_map+0x34>
 80095be:	460f      	mov	r7, r1
 80095c0:	b191      	cbz	r1, 80095e8 <ai_platform_get_activations_map+0x34>
 80095c2:	4b25      	ldr	r3, [pc, #148]	; (8009658 <ai_platform_get_activations_map+0xa4>)
 80095c4:	6810      	ldr	r0, [r2, #0]
 80095c6:	4298      	cmp	r0, r3
 80095c8:	4615      	mov	r5, r2
 80095ca:	d00f      	beq.n	80095ec <ai_platform_get_activations_map+0x38>
 80095cc:	6a15      	ldr	r5, [r2, #32]
 80095ce:	b15d      	cbz	r5, 80095e8 <ai_platform_get_activations_map+0x34>
 80095d0:	682e      	ldr	r6, [r5, #0]
 80095d2:	429e      	cmp	r6, r3
 80095d4:	d02b      	beq.n	800962e <ai_platform_get_activations_map+0x7a>
 80095d6:	f1a1 0001 	sub.w	r0, r1, #1
 80095da:	6025      	str	r5, [r4, #0]
 80095dc:	fab0 f080 	clz	r0, r0
 80095e0:	0940      	lsrs	r0, r0, #5
 80095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e4:	42a7      	cmp	r7, r4
 80095e6:	d035      	beq.n	8009654 <ai_platform_get_activations_map+0xa0>
 80095e8:	2000      	movs	r0, #0
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ec:	f102 000c 	add.w	r0, r2, #12
 80095f0:	f7ff ff6e 	bl	80094d0 <ai_buffer_array_sane>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d0f7      	beq.n	80095e8 <ai_platform_get_activations_map+0x34>
 80095f8:	89eb      	ldrh	r3, [r5, #14]
 80095fa:	429f      	cmp	r7, r3
 80095fc:	d1f4      	bne.n	80095e8 <ai_platform_get_activations_map+0x34>
 80095fe:	f04f 0e00 	mov.w	lr, #0
 8009602:	1f23      	subs	r3, r4, #4
 8009604:	4670      	mov	r0, lr
 8009606:	692a      	ldr	r2, [r5, #16]
 8009608:	eb02 0c0e 	add.w	ip, r2, lr
 800960c:	f10e 0e1c 	add.w	lr, lr, #28
 8009610:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8009614:	b124      	cbz	r4, 8009620 <ai_platform_get_activations_map+0x6c>
 8009616:	3001      	adds	r0, #1
 8009618:	4287      	cmp	r7, r0
 800961a:	f843 4f04 	str.w	r4, [r3, #4]!
 800961e:	d1f2      	bne.n	8009606 <ai_platform_get_activations_map+0x52>
 8009620:	1a38      	subs	r0, r7, r0
 8009622:	fab0 f080 	clz	r0, r0
 8009626:	0940      	lsrs	r0, r0, #5
 8009628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962a:	2000      	movs	r0, #0
 800962c:	4770      	bx	lr
 800962e:	1f23      	subs	r3, r4, #4
 8009630:	4628      	mov	r0, r5
 8009632:	2400      	movs	r4, #0
 8009634:	e000      	b.n	8009638 <ai_platform_get_activations_map+0x84>
 8009636:	4614      	mov	r4, r2
 8009638:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800963c:	42b2      	cmp	r2, r6
 800963e:	d0d1      	beq.n	80095e4 <ai_platform_get_activations_map+0x30>
 8009640:	f843 2f04 	str.w	r2, [r3, #4]!
 8009644:	1c62      	adds	r2, r4, #1
 8009646:	4297      	cmp	r7, r2
 8009648:	d1f5      	bne.n	8009636 <ai_platform_get_activations_map+0x82>
 800964a:	3402      	adds	r4, #2
 800964c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009650:	42b3      	cmp	r3, r6
 8009652:	d1c9      	bne.n	80095e8 <ai_platform_get_activations_map+0x34>
 8009654:	2001      	movs	r0, #1
 8009656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009658:	a1facade 	.word	0xa1facade

0800965c <ai_platform_bind_network_params>:
 800965c:	b1a0      	cbz	r0, 8009688 <ai_platform_bind_network_params+0x2c>
 800965e:	b1b1      	cbz	r1, 800968e <ai_platform_bind_network_params+0x32>
 8009660:	b1c2      	cbz	r2, 8009694 <ai_platform_bind_network_params+0x38>
 8009662:	b410      	push	{r4}
 8009664:	4603      	mov	r3, r0
 8009666:	4c0d      	ldr	r4, [pc, #52]	; (800969c <ai_platform_bind_network_params+0x40>)
 8009668:	f843 4b04 	str.w	r4, [r3], #4
 800966c:	f100 0c0c 	add.w	ip, r0, #12
 8009670:	c903      	ldmia	r1, {r0, r1}
 8009672:	e883 0003 	stmia.w	r3, {r0, r1}
 8009676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800967a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800967e:	2301      	movs	r3, #1
 8009680:	4618      	mov	r0, r3
 8009682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	4603      	mov	r3, r0
 800968a:	4618      	mov	r0, r3
 800968c:	4770      	bx	lr
 800968e:	460b      	mov	r3, r1
 8009690:	4618      	mov	r0, r3
 8009692:	4770      	bx	lr
 8009694:	4613      	mov	r3, r2
 8009696:	4618      	mov	r0, r3
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	a1facade 	.word	0xa1facade

080096a0 <ai_platform_network_get_error>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	b1f0      	cbz	r0, 80096e2 <ai_platform_network_get_error+0x42>
 80096a4:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <ai_platform_network_get_error+0xc4>)
 80096a6:	6802      	ldr	r2, [r0, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	4604      	mov	r4, r0
 80096ac:	d119      	bne.n	80096e2 <ai_platform_network_get_error+0x42>
 80096ae:	f7ff ff29 	bl	8009504 <_ai_platform_acquire_crc>
 80096b2:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <ai_platform_network_get_error+0xc8>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096be:	d03c      	beq.n	800973a <ai_platform_network_get_error+0x9a>
 80096c0:	4a2a      	ldr	r2, [pc, #168]	; (800976c <ai_platform_network_get_error+0xcc>)
 80096c2:	2301      	movs	r3, #1
 80096c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1fb      	bne.n	80096c8 <ai_platform_network_get_error+0x28>
 80096d0:	4b27      	ldr	r3, [pc, #156]	; (8009770 <ai_platform_network_get_error+0xd0>)
 80096d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80096d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80096da:	4b26      	ldr	r3, [pc, #152]	; (8009774 <ai_platform_network_get_error+0xd4>)
 80096dc:	429a      	cmp	r2, r3
 80096de:	d038      	beq.n	8009752 <ai_platform_network_get_error+0xb2>
 80096e0:	e7fe      	b.n	80096e0 <ai_platform_network_get_error+0x40>
 80096e2:	f7ff ff0f 	bl	8009504 <_ai_platform_acquire_crc>
 80096e6:	4b20      	ldr	r3, [pc, #128]	; (8009768 <ai_platform_network_get_error+0xc8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f2:	d010      	beq.n	8009716 <ai_platform_network_get_error+0x76>
 80096f4:	4a1d      	ldr	r2, [pc, #116]	; (800976c <ai_platform_network_get_error+0xcc>)
 80096f6:	2301      	movs	r3, #1
 80096f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80096fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1fb      	bne.n	80096fc <ai_platform_network_get_error+0x5c>
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <ai_platform_network_get_error+0xd0>)
 8009706:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800970a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800970e:	4b19      	ldr	r3, [pc, #100]	; (8009774 <ai_platform_network_get_error+0xd4>)
 8009710:	429a      	cmp	r2, r3
 8009712:	d00d      	beq.n	8009730 <ai_platform_network_get_error+0x90>
 8009714:	e7fe      	b.n	8009714 <ai_platform_network_get_error+0x74>
 8009716:	4a18      	ldr	r2, [pc, #96]	; (8009778 <ai_platform_network_get_error+0xd8>)
 8009718:	2301      	movs	r3, #1
 800971a:	6093      	str	r3, [r2, #8]
 800971c:	6893      	ldr	r3, [r2, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1fc      	bne.n	800971c <ai_platform_network_get_error+0x7c>
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <ai_platform_network_get_error+0xd0>)
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <ai_platform_network_get_error+0xd4>)
 800972a:	429a      	cmp	r2, r3
 800972c:	d000      	beq.n	8009730 <ai_platform_network_get_error+0x90>
 800972e:	e7fe      	b.n	800972e <ai_platform_network_get_error+0x8e>
 8009730:	f7ff feea 	bl	8009508 <_ai_platform_release_crc>
 8009734:	f241 0010 	movw	r0, #4112	; 0x1010
 8009738:	bd10      	pop	{r4, pc}
 800973a:	4a0f      	ldr	r2, [pc, #60]	; (8009778 <ai_platform_network_get_error+0xd8>)
 800973c:	2301      	movs	r3, #1
 800973e:	6093      	str	r3, [r2, #8]
 8009740:	6893      	ldr	r3, [r2, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1fc      	bne.n	8009740 <ai_platform_network_get_error+0xa0>
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <ai_platform_network_get_error+0xd0>)
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	6812      	ldr	r2, [r2, #0]
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <ai_platform_network_get_error+0xd4>)
 800974e:	429a      	cmp	r2, r3
 8009750:	d107      	bne.n	8009762 <ai_platform_network_get_error+0xc2>
 8009752:	f7ff fed9 	bl	8009508 <_ai_platform_release_crc>
 8009756:	f104 0010 	add.w	r0, r4, #16
 800975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975e:	f000 be8d 	b.w	800a47c <core_get_error>
 8009762:	e7fe      	b.n	8009762 <ai_platform_network_get_error+0xc2>
 8009764:	a1c00100 	.word	0xa1c00100
 8009768:	e0042000 	.word	0xe0042000
 800976c:	58024000 	.word	0x58024000
 8009770:	f407a5c2 	.word	0xf407a5c2
 8009774:	b5e8b5cd 	.word	0xb5e8b5cd
 8009778:	40023000 	.word	0x40023000

0800977c <ai_platform_network_set_error>:
 800977c:	b110      	cbz	r0, 8009784 <ai_platform_network_set_error+0x8>
 800977e:	3010      	adds	r0, #16
 8009780:	f000 be82 	b.w	800a488 <core_set_error>
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop

08009788 <ai_platform_inputs_get>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	b085      	sub	sp, #20
 800978e:	9102      	str	r1, [sp, #8]
 8009790:	b1f0      	cbz	r0, 80097d0 <ai_platform_inputs_get+0x48>
 8009792:	4b62      	ldr	r3, [pc, #392]	; (800991c <ai_platform_inputs_get+0x194>)
 8009794:	6802      	ldr	r2, [r0, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	4607      	mov	r7, r0
 800979a:	d119      	bne.n	80097d0 <ai_platform_inputs_get+0x48>
 800979c:	f7ff feb2 	bl	8009504 <_ai_platform_acquire_crc>
 80097a0:	4b5f      	ldr	r3, [pc, #380]	; (8009920 <ai_platform_inputs_get+0x198>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ac:	d03d      	beq.n	800982a <ai_platform_inputs_get+0xa2>
 80097ae:	4a5d      	ldr	r2, [pc, #372]	; (8009924 <ai_platform_inputs_get+0x19c>)
 80097b0:	2301      	movs	r3, #1
 80097b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1fb      	bne.n	80097b6 <ai_platform_inputs_get+0x2e>
 80097be:	4b5a      	ldr	r3, [pc, #360]	; (8009928 <ai_platform_inputs_get+0x1a0>)
 80097c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097c8:	4b58      	ldr	r3, [pc, #352]	; (800992c <ai_platform_inputs_get+0x1a4>)
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d039      	beq.n	8009842 <ai_platform_inputs_get+0xba>
 80097ce:	e7fe      	b.n	80097ce <ai_platform_inputs_get+0x46>
 80097d0:	f7ff fe98 	bl	8009504 <_ai_platform_acquire_crc>
 80097d4:	4b52      	ldr	r3, [pc, #328]	; (8009920 <ai_platform_inputs_get+0x198>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e0:	d010      	beq.n	8009804 <ai_platform_inputs_get+0x7c>
 80097e2:	4a50      	ldr	r2, [pc, #320]	; (8009924 <ai_platform_inputs_get+0x19c>)
 80097e4:	2301      	movs	r3, #1
 80097e6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80097ea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1fb      	bne.n	80097ea <ai_platform_inputs_get+0x62>
 80097f2:	4b4d      	ldr	r3, [pc, #308]	; (8009928 <ai_platform_inputs_get+0x1a0>)
 80097f4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80097f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80097fc:	4b4b      	ldr	r3, [pc, #300]	; (800992c <ai_platform_inputs_get+0x1a4>)
 80097fe:	429a      	cmp	r2, r3
 8009800:	d00d      	beq.n	800981e <ai_platform_inputs_get+0x96>
 8009802:	e7fe      	b.n	8009802 <ai_platform_inputs_get+0x7a>
 8009804:	4a4a      	ldr	r2, [pc, #296]	; (8009930 <ai_platform_inputs_get+0x1a8>)
 8009806:	2301      	movs	r3, #1
 8009808:	6093      	str	r3, [r2, #8]
 800980a:	6893      	ldr	r3, [r2, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1fc      	bne.n	800980a <ai_platform_inputs_get+0x82>
 8009810:	4b45      	ldr	r3, [pc, #276]	; (8009928 <ai_platform_inputs_get+0x1a0>)
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	6812      	ldr	r2, [r2, #0]
 8009816:	4b45      	ldr	r3, [pc, #276]	; (800992c <ai_platform_inputs_get+0x1a4>)
 8009818:	429a      	cmp	r2, r3
 800981a:	d000      	beq.n	800981e <ai_platform_inputs_get+0x96>
 800981c:	e7fe      	b.n	800981c <ai_platform_inputs_get+0x94>
 800981e:	f7ff fe73 	bl	8009508 <_ai_platform_release_crc>
 8009822:	2000      	movs	r0, #0
 8009824:	b005      	add	sp, #20
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	4a41      	ldr	r2, [pc, #260]	; (8009930 <ai_platform_inputs_get+0x1a8>)
 800982c:	2301      	movs	r3, #1
 800982e:	6093      	str	r3, [r2, #8]
 8009830:	6893      	ldr	r3, [r2, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1fc      	bne.n	8009830 <ai_platform_inputs_get+0xa8>
 8009836:	4b3c      	ldr	r3, [pc, #240]	; (8009928 <ai_platform_inputs_get+0x1a0>)
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	6812      	ldr	r2, [r2, #0]
 800983c:	4b3b      	ldr	r3, [pc, #236]	; (800992c <ai_platform_inputs_get+0x1a4>)
 800983e:	429a      	cmp	r2, r3
 8009840:	d155      	bne.n	80098ee <ai_platform_inputs_get+0x166>
 8009842:	f7ff fe61 	bl	8009508 <_ai_platform_release_crc>
 8009846:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d051      	beq.n	80098f0 <ai_platform_inputs_get+0x168>
 800984c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	d04c      	beq.n	80098f0 <ai_platform_inputs_get+0x168>
 8009856:	f04f 0b00 	mov.w	fp, #0
 800985a:	465d      	mov	r5, fp
 800985c:	9703      	str	r7, [sp, #12]
 800985e:	e016      	b.n	800988e <ai_platform_inputs_get+0x106>
 8009860:	9901      	ldr	r1, [sp, #4]
 8009862:	2301      	movs	r3, #1
 8009864:	507b      	str	r3, [r7, r1]
 8009866:	69b1      	ldr	r1, [r6, #24]
 8009868:	6849      	ldr	r1, [r1, #4]
 800986a:	6121      	str	r1, [r4, #16]
 800986c:	f04f 0301 	mov.w	r3, #1
 8009870:	7523      	strb	r3, [r4, #20]
 8009872:	e9c4 c200 	strd	ip, r2, [r4]
 8009876:	6962      	ldr	r2, [r4, #20]
 8009878:	60a0      	str	r0, [r4, #8]
 800987a:	2300      	movs	r3, #0
 800987c:	f369 221f 	bfi	r2, r9, #8, #24
 8009880:	f8c4 8018 	str.w	r8, [r4, #24]
 8009884:	60e3      	str	r3, [r4, #12]
 8009886:	3501      	adds	r5, #1
 8009888:	f10b 0b1c 	add.w	fp, fp, #28
 800988c:	6162      	str	r2, [r4, #20]
 800988e:	f8ba 3000 	ldrh.w	r3, [sl]
 8009892:	42ab      	cmp	r3, r5
 8009894:	b2aa      	uxth	r2, r5
 8009896:	d93a      	bls.n	800990e <ai_platform_inputs_get+0x186>
 8009898:	f8da 3004 	ldr.w	r3, [sl, #4]
 800989c:	00e9      	lsls	r1, r5, #3
 800989e:	9101      	str	r1, [sp, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d034      	beq.n	800990e <ai_platform_inputs_get+0x186>
 80098a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80098a8:	2e00      	cmp	r6, #0
 80098aa:	d030      	beq.n	800990e <ai_platform_inputs_get+0x186>
 80098ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80098b0:	69b2      	ldr	r2, [r6, #24]
 80098b2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80098b6:	6810      	ldr	r0, [r2, #0]
 80098b8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80098bc:	68b3      	ldr	r3, [r6, #8]
 80098be:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80098c2:	f002 fb49 	bl	800bf58 <ai_array_to_buffer_fmt>
 80098c6:	69b1      	ldr	r1, [r6, #24]
 80098c8:	4684      	mov	ip, r0
 80098ca:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80098ce:	688a      	ldr	r2, [r1, #8]
 80098d0:	445c      	add	r4, fp
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d0c8      	beq.n	8009868 <ai_platform_inputs_get+0xe0>
 80098d6:	2100      	movs	r1, #0
 80098d8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80098dc:	6831      	ldr	r1, [r6, #0]
 80098de:	6041      	str	r1, [r0, #4]
 80098e0:	b111      	cbz	r1, 80098e8 <ai_platform_inputs_get+0x160>
 80098e2:	8849      	ldrh	r1, [r1, #2]
 80098e4:	2900      	cmp	r1, #0
 80098e6:	d1bb      	bne.n	8009860 <ai_platform_inputs_get+0xd8>
 80098e8:	69b1      	ldr	r1, [r6, #24]
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7bc      	b.n	8009868 <ai_platform_inputs_get+0xe0>
 80098ee:	e7fe      	b.n	80098ee <ai_platform_inputs_get+0x166>
 80098f0:	2218      	movs	r2, #24
 80098f2:	2111      	movs	r1, #17
 80098f4:	f107 0010 	add.w	r0, r7, #16
 80098f8:	f000 fdc6 	bl	800a488 <core_set_error>
 80098fc:	2200      	movs	r2, #0
 80098fe:	4610      	mov	r0, r2
 8009900:	9b02      	ldr	r3, [sp, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d08e      	beq.n	8009824 <ai_platform_inputs_get+0x9c>
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	b005      	add	sp, #20
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	9f03      	ldr	r7, [sp, #12]
 8009910:	2a00      	cmp	r2, #0
 8009912:	d0ed      	beq.n	80098f0 <ai_platform_inputs_get+0x168>
 8009914:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009918:	6858      	ldr	r0, [r3, #4]
 800991a:	e7f1      	b.n	8009900 <ai_platform_inputs_get+0x178>
 800991c:	a1c00100 	.word	0xa1c00100
 8009920:	e0042000 	.word	0xe0042000
 8009924:	58024000 	.word	0x58024000
 8009928:	f407a5c2 	.word	0xf407a5c2
 800992c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009930:	40023000 	.word	0x40023000

08009934 <ai_platform_outputs_get>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	b085      	sub	sp, #20
 800993a:	9102      	str	r1, [sp, #8]
 800993c:	b1f0      	cbz	r0, 800997c <ai_platform_outputs_get+0x48>
 800993e:	4b5f      	ldr	r3, [pc, #380]	; (8009abc <ai_platform_outputs_get+0x188>)
 8009940:	6802      	ldr	r2, [r0, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	4607      	mov	r7, r0
 8009946:	d119      	bne.n	800997c <ai_platform_outputs_get+0x48>
 8009948:	f7ff fddc 	bl	8009504 <_ai_platform_acquire_crc>
 800994c:	4b5c      	ldr	r3, [pc, #368]	; (8009ac0 <ai_platform_outputs_get+0x18c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009958:	d03d      	beq.n	80099d6 <ai_platform_outputs_get+0xa2>
 800995a:	4a5a      	ldr	r2, [pc, #360]	; (8009ac4 <ai_platform_outputs_get+0x190>)
 800995c:	2301      	movs	r3, #1
 800995e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009962:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1fb      	bne.n	8009962 <ai_platform_outputs_get+0x2e>
 800996a:	4b57      	ldr	r3, [pc, #348]	; (8009ac8 <ai_platform_outputs_get+0x194>)
 800996c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009970:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009974:	4b55      	ldr	r3, [pc, #340]	; (8009acc <ai_platform_outputs_get+0x198>)
 8009976:	429a      	cmp	r2, r3
 8009978:	d039      	beq.n	80099ee <ai_platform_outputs_get+0xba>
 800997a:	e7fe      	b.n	800997a <ai_platform_outputs_get+0x46>
 800997c:	f7ff fdc2 	bl	8009504 <_ai_platform_acquire_crc>
 8009980:	4b4f      	ldr	r3, [pc, #316]	; (8009ac0 <ai_platform_outputs_get+0x18c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998c:	d010      	beq.n	80099b0 <ai_platform_outputs_get+0x7c>
 800998e:	4a4d      	ldr	r2, [pc, #308]	; (8009ac4 <ai_platform_outputs_get+0x190>)
 8009990:	2301      	movs	r3, #1
 8009992:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009996:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1fb      	bne.n	8009996 <ai_platform_outputs_get+0x62>
 800999e:	4b4a      	ldr	r3, [pc, #296]	; (8009ac8 <ai_platform_outputs_get+0x194>)
 80099a0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80099a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80099a8:	4b48      	ldr	r3, [pc, #288]	; (8009acc <ai_platform_outputs_get+0x198>)
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d00d      	beq.n	80099ca <ai_platform_outputs_get+0x96>
 80099ae:	e7fe      	b.n	80099ae <ai_platform_outputs_get+0x7a>
 80099b0:	4a47      	ldr	r2, [pc, #284]	; (8009ad0 <ai_platform_outputs_get+0x19c>)
 80099b2:	2301      	movs	r3, #1
 80099b4:	6093      	str	r3, [r2, #8]
 80099b6:	6893      	ldr	r3, [r2, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1fc      	bne.n	80099b6 <ai_platform_outputs_get+0x82>
 80099bc:	4b42      	ldr	r3, [pc, #264]	; (8009ac8 <ai_platform_outputs_get+0x194>)
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	4b42      	ldr	r3, [pc, #264]	; (8009acc <ai_platform_outputs_get+0x198>)
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d000      	beq.n	80099ca <ai_platform_outputs_get+0x96>
 80099c8:	e7fe      	b.n	80099c8 <ai_platform_outputs_get+0x94>
 80099ca:	f7ff fd9d 	bl	8009508 <_ai_platform_release_crc>
 80099ce:	2000      	movs	r0, #0
 80099d0:	b005      	add	sp, #20
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	4a3e      	ldr	r2, [pc, #248]	; (8009ad0 <ai_platform_outputs_get+0x19c>)
 80099d8:	2301      	movs	r3, #1
 80099da:	6093      	str	r3, [r2, #8]
 80099dc:	6893      	ldr	r3, [r2, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1fc      	bne.n	80099dc <ai_platform_outputs_get+0xa8>
 80099e2:	4b39      	ldr	r3, [pc, #228]	; (8009ac8 <ai_platform_outputs_get+0x194>)
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	4b38      	ldr	r3, [pc, #224]	; (8009acc <ai_platform_outputs_get+0x198>)
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d150      	bne.n	8009a90 <ai_platform_outputs_get+0x15c>
 80099ee:	f7ff fd8b 	bl	8009508 <_ai_platform_release_crc>
 80099f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d958      	bls.n	8009aaa <ai_platform_outputs_get+0x176>
 80099f8:	f04f 0b00 	mov.w	fp, #0
 80099fc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8009a00:	9703      	str	r7, [sp, #12]
 8009a02:	465d      	mov	r5, fp
 8009a04:	e016      	b.n	8009a34 <ai_platform_outputs_get+0x100>
 8009a06:	9901      	ldr	r1, [sp, #4]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	507b      	str	r3, [r7, r1]
 8009a0c:	69b1      	ldr	r1, [r6, #24]
 8009a0e:	6849      	ldr	r1, [r1, #4]
 8009a10:	6121      	str	r1, [r4, #16]
 8009a12:	f04f 0301 	mov.w	r3, #1
 8009a16:	7523      	strb	r3, [r4, #20]
 8009a18:	e9c4 c200 	strd	ip, r2, [r4]
 8009a1c:	6962      	ldr	r2, [r4, #20]
 8009a1e:	60a0      	str	r0, [r4, #8]
 8009a20:	2300      	movs	r3, #0
 8009a22:	f369 221f 	bfi	r2, r9, #8, #24
 8009a26:	f8c4 8018 	str.w	r8, [r4, #24]
 8009a2a:	60e3      	str	r3, [r4, #12]
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	f10b 0b1c 	add.w	fp, fp, #28
 8009a32:	6162      	str	r2, [r4, #20]
 8009a34:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	b2aa      	uxth	r2, r5
 8009a3c:	d929      	bls.n	8009a92 <ai_platform_outputs_get+0x15e>
 8009a3e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009a42:	00e9      	lsls	r1, r5, #3
 8009a44:	9101      	str	r1, [sp, #4]
 8009a46:	b323      	cbz	r3, 8009a92 <ai_platform_outputs_get+0x15e>
 8009a48:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009a4c:	b30e      	cbz	r6, 8009a92 <ai_platform_outputs_get+0x15e>
 8009a4e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a52:	69b2      	ldr	r2, [r6, #24]
 8009a54:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009a58:	6810      	ldr	r0, [r2, #0]
 8009a5a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009a5e:	68b3      	ldr	r3, [r6, #8]
 8009a60:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009a64:	f002 fa78 	bl	800bf58 <ai_array_to_buffer_fmt>
 8009a68:	69b1      	ldr	r1, [r6, #24]
 8009a6a:	4684      	mov	ip, r0
 8009a6c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8009a70:	688a      	ldr	r2, [r1, #8]
 8009a72:	445c      	add	r4, fp
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d0ca      	beq.n	8009a0e <ai_platform_outputs_get+0xda>
 8009a78:	2100      	movs	r1, #0
 8009a7a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8009a7e:	6831      	ldr	r1, [r6, #0]
 8009a80:	6041      	str	r1, [r0, #4]
 8009a82:	b111      	cbz	r1, 8009a8a <ai_platform_outputs_get+0x156>
 8009a84:	8849      	ldrh	r1, [r1, #2]
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d1bd      	bne.n	8009a06 <ai_platform_outputs_get+0xd2>
 8009a8a:	69b1      	ldr	r1, [r6, #24]
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7be      	b.n	8009a0e <ai_platform_outputs_get+0xda>
 8009a90:	e7fe      	b.n	8009a90 <ai_platform_outputs_get+0x15c>
 8009a92:	9f03      	ldr	r7, [sp, #12]
 8009a94:	b14a      	cbz	r2, 8009aaa <ai_platform_outputs_get+0x176>
 8009a96:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a9a:	6858      	ldr	r0, [r3, #4]
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d096      	beq.n	80099d0 <ai_platform_outputs_get+0x9c>
 8009aa2:	801a      	strh	r2, [r3, #0]
 8009aa4:	b005      	add	sp, #20
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	2218      	movs	r2, #24
 8009aac:	2111      	movs	r1, #17
 8009aae:	f107 0010 	add.w	r0, r7, #16
 8009ab2:	f000 fce9 	bl	800a488 <core_set_error>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	4610      	mov	r0, r2
 8009aba:	e7ef      	b.n	8009a9c <ai_platform_outputs_get+0x168>
 8009abc:	a1c00100 	.word	0xa1c00100
 8009ac0:	e0042000 	.word	0xe0042000
 8009ac4:	58024000 	.word	0x58024000
 8009ac8:	f407a5c2 	.word	0xf407a5c2
 8009acc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ad0:	40023000 	.word	0x40023000

08009ad4 <ai_platform_network_create>:
 8009ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	4606      	mov	r6, r0
 8009adc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009ae0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009ae4:	4615      	mov	r5, r2
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	f7ff fd0c 	bl	8009504 <_ai_platform_acquire_crc>
 8009aec:	b188      	cbz	r0, 8009b12 <ai_platform_network_create+0x3e>
 8009aee:	4a5d      	ldr	r2, [pc, #372]	; (8009c64 <ai_platform_network_create+0x190>)
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009af6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009afa:	4603      	mov	r3, r0
 8009afc:	d00e      	beq.n	8009b1c <ai_platform_network_create+0x48>
 8009afe:	4a5a      	ldr	r2, [pc, #360]	; (8009c68 <ai_platform_network_create+0x194>)
 8009b00:	2118      	movs	r1, #24
 8009b02:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009b06:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009b0a:	2918      	cmp	r1, #24
 8009b0c:	d018      	beq.n	8009b40 <ai_platform_network_create+0x6c>
 8009b0e:	f7ff fcfb 	bl	8009508 <_ai_platform_release_crc>
 8009b12:	f244 1033 	movw	r0, #16691	; 0x4133
 8009b16:	b003      	add	sp, #12
 8009b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1c:	4a53      	ldr	r2, [pc, #332]	; (8009c6c <ai_platform_network_create+0x198>)
 8009b1e:	2101      	movs	r1, #1
 8009b20:	6091      	str	r1, [r2, #8]
 8009b22:	2114      	movs	r1, #20
 8009b24:	e001      	b.n	8009b2a <ai_platform_network_create+0x56>
 8009b26:	3901      	subs	r1, #1
 8009b28:	d002      	beq.n	8009b30 <ai_platform_network_create+0x5c>
 8009b2a:	6894      	ldr	r4, [r2, #8]
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	d1fa      	bne.n	8009b26 <ai_platform_network_create+0x52>
 8009b30:	4a4e      	ldr	r2, [pc, #312]	; (8009c6c <ai_platform_network_create+0x198>)
 8009b32:	6891      	ldr	r1, [r2, #8]
 8009b34:	b911      	cbnz	r1, 8009b3c <ai_platform_network_create+0x68>
 8009b36:	6812      	ldr	r2, [r2, #0]
 8009b38:	3201      	adds	r2, #1
 8009b3a:	d008      	beq.n	8009b4e <ai_platform_network_create+0x7a>
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	e7e6      	b.n	8009b0e <ai_platform_network_create+0x3a>
 8009b40:	2101      	movs	r1, #1
 8009b42:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8009b46:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d1fb      	bne.n	8009b46 <ai_platform_network_create+0x72>
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff fcda 	bl	8009508 <_ai_platform_release_crc>
 8009b54:	f7ff fcd6 	bl	8009504 <_ai_platform_acquire_crc>
 8009b58:	4b42      	ldr	r3, [pc, #264]	; (8009c64 <ai_platform_network_create+0x190>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b64:	d010      	beq.n	8009b88 <ai_platform_network_create+0xb4>
 8009b66:	4b40      	ldr	r3, [pc, #256]	; (8009c68 <ai_platform_network_create+0x194>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009b6e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8009b72:	2900      	cmp	r1, #0
 8009b74:	d1fb      	bne.n	8009b6e <ai_platform_network_create+0x9a>
 8009b76:	4a3e      	ldr	r2, [pc, #248]	; (8009c70 <ai_platform_network_create+0x19c>)
 8009b78:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009b7c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009b80:	4b3c      	ldr	r3, [pc, #240]	; (8009c74 <ai_platform_network_create+0x1a0>)
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d00c      	beq.n	8009ba0 <ai_platform_network_create+0xcc>
 8009b86:	e7fe      	b.n	8009b86 <ai_platform_network_create+0xb2>
 8009b88:	4a38      	ldr	r2, [pc, #224]	; (8009c6c <ai_platform_network_create+0x198>)
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	6093      	str	r3, [r2, #8]
 8009b8e:	6893      	ldr	r3, [r2, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1fc      	bne.n	8009b8e <ai_platform_network_create+0xba>
 8009b94:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <ai_platform_network_create+0x19c>)
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	4b36      	ldr	r3, [pc, #216]	; (8009c74 <ai_platform_network_create+0x1a0>)
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d122      	bne.n	8009be6 <ai_platform_network_create+0x112>
 8009ba0:	f7ff fcb2 	bl	8009508 <_ai_platform_release_crc>
 8009ba4:	b38e      	cbz	r6, 8009c0a <ai_platform_network_create+0x136>
 8009ba6:	4b34      	ldr	r3, [pc, #208]	; (8009c78 <ai_platform_network_create+0x1a4>)
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	6035      	str	r5, [r6, #0]
 8009bac:	f000 fc64 	bl	800a478 <core_init>
 8009bb0:	b1d0      	cbz	r0, 8009be8 <ai_platform_network_create+0x114>
 8009bb2:	f7ff fca7 	bl	8009504 <_ai_platform_acquire_crc>
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <ai_platform_network_create+0x190>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc2:	d025      	beq.n	8009c10 <ai_platform_network_create+0x13c>
 8009bc4:	4a28      	ldr	r2, [pc, #160]	; (8009c68 <ai_platform_network_create+0x194>)
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009bcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1fb      	bne.n	8009bcc <ai_platform_network_create+0xf8>
 8009bd4:	4b26      	ldr	r3, [pc, #152]	; (8009c70 <ai_platform_network_create+0x19c>)
 8009bd6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009bda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009bde:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <ai_platform_network_create+0x1a0>)
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d022      	beq.n	8009c2a <ai_platform_network_create+0x156>
 8009be4:	e7fe      	b.n	8009be4 <ai_platform_network_create+0x110>
 8009be6:	e7fe      	b.n	8009be6 <ai_platform_network_create+0x112>
 8009be8:	2430      	movs	r4, #48	; 0x30
 8009bea:	2300      	movs	r3, #0
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	2610      	movs	r6, #16
 8009bf0:	464a      	mov	r2, r9
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f002 f991 	bl	800bf1c <ai_version_get>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f364 0007 	bfi	r0, r4, #0, #8
 8009c02:	64ab      	str	r3, [r5, #72]	; 0x48
 8009c04:	f366 201f 	bfi	r0, r6, #8, #24
 8009c08:	e785      	b.n	8009b16 <ai_platform_network_create+0x42>
 8009c0a:	f241 0010 	movw	r0, #4112	; 0x1010
 8009c0e:	e782      	b.n	8009b16 <ai_platform_network_create+0x42>
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <ai_platform_network_create+0x198>)
 8009c12:	2301      	movs	r3, #1
 8009c14:	6093      	str	r3, [r2, #8]
 8009c16:	6893      	ldr	r3, [r2, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1fc      	bne.n	8009c16 <ai_platform_network_create+0x142>
 8009c1c:	4b14      	ldr	r3, [pc, #80]	; (8009c70 <ai_platform_network_create+0x19c>)
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	6812      	ldr	r2, [r2, #0]
 8009c22:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <ai_platform_network_create+0x1a0>)
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d000      	beq.n	8009c2a <ai_platform_network_create+0x156>
 8009c28:	e7fe      	b.n	8009c28 <ai_platform_network_create+0x154>
 8009c2a:	f7ff fc6d 	bl	8009508 <_ai_platform_release_crc>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4641      	mov	r1, r8
 8009c32:	4638      	mov	r0, r7
 8009c34:	f002 f972 	bl	800bf1c <ai_version_get>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	2105      	movs	r1, #5
 8009c3e:	2001      	movs	r0, #1
 8009c40:	f002 f96c 	bl	800bf1c <ai_version_get>
 8009c44:	4284      	cmp	r4, r0
 8009c46:	d001      	beq.n	8009c4c <ai_platform_network_create+0x178>
 8009c48:	2401      	movs	r4, #1
 8009c4a:	e7ce      	b.n	8009bea <ai_platform_network_create+0x116>
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <ai_platform_network_create+0x1a8>)
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	a801      	add	r0, sp, #4
 8009c52:	f001 ffa9 	bl	800bba8 <ai_check_custom_types>
 8009c56:	b110      	cbz	r0, 8009c5e <ai_platform_network_create+0x18a>
 8009c58:	2600      	movs	r6, #0
 8009c5a:	4634      	mov	r4, r6
 8009c5c:	e7c8      	b.n	8009bf0 <ai_platform_network_create+0x11c>
 8009c5e:	2402      	movs	r4, #2
 8009c60:	e7c3      	b.n	8009bea <ai_platform_network_create+0x116>
 8009c62:	bf00      	nop
 8009c64:	e0042000 	.word	0xe0042000
 8009c68:	58024000 	.word	0x58024000
 8009c6c:	40023000 	.word	0x40023000
 8009c70:	f407a5c2 	.word	0xf407a5c2
 8009c74:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c78:	a1c00100 	.word	0xa1c00100
 8009c7c:	84048403 	.word	0x84048403

08009c80 <ai_platform_network_init>:
 8009c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c84:	b1f8      	cbz	r0, 8009cc6 <ai_platform_network_init+0x46>
 8009c86:	4b6e      	ldr	r3, [pc, #440]	; (8009e40 <ai_platform_network_init+0x1c0>)
 8009c88:	6802      	ldr	r2, [r0, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	d11a      	bne.n	8009cc6 <ai_platform_network_init+0x46>
 8009c90:	460e      	mov	r6, r1
 8009c92:	f7ff fc37 	bl	8009504 <_ai_platform_acquire_crc>
 8009c96:	4b6b      	ldr	r3, [pc, #428]	; (8009e44 <ai_platform_network_init+0x1c4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca2:	d03d      	beq.n	8009d20 <ai_platform_network_init+0xa0>
 8009ca4:	4a68      	ldr	r2, [pc, #416]	; (8009e48 <ai_platform_network_init+0x1c8>)
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009cac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1fb      	bne.n	8009cac <ai_platform_network_init+0x2c>
 8009cb4:	4b65      	ldr	r3, [pc, #404]	; (8009e4c <ai_platform_network_init+0x1cc>)
 8009cb6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009cba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009cbe:	4b64      	ldr	r3, [pc, #400]	; (8009e50 <ai_platform_network_init+0x1d0>)
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d039      	beq.n	8009d38 <ai_platform_network_init+0xb8>
 8009cc4:	e7fe      	b.n	8009cc4 <ai_platform_network_init+0x44>
 8009cc6:	f7ff fc1d 	bl	8009504 <_ai_platform_acquire_crc>
 8009cca:	4b5e      	ldr	r3, [pc, #376]	; (8009e44 <ai_platform_network_init+0x1c4>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cd6:	d010      	beq.n	8009cfa <ai_platform_network_init+0x7a>
 8009cd8:	4a5b      	ldr	r2, [pc, #364]	; (8009e48 <ai_platform_network_init+0x1c8>)
 8009cda:	2301      	movs	r3, #1
 8009cdc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ce0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1fb      	bne.n	8009ce0 <ai_platform_network_init+0x60>
 8009ce8:	4b58      	ldr	r3, [pc, #352]	; (8009e4c <ai_platform_network_init+0x1cc>)
 8009cea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009cee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009cf2:	4b57      	ldr	r3, [pc, #348]	; (8009e50 <ai_platform_network_init+0x1d0>)
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d00d      	beq.n	8009d14 <ai_platform_network_init+0x94>
 8009cf8:	e7fe      	b.n	8009cf8 <ai_platform_network_init+0x78>
 8009cfa:	4a56      	ldr	r2, [pc, #344]	; (8009e54 <ai_platform_network_init+0x1d4>)
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	6093      	str	r3, [r2, #8]
 8009d00:	6893      	ldr	r3, [r2, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1fc      	bne.n	8009d00 <ai_platform_network_init+0x80>
 8009d06:	4b51      	ldr	r3, [pc, #324]	; (8009e4c <ai_platform_network_init+0x1cc>)
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	4b50      	ldr	r3, [pc, #320]	; (8009e50 <ai_platform_network_init+0x1d0>)
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d000      	beq.n	8009d14 <ai_platform_network_init+0x94>
 8009d12:	e7fe      	b.n	8009d12 <ai_platform_network_init+0x92>
 8009d14:	f7ff fbf8 	bl	8009508 <_ai_platform_release_crc>
 8009d18:	2600      	movs	r6, #0
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d20:	4a4c      	ldr	r2, [pc, #304]	; (8009e54 <ai_platform_network_init+0x1d4>)
 8009d22:	2301      	movs	r3, #1
 8009d24:	6093      	str	r3, [r2, #8]
 8009d26:	6893      	ldr	r3, [r2, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1fc      	bne.n	8009d26 <ai_platform_network_init+0xa6>
 8009d2c:	4b47      	ldr	r3, [pc, #284]	; (8009e4c <ai_platform_network_init+0x1cc>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	4b47      	ldr	r3, [pc, #284]	; (8009e50 <ai_platform_network_init+0x1d0>)
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d11c      	bne.n	8009d72 <ai_platform_network_init+0xf2>
 8009d38:	f7ff fbe6 	bl	8009508 <_ai_platform_release_crc>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	d06f      	beq.n	8009e20 <ai_platform_network_init+0x1a0>
 8009d40:	4b45      	ldr	r3, [pc, #276]	; (8009e58 <ai_platform_network_init+0x1d8>)
 8009d42:	6832      	ldr	r2, [r6, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d115      	bne.n	8009d74 <ai_platform_network_init+0xf4>
 8009d48:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009d4c:	6933      	ldr	r3, [r6, #16]
 8009d4e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8009d52:	89f7      	ldrh	r7, [r6, #14]
 8009d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d56:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	84e7      	strh	r7, [r4, #38]	; 0x26
 8009d5e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8009d62:	60e3      	str	r3, [r4, #12]
 8009d64:	4620      	mov	r0, r4
 8009d66:	4626      	mov	r6, r4
 8009d68:	f001 ff48 	bl	800bbfc <ai_layers_init_all>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d72:	e7fe      	b.n	8009d72 <ai_platform_network_init+0xf2>
 8009d74:	2101      	movs	r1, #1
 8009d76:	4630      	mov	r0, r6
 8009d78:	4635      	mov	r5, r6
 8009d7a:	6876      	ldr	r6, [r6, #4]
 8009d7c:	f7ff fb74 	bl	8009468 <ai_buffer_get_size>
 8009d80:	f105 081c 	add.w	r8, r5, #28
 8009d84:	4681      	mov	r9, r0
 8009d86:	2101      	movs	r1, #1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	6a2f      	ldr	r7, [r5, #32]
 8009d8c:	f7ff fb6c 	bl	8009468 <ai_buffer_get_size>
 8009d90:	f1b9 0f00 	cmp.w	r9, #0
 8009d94:	d025      	beq.n	8009de2 <ai_platform_network_init+0x162>
 8009d96:	2201      	movs	r2, #1
 8009d98:	4696      	mov	lr, r2
 8009d9a:	bb30      	cbnz	r0, 8009dea <ai_platform_network_init+0x16a>
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4607      	mov	r7, r0
 8009da0:	b376      	cbz	r6, 8009e00 <ai_platform_network_init+0x180>
 8009da2:	8be3      	ldrh	r3, [r4, #30]
 8009da4:	4573      	cmp	r3, lr
 8009da6:	d323      	bcc.n	8009df0 <ai_platform_network_init+0x170>
 8009da8:	b142      	cbz	r2, 8009dbc <ai_platform_network_init+0x13c>
 8009daa:	46ac      	mov	ip, r5
 8009dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009db0:	6a25      	ldr	r5, [r4, #32]
 8009db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009db4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009db8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009dbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009dbe:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	42bb      	cmp	r3, r7
 8009dc6:	83a6      	strh	r6, [r4, #28]
 8009dc8:	d323      	bcc.n	8009e12 <ai_platform_network_init+0x192>
 8009dca:	b37f      	cbz	r7, 8009e2c <ai_platform_network_init+0x1ac>
 8009dcc:	46c4      	mov	ip, r8
 8009dce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009dd2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009dd6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009dda:	46b6      	mov	lr, r6
 8009ddc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009de0:	e7bb      	b.n	8009d5a <ai_platform_network_init+0xda>
 8009de2:	464a      	mov	r2, r9
 8009de4:	46ce      	mov	lr, r9
 8009de6:	464d      	mov	r5, r9
 8009de8:	e7d7      	b.n	8009d9a <ai_platform_network_init+0x11a>
 8009dea:	b30f      	cbz	r7, 8009e30 <ai_platform_network_init+0x1b0>
 8009dec:	2701      	movs	r7, #1
 8009dee:	e7d7      	b.n	8009da0 <ai_platform_network_init+0x120>
 8009df0:	2212      	movs	r2, #18
 8009df2:	2116      	movs	r1, #22
 8009df4:	f104 0010 	add.w	r0, r4, #16
 8009df8:	f000 fb46 	bl	800a488 <core_set_error>
 8009dfc:	2600      	movs	r6, #0
 8009dfe:	e78c      	b.n	8009d1a <ai_platform_network_init+0x9a>
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	d0cd      	beq.n	8009da2 <ai_platform_network_init+0x122>
 8009e06:	2110      	movs	r1, #16
 8009e08:	2212      	movs	r2, #18
 8009e0a:	1860      	adds	r0, r4, r1
 8009e0c:	f000 fb3c 	bl	800a488 <core_set_error>
 8009e10:	e783      	b.n	8009d1a <ai_platform_network_init+0x9a>
 8009e12:	2213      	movs	r2, #19
 8009e14:	2116      	movs	r1, #22
 8009e16:	f104 0010 	add.w	r0, r4, #16
 8009e1a:	f000 fb35 	bl	800a488 <core_set_error>
 8009e1e:	e77c      	b.n	8009d1a <ai_platform_network_init+0x9a>
 8009e20:	2110      	movs	r1, #16
 8009e22:	2211      	movs	r2, #17
 8009e24:	1860      	adds	r0, r4, r1
 8009e26:	f000 fb2f 	bl	800a488 <core_set_error>
 8009e2a:	e776      	b.n	8009d1a <ai_platform_network_init+0x9a>
 8009e2c:	46be      	mov	lr, r7
 8009e2e:	e794      	b.n	8009d5a <ai_platform_network_init+0xda>
 8009e30:	2110      	movs	r1, #16
 8009e32:	2213      	movs	r2, #19
 8009e34:	1860      	adds	r0, r4, r1
 8009e36:	f000 fb27 	bl	800a488 <core_set_error>
 8009e3a:	463e      	mov	r6, r7
 8009e3c:	e76d      	b.n	8009d1a <ai_platform_network_init+0x9a>
 8009e3e:	bf00      	nop
 8009e40:	a1c00100 	.word	0xa1c00100
 8009e44:	e0042000 	.word	0xe0042000
 8009e48:	58024000 	.word	0x58024000
 8009e4c:	f407a5c2 	.word	0xf407a5c2
 8009e50:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e54:	40023000 	.word	0x40023000
 8009e58:	a1facade 	.word	0xa1facade

08009e5c <ai_platform_network_post_init>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	b1f0      	cbz	r0, 8009e9e <ai_platform_network_post_init+0x42>
 8009e60:	4b3c      	ldr	r3, [pc, #240]	; (8009f54 <ai_platform_network_post_init+0xf8>)
 8009e62:	6802      	ldr	r2, [r0, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	4604      	mov	r4, r0
 8009e68:	d119      	bne.n	8009e9e <ai_platform_network_post_init+0x42>
 8009e6a:	f7ff fb4b 	bl	8009504 <_ai_platform_acquire_crc>
 8009e6e:	4b3a      	ldr	r3, [pc, #232]	; (8009f58 <ai_platform_network_post_init+0xfc>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e7a:	d03b      	beq.n	8009ef4 <ai_platform_network_post_init+0x98>
 8009e7c:	4a37      	ldr	r2, [pc, #220]	; (8009f5c <ai_platform_network_post_init+0x100>)
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1fb      	bne.n	8009e84 <ai_platform_network_post_init+0x28>
 8009e8c:	4b34      	ldr	r3, [pc, #208]	; (8009f60 <ai_platform_network_post_init+0x104>)
 8009e8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009e92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e96:	4b33      	ldr	r3, [pc, #204]	; (8009f64 <ai_platform_network_post_init+0x108>)
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d037      	beq.n	8009f0c <ai_platform_network_post_init+0xb0>
 8009e9c:	e7fe      	b.n	8009e9c <ai_platform_network_post_init+0x40>
 8009e9e:	f7ff fb31 	bl	8009504 <_ai_platform_acquire_crc>
 8009ea2:	4b2d      	ldr	r3, [pc, #180]	; (8009f58 <ai_platform_network_post_init+0xfc>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eae:	d010      	beq.n	8009ed2 <ai_platform_network_post_init+0x76>
 8009eb0:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <ai_platform_network_post_init+0x100>)
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009eb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1fb      	bne.n	8009eb8 <ai_platform_network_post_init+0x5c>
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <ai_platform_network_post_init+0x104>)
 8009ec2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009ec6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009eca:	4b26      	ldr	r3, [pc, #152]	; (8009f64 <ai_platform_network_post_init+0x108>)
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d00d      	beq.n	8009eec <ai_platform_network_post_init+0x90>
 8009ed0:	e7fe      	b.n	8009ed0 <ai_platform_network_post_init+0x74>
 8009ed2:	4a25      	ldr	r2, [pc, #148]	; (8009f68 <ai_platform_network_post_init+0x10c>)
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	6093      	str	r3, [r2, #8]
 8009ed8:	6893      	ldr	r3, [r2, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1fc      	bne.n	8009ed8 <ai_platform_network_post_init+0x7c>
 8009ede:	4b20      	ldr	r3, [pc, #128]	; (8009f60 <ai_platform_network_post_init+0x104>)
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	6812      	ldr	r2, [r2, #0]
 8009ee4:	4b1f      	ldr	r3, [pc, #124]	; (8009f64 <ai_platform_network_post_init+0x108>)
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d000      	beq.n	8009eec <ai_platform_network_post_init+0x90>
 8009eea:	e7fe      	b.n	8009eea <ai_platform_network_post_init+0x8e>
 8009eec:	f7ff fb0c 	bl	8009508 <_ai_platform_release_crc>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	4a1c      	ldr	r2, [pc, #112]	; (8009f68 <ai_platform_network_post_init+0x10c>)
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	6093      	str	r3, [r2, #8]
 8009efa:	6893      	ldr	r3, [r2, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1fc      	bne.n	8009efa <ai_platform_network_post_init+0x9e>
 8009f00:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <ai_platform_network_post_init+0x104>)
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	4b17      	ldr	r3, [pc, #92]	; (8009f64 <ai_platform_network_post_init+0x108>)
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d11a      	bne.n	8009f42 <ai_platform_network_post_init+0xe6>
 8009f0c:	f7ff fafc 	bl	8009508 <_ai_platform_release_crc>
 8009f10:	68e3      	ldr	r3, [r4, #12]
 8009f12:	f013 0502 	ands.w	r5, r3, #2
 8009f16:	d015      	beq.n	8009f44 <ai_platform_network_post_init+0xe8>
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f001 fe7d 	bl	800bc18 <ai_layers_post_init_all>
 8009f1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f20:	b16b      	cbz	r3, 8009f3e <ai_platform_network_post_init+0xe2>
 8009f22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009f24:	e007      	b.n	8009f36 <ai_platform_network_post_init+0xda>
 8009f26:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8009f2a:	4798      	blx	r3
 8009f2c:	692b      	ldr	r3, [r5, #16]
 8009f2e:	42ab      	cmp	r3, r5
 8009f30:	d005      	beq.n	8009f3e <ai_platform_network_post_init+0xe2>
 8009f32:	b123      	cbz	r3, 8009f3e <ai_platform_network_post_init+0xe2>
 8009f34:	461d      	mov	r5, r3
 8009f36:	4629      	mov	r1, r5
 8009f38:	2000      	movs	r0, #0
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	d1f3      	bne.n	8009f26 <ai_platform_network_post_init+0xca>
 8009f3e:	2001      	movs	r0, #1
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
 8009f42:	e7fe      	b.n	8009f42 <ai_platform_network_post_init+0xe6>
 8009f44:	2210      	movs	r2, #16
 8009f46:	2111      	movs	r1, #17
 8009f48:	18a0      	adds	r0, r4, r2
 8009f4a:	f000 fa9d 	bl	800a488 <core_set_error>
 8009f4e:	4628      	mov	r0, r5
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	a1c00100 	.word	0xa1c00100
 8009f58:	e0042000 	.word	0xe0042000
 8009f5c:	58024000 	.word	0x58024000
 8009f60:	f407a5c2 	.word	0xf407a5c2
 8009f64:	b5e8b5cd 	.word	0xb5e8b5cd
 8009f68:	40023000 	.word	0x40023000

08009f6c <ai_platform_network_process>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	460e      	mov	r6, r1
 8009f72:	b085      	sub	sp, #20
 8009f74:	4693      	mov	fp, r2
 8009f76:	4605      	mov	r5, r0
 8009f78:	b120      	cbz	r0, 8009f84 <ai_platform_network_process+0x18>
 8009f7a:	4bb8      	ldr	r3, [pc, #736]	; (800a25c <ai_platform_network_process+0x2f0>)
 8009f7c:	6802      	ldr	r2, [r0, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	bf18      	it	ne
 8009f82:	2500      	movne	r5, #0
 8009f84:	f7ff fabe 	bl	8009504 <_ai_platform_acquire_crc>
 8009f88:	4bb5      	ldr	r3, [pc, #724]	; (800a260 <ai_platform_network_process+0x2f4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f94:	d010      	beq.n	8009fb8 <ai_platform_network_process+0x4c>
 8009f96:	4ab3      	ldr	r2, [pc, #716]	; (800a264 <ai_platform_network_process+0x2f8>)
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009f9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1fb      	bne.n	8009f9e <ai_platform_network_process+0x32>
 8009fa6:	4bb0      	ldr	r3, [pc, #704]	; (800a268 <ai_platform_network_process+0x2fc>)
 8009fa8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009fac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009fb0:	4bae      	ldr	r3, [pc, #696]	; (800a26c <ai_platform_network_process+0x300>)
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d00d      	beq.n	8009fd2 <ai_platform_network_process+0x66>
 8009fb6:	e7fe      	b.n	8009fb6 <ai_platform_network_process+0x4a>
 8009fb8:	4aad      	ldr	r2, [pc, #692]	; (800a270 <ai_platform_network_process+0x304>)
 8009fba:	2301      	movs	r3, #1
 8009fbc:	6093      	str	r3, [r2, #8]
 8009fbe:	6893      	ldr	r3, [r2, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1fc      	bne.n	8009fbe <ai_platform_network_process+0x52>
 8009fc4:	4ba8      	ldr	r3, [pc, #672]	; (800a268 <ai_platform_network_process+0x2fc>)
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	4ba8      	ldr	r3, [pc, #672]	; (800a26c <ai_platform_network_process+0x300>)
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	f040 812c 	bne.w	800a22a <ai_platform_network_process+0x2be>
 8009fd2:	f7ff fa99 	bl	8009508 <_ai_platform_release_crc>
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	f000 8154 	beq.w	800a284 <ai_platform_network_process+0x318>
 8009fdc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 8124 	beq.w	800a22c <ai_platform_network_process+0x2c0>
 8009fe4:	68eb      	ldr	r3, [r5, #12]
 8009fe6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2700      	movs	r7, #0
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	616f      	str	r7, [r5, #20]
 8009ff4:	f040 813e 	bne.w	800a274 <ai_platform_network_process+0x308>
 8009ff8:	2e00      	cmp	r6, #0
 8009ffa:	f000 811d 	beq.w	800a238 <ai_platform_network_process+0x2cc>
 8009ffe:	f1ba 0f00 	cmp.w	sl, #0
 800a002:	f000 8119 	beq.w	800a238 <ai_platform_network_process+0x2cc>
 800a006:	f8ba 3000 	ldrh.w	r3, [sl]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 8114 	beq.w	800a238 <ai_platform_network_process+0x2cc>
 800a010:	69b3      	ldr	r3, [r6, #24]
 800a012:	f8cd b00c 	str.w	fp, [sp, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800a01c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d072      	beq.n	800a10a <ai_platform_network_process+0x19e>
 800a024:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a028:	2c00      	cmp	r4, #0
 800a02a:	d06e      	beq.n	800a10a <ai_platform_network_process+0x19e>
 800a02c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a030:	f8d3 9000 	ldr.w	r9, [r3]
 800a034:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800a038:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a03c:	f000 81e0 	beq.w	800a400 <ai_platform_network_process+0x494>
 800a040:	69a3      	ldr	r3, [r4, #24]
 800a042:	2101      	movs	r1, #1
 800a044:	4630      	mov	r0, r6
 800a046:	685d      	ldr	r5, [r3, #4]
 800a048:	f7ff fa0e 	bl	8009468 <ai_buffer_get_size>
 800a04c:	4285      	cmp	r5, r0
 800a04e:	f0c0 811b 	bcc.w	800a288 <ai_platform_network_process+0x31c>
 800a052:	68e0      	ldr	r0, [r4, #12]
 800a054:	69b1      	ldr	r1, [r6, #24]
 800a056:	68c2      	ldr	r2, [r0, #12]
 800a058:	68cb      	ldr	r3, [r1, #12]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f040 8114 	bne.w	800a288 <ai_platform_network_process+0x31c>
 800a060:	6882      	ldr	r2, [r0, #8]
 800a062:	688b      	ldr	r3, [r1, #8]
 800a064:	429a      	cmp	r2, r3
 800a066:	f040 810f 	bne.w	800a288 <ai_platform_network_process+0x31c>
 800a06a:	6842      	ldr	r2, [r0, #4]
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	f040 810a 	bne.w	800a288 <ai_platform_network_process+0x31c>
 800a074:	69a3      	ldr	r3, [r4, #24]
 800a076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a07a:	f002 f801 	bl	800c080 <ai_array_get_data_byte_size>
 800a07e:	4605      	mov	r5, r0
 800a080:	4620      	mov	r0, r4
 800a082:	f001 ff51 	bl	800bf28 <get_tensor_byte_size>
 800a086:	4285      	cmp	r5, r0
 800a088:	f0c0 80fe 	bcc.w	800a288 <ai_platform_network_process+0x31c>
 800a08c:	69a3      	ldr	r3, [r4, #24]
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	f001 ff62 	bl	800bf58 <ai_array_to_buffer_fmt>
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	4058      	eors	r0, r3
 800a098:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a09c:	f040 81bb 	bne.w	800a416 <ai_platform_network_process+0x4aa>
 800a0a0:	6873      	ldr	r3, [r6, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 81ae 	beq.w	800a404 <ai_platform_network_process+0x498>
 800a0a8:	69b3      	ldr	r3, [r6, #24]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 819e 	beq.w	800a3ee <ai_platform_network_process+0x482>
 800a0b2:	9a01      	ldr	r2, [sp, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	bf38      	it	cc
 800a0b8:	461a      	movcc	r2, r3
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	9201      	str	r2, [sp, #4]
 800a0be:	f001 ff33 	bl	800bf28 <get_tensor_byte_size>
 800a0c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0c6:	69b3      	ldr	r3, [r6, #24]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	fb00 f303 	mul.w	r3, r0, r3
 800a0ce:	f8c8 300c 	str.w	r3, [r8, #12]
 800a0d2:	6871      	ldr	r1, [r6, #4]
 800a0d4:	f8c8 1004 	str.w	r1, [r8, #4]
 800a0d8:	440b      	add	r3, r1
 800a0da:	f849 300b 	str.w	r3, [r9, fp]
 800a0de:	69a0      	ldr	r0, [r4, #24]
 800a0e0:	6803      	ldr	r3, [r0, #0]
 800a0e2:	009a      	lsls	r2, r3, #2
 800a0e4:	f107 0701 	add.w	r7, r7, #1
 800a0e8:	f106 061c 	add.w	r6, r6, #28
 800a0ec:	f100 80af 	bmi.w	800a24e <ai_platform_network_process+0x2e2>
 800a0f0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	4419      	add	r1, r3
 800a0f8:	6081      	str	r1, [r0, #8]
 800a0fa:	69a3      	ldr	r3, [r4, #24]
 800a0fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	f8ba 3000 	ldrh.w	r3, [sl]
 800a106:	42bb      	cmp	r3, r7
 800a108:	d888      	bhi.n	800a01c <ai_platform_network_process+0xb0>
 800a10a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800a10e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800a110:	f1bb 0f00 	cmp.w	fp, #0
 800a114:	f000 8188 	beq.w	800a428 <ai_platform_network_process+0x4bc>
 800a118:	2a01      	cmp	r2, #1
 800a11a:	f240 8160 	bls.w	800a3de <ai_platform_network_process+0x472>
 800a11e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800a122:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8159 	beq.w	800a3de <ai_platform_network_process+0x472>
 800a12c:	465e      	mov	r6, fp
 800a12e:	2700      	movs	r7, #0
 800a130:	462c      	mov	r4, r5
 800a132:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80b4 	beq.w	800a2a4 <ai_platform_network_process+0x338>
 800a13c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800a140:	2d00      	cmp	r5, #0
 800a142:	f000 80af 	beq.w	800a2a4 <ai_platform_network_process+0x338>
 800a146:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a14a:	f8d3 8000 	ldr.w	r8, [r3]
 800a14e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800a152:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a156:	f000 8173 	beq.w	800a440 <ai_platform_network_process+0x4d4>
 800a15a:	69ab      	ldr	r3, [r5, #24]
 800a15c:	2101      	movs	r1, #1
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff f980 	bl	8009468 <ai_buffer_get_size>
 800a168:	9b02      	ldr	r3, [sp, #8]
 800a16a:	4283      	cmp	r3, r0
 800a16c:	f0c0 8136 	bcc.w	800a3dc <ai_platform_network_process+0x470>
 800a170:	68e8      	ldr	r0, [r5, #12]
 800a172:	69b1      	ldr	r1, [r6, #24]
 800a174:	68c2      	ldr	r2, [r0, #12]
 800a176:	68cb      	ldr	r3, [r1, #12]
 800a178:	429a      	cmp	r2, r3
 800a17a:	f040 812f 	bne.w	800a3dc <ai_platform_network_process+0x470>
 800a17e:	6882      	ldr	r2, [r0, #8]
 800a180:	688b      	ldr	r3, [r1, #8]
 800a182:	429a      	cmp	r2, r3
 800a184:	f040 812a 	bne.w	800a3dc <ai_platform_network_process+0x470>
 800a188:	6842      	ldr	r2, [r0, #4]
 800a18a:	684b      	ldr	r3, [r1, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	f040 8125 	bne.w	800a3dc <ai_platform_network_process+0x470>
 800a192:	69ab      	ldr	r3, [r5, #24]
 800a194:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a198:	f001 ff72 	bl	800c080 <ai_array_get_data_byte_size>
 800a19c:	9002      	str	r0, [sp, #8]
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f001 fec2 	bl	800bf28 <get_tensor_byte_size>
 800a1a4:	9b02      	ldr	r3, [sp, #8]
 800a1a6:	4283      	cmp	r3, r0
 800a1a8:	f0c0 8118 	bcc.w	800a3dc <ai_platform_network_process+0x470>
 800a1ac:	69ab      	ldr	r3, [r5, #24]
 800a1ae:	6818      	ldr	r0, [r3, #0]
 800a1b0:	f001 fed2 	bl	800bf58 <ai_array_to_buffer_fmt>
 800a1b4:	6833      	ldr	r3, [r6, #0]
 800a1b6:	4058      	eors	r0, r3
 800a1b8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a1bc:	f040 8138 	bne.w	800a430 <ai_platform_network_process+0x4c4>
 800a1c0:	6873      	ldr	r3, [r6, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 814f 	beq.w	800a466 <ai_platform_network_process+0x4fa>
 800a1c8:	69b3      	ldr	r3, [r6, #24]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 8141 	beq.w	800a454 <ai_platform_network_process+0x4e8>
 800a1d2:	9a01      	ldr	r2, [sp, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	bf38      	it	cc
 800a1d8:	461a      	movcc	r2, r3
 800a1da:	4628      	mov	r0, r5
 800a1dc:	9201      	str	r2, [sp, #4]
 800a1de:	f001 fea3 	bl	800bf28 <get_tensor_byte_size>
 800a1e2:	f8ca 0008 	str.w	r0, [sl, #8]
 800a1e6:	69b3      	ldr	r3, [r6, #24]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	fb00 f303 	mul.w	r3, r0, r3
 800a1ee:	f8ca 300c 	str.w	r3, [sl, #12]
 800a1f2:	6871      	ldr	r1, [r6, #4]
 800a1f4:	f8ca 1004 	str.w	r1, [sl, #4]
 800a1f8:	440b      	add	r3, r1
 800a1fa:	f848 300b 	str.w	r3, [r8, fp]
 800a1fe:	69a8      	ldr	r0, [r5, #24]
 800a200:	6803      	ldr	r3, [r0, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	f107 0701 	add.w	r7, r7, #1
 800a208:	f106 061c 	add.w	r6, r6, #28
 800a20c:	d445      	bmi.n	800a29a <ai_platform_network_process+0x32e>
 800a20e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	4419      	add	r1, r3
 800a216:	6081      	str	r1, [r0, #8]
 800a218:	69ab      	ldr	r3, [r5, #24]
 800a21a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a21e:	60da      	str	r2, [r3, #12]
 800a220:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a224:	429f      	cmp	r7, r3
 800a226:	d384      	bcc.n	800a132 <ai_platform_network_process+0x1c6>
 800a228:	e03c      	b.n	800a2a4 <ai_platform_network_process+0x338>
 800a22a:	e7fe      	b.n	800a22a <ai_platform_network_process+0x2be>
 800a22c:	68ea      	ldr	r2, [r5, #12]
 800a22e:	616b      	str	r3, [r5, #20]
 800a230:	f002 0203 	and.w	r2, r2, #3
 800a234:	2a03      	cmp	r2, #3
 800a236:	d11d      	bne.n	800a274 <ai_platform_network_process+0x308>
 800a238:	2217      	movs	r2, #23
 800a23a:	2112      	movs	r1, #18
 800a23c:	f105 0010 	add.w	r0, r5, #16
 800a240:	f000 f922 	bl	800a488 <core_set_error>
 800a244:	2400      	movs	r4, #0
 800a246:	4620      	mov	r0, r4
 800a248:	b005      	add	sp, #20
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	f8ba 3000 	ldrh.w	r3, [sl]
 800a252:	429f      	cmp	r7, r3
 800a254:	f4ff aee2 	bcc.w	800a01c <ai_platform_network_process+0xb0>
 800a258:	e757      	b.n	800a10a <ai_platform_network_process+0x19e>
 800a25a:	bf00      	nop
 800a25c:	a1c00100 	.word	0xa1c00100
 800a260:	e0042000 	.word	0xe0042000
 800a264:	58024000 	.word	0x58024000
 800a268:	f407a5c2 	.word	0xf407a5c2
 800a26c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a270:	40023000 	.word	0x40023000
 800a274:	2230      	movs	r2, #48	; 0x30
 800a276:	2111      	movs	r1, #17
 800a278:	f105 0010 	add.w	r0, r5, #16
 800a27c:	f000 f904 	bl	800a488 <core_set_error>
 800a280:	2400      	movs	r4, #0
 800a282:	e7e0      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a284:	462c      	mov	r4, r5
 800a286:	e7de      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a288:	9d02      	ldr	r5, [sp, #8]
 800a28a:	2218      	movs	r2, #24
 800a28c:	2112      	movs	r1, #18
 800a28e:	f105 0010 	add.w	r0, r5, #16
 800a292:	f000 f8f9 	bl	800a488 <core_set_error>
 800a296:	2400      	movs	r4, #0
 800a298:	e7d5      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a29a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a29e:	429f      	cmp	r7, r3
 800a2a0:	f4ff af47 	bcc.w	800a132 <ai_platform_network_process+0x1c6>
 800a2a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a2a8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800a2aa:	82a3      	strh	r3, [r4, #20]
 800a2ac:	4625      	mov	r5, r4
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	f040 808e 	bne.w	800a3d0 <ai_platform_network_process+0x464>
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	4617      	mov	r7, r2
 800a2b8:	8aec      	ldrh	r4, [r5, #22]
 800a2ba:	429c      	cmp	r4, r3
 800a2bc:	bf38      	it	cc
 800a2be:	46ab      	movcc	fp, r5
 800a2c0:	d2c1      	bcs.n	800a246 <ai_platform_network_process+0x2da>
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d030      	beq.n	800a328 <ai_platform_network_process+0x3bc>
 800a2c6:	f04f 0800 	mov.w	r8, #0
 800a2ca:	e014      	b.n	800a2f6 <ai_platform_network_process+0x38a>
 800a2cc:	6882      	ldr	r2, [r0, #8]
 800a2ce:	68c5      	ldr	r5, [r0, #12]
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	1b52      	subs	r2, r2, r5
 800a2d4:	4413      	add	r3, r2
 800a2d6:	6083      	str	r3, [r0, #8]
 800a2d8:	698b      	ldr	r3, [r1, #24]
 800a2da:	6862      	ldr	r2, [r4, #4]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a2e2:	f859 200a 	ldr.w	r2, [r9, sl]
 800a2e6:	440b      	add	r3, r1
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	bf24      	itt	cs
 800a2ec:	68e3      	ldrcs	r3, [r4, #12]
 800a2ee:	1ad3      	subcs	r3, r2, r3
 800a2f0:	6063      	str	r3, [r4, #4]
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	8833      	ldrh	r3, [r6, #0]
 800a2f8:	4543      	cmp	r3, r8
 800a2fa:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a2fe:	d913      	bls.n	800a328 <ai_platform_network_process+0x3bc>
 800a300:	6873      	ldr	r3, [r6, #4]
 800a302:	b18b      	cbz	r3, 800a328 <ai_platform_network_process+0x3bc>
 800a304:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800a308:	b171      	cbz	r1, 800a328 <ai_platform_network_process+0x3bc>
 800a30a:	6988      	ldr	r0, [r1, #24]
 800a30c:	68b2      	ldr	r2, [r6, #8]
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	f8d2 9000 	ldr.w	r9, [r2]
 800a314:	009d      	lsls	r5, r3, #2
 800a316:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a31a:	d5d7      	bpl.n	800a2cc <ai_platform_network_process+0x360>
 800a31c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800a320:	6880      	ldr	r0, [r0, #8]
 800a322:	f001 ffeb 	bl	800c2fc <memcpy>
 800a326:	e7da      	b.n	800a2de <ai_platform_network_process+0x372>
 800a328:	4658      	mov	r0, fp
 800a32a:	f001 fc89 	bl	800bc40 <ai_layers_forward_all>
 800a32e:	2f00      	cmp	r7, #0
 800a330:	d03f      	beq.n	800a3b2 <ai_platform_network_process+0x446>
 800a332:	2400      	movs	r4, #0
 800a334:	e016      	b.n	800a364 <ai_platform_network_process+0x3f8>
 800a336:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800a33a:	f859 100a 	ldr.w	r1, [r9, sl]
 800a33e:	4413      	add	r3, r2
 800a340:	428b      	cmp	r3, r1
 800a342:	bf24      	itt	cs
 800a344:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a348:	1acb      	subcs	r3, r1, r3
 800a34a:	f8c8 3004 	str.w	r3, [r8, #4]
 800a34e:	6981      	ldr	r1, [r0, #24]
 800a350:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a354:	1b52      	subs	r2, r2, r5
 800a356:	4413      	add	r3, r2
 800a358:	608b      	str	r3, [r1, #8]
 800a35a:	6983      	ldr	r3, [r0, #24]
 800a35c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	3401      	adds	r4, #1
 800a364:	883b      	ldrh	r3, [r7, #0]
 800a366:	42a3      	cmp	r3, r4
 800a368:	d923      	bls.n	800a3b2 <ai_platform_network_process+0x446>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	b30b      	cbz	r3, 800a3b2 <ai_platform_network_process+0x446>
 800a36e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a372:	b1f0      	cbz	r0, 800a3b2 <ai_platform_network_process+0x446>
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	6983      	ldr	r3, [r0, #24]
 800a378:	f8d2 9000 	ldr.w	r9, [r2]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	0092      	lsls	r2, r2, #2
 800a380:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a384:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a388:	d5d5      	bpl.n	800a336 <ai_platform_network_process+0x3ca>
 800a38a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a38e:	6899      	ldr	r1, [r3, #8]
 800a390:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a394:	f001 ffb2 	bl	800c2fc <memcpy>
 800a398:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a39c:	f859 200a 	ldr.w	r2, [r9, sl]
 800a3a0:	440b      	add	r3, r1
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	bf24      	itt	cs
 800a3a6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a3aa:	1ad3      	subcs	r3, r2, r3
 800a3ac:	f8c8 3004 	str.w	r3, [r8, #4]
 800a3b0:	e7d7      	b.n	800a362 <ai_platform_network_process+0x3f6>
 800a3b2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800a3b6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	b2a4      	uxth	r4, r4
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	f8ab 4016 	strh.w	r4, [fp, #22]
 800a3c4:	f63f af7d 	bhi.w	800a2c2 <ai_platform_network_process+0x356>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	b005      	add	sp, #20
 800a3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d0:	2a01      	cmp	r2, #1
 800a3d2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800a3d4:	d03c      	beq.n	800a450 <ai_platform_network_process+0x4e4>
 800a3d6:	f106 070c 	add.w	r7, r6, #12
 800a3da:	e76d      	b.n	800a2b8 <ai_platform_network_process+0x34c>
 800a3dc:	4625      	mov	r5, r4
 800a3de:	2218      	movs	r2, #24
 800a3e0:	2113      	movs	r1, #19
 800a3e2:	f105 0010 	add.w	r0, r5, #16
 800a3e6:	f000 f84f 	bl	800a488 <core_set_error>
 800a3ea:	2400      	movs	r4, #0
 800a3ec:	e72b      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a3ee:	9d02      	ldr	r5, [sp, #8]
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	2221      	movs	r2, #33	; 0x21
 800a3f4:	2112      	movs	r1, #18
 800a3f6:	f105 0010 	add.w	r0, r5, #16
 800a3fa:	f000 f845 	bl	800a488 <core_set_error>
 800a3fe:	e722      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a400:	9d02      	ldr	r5, [sp, #8]
 800a402:	e719      	b.n	800a238 <ai_platform_network_process+0x2cc>
 800a404:	9d02      	ldr	r5, [sp, #8]
 800a406:	4604      	mov	r4, r0
 800a408:	2217      	movs	r2, #23
 800a40a:	2112      	movs	r1, #18
 800a40c:	f105 0010 	add.w	r0, r5, #16
 800a410:	f000 f83a 	bl	800a488 <core_set_error>
 800a414:	e717      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a416:	9d02      	ldr	r5, [sp, #8]
 800a418:	2219      	movs	r2, #25
 800a41a:	2112      	movs	r1, #18
 800a41c:	f105 0010 	add.w	r0, r5, #16
 800a420:	f000 f832 	bl	800a488 <core_set_error>
 800a424:	2400      	movs	r4, #0
 800a426:	e70e      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a428:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a42c:	82ab      	strh	r3, [r5, #20]
 800a42e:	e73e      	b.n	800a2ae <ai_platform_network_process+0x342>
 800a430:	f104 0010 	add.w	r0, r4, #16
 800a434:	2219      	movs	r2, #25
 800a436:	2113      	movs	r1, #19
 800a438:	f000 f826 	bl	800a488 <core_set_error>
 800a43c:	2400      	movs	r4, #0
 800a43e:	e702      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a440:	f104 0010 	add.w	r0, r4, #16
 800a444:	2217      	movs	r2, #23
 800a446:	2113      	movs	r1, #19
 800a448:	f000 f81e 	bl	800a488 <core_set_error>
 800a44c:	4654      	mov	r4, sl
 800a44e:	e6fa      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a450:	2700      	movs	r7, #0
 800a452:	e731      	b.n	800a2b8 <ai_platform_network_process+0x34c>
 800a454:	4625      	mov	r5, r4
 800a456:	2221      	movs	r2, #33	; 0x21
 800a458:	4604      	mov	r4, r0
 800a45a:	2113      	movs	r1, #19
 800a45c:	f105 0010 	add.w	r0, r5, #16
 800a460:	f000 f812 	bl	800a488 <core_set_error>
 800a464:	e6ef      	b.n	800a246 <ai_platform_network_process+0x2da>
 800a466:	4625      	mov	r5, r4
 800a468:	2217      	movs	r2, #23
 800a46a:	4604      	mov	r4, r0
 800a46c:	2113      	movs	r1, #19
 800a46e:	f105 0010 	add.w	r0, r5, #16
 800a472:	f000 f809 	bl	800a488 <core_set_error>
 800a476:	e6e6      	b.n	800a246 <ai_platform_network_process+0x2da>

0800a478 <core_init>:
 800a478:	2001      	movs	r0, #1
 800a47a:	4770      	bx	lr

0800a47c <core_get_error>:
 800a47c:	4603      	mov	r3, r0
 800a47e:	2200      	movs	r2, #0
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop

0800a488 <core_set_error>:
 800a488:	4603      	mov	r3, r0
 800a48a:	7800      	ldrb	r0, [r0, #0]
 800a48c:	b108      	cbz	r0, 800a492 <core_set_error+0xa>
 800a48e:	2000      	movs	r0, #0
 800a490:	4770      	bx	lr
 800a492:	7019      	strb	r1, [r3, #0]
 800a494:	6819      	ldr	r1, [r3, #0]
 800a496:	f362 211f 	bfi	r1, r2, #8, #24
 800a49a:	2001      	movs	r0, #1
 800a49c:	6019      	str	r1, [r3, #0]
 800a49e:	4770      	bx	lr

0800a4a0 <func_dummy>:
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop

0800a4a4 <ai_conv2d_stripe_f32.constprop.0>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	ed2d 8b02 	vpush	{d8}
 800a4ac:	b09d      	sub	sp, #116	; 0x74
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800a4b4:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
 800a4b8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800a4bc:	66f8      	str	r0, [r7, #108]	; 0x6c
 800a4be:	f1ba 0f01 	cmp.w	sl, #1
 800a4c2:	663b      	str	r3, [r7, #96]	; 0x60
 800a4c4:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800a4c8:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 800a4cc:	f8d7 c0cc 	ldr.w	ip, [r7, #204]	; 0xcc
 800a4d0:	f9b7 e0d4 	ldrsh.w	lr, [r7, #212]	; 0xd4
 800a4d4:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 800a4d8:	6579      	str	r1, [r7, #84]	; 0x54
 800a4da:	e9d7 3030 	ldrd	r3, r0, [r7, #192]	; 0xc0
 800a4de:	f000 812f 	beq.w	800a740 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800a4e2:	45b2      	cmp	sl, r6
 800a4e4:	f000 827a 	beq.w	800a9dc <ai_conv2d_stripe_f32.constprop.0+0x538>
 800a4e8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	f000 8115 	beq.w	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800a4f2:	fb93 f4f2 	sdiv	r4, r3, r2
 800a4f6:	fb02 3414 	mls	r4, r2, r4, r3
 800a4fa:	1b14      	subs	r4, r2, r4
 800a4fc:	1ac1      	subs	r1, r0, r3
 800a4fe:	fb94 f0f2 	sdiv	r0, r4, r2
 800a502:	fb02 4010 	mls	r0, r2, r0, r4
 800a506:	1a09      	subs	r1, r1, r0
 800a508:	4411      	add	r1, r2
 800a50a:	3901      	subs	r1, #1
 800a50c:	4418      	add	r0, r3
 800a50e:	fb91 f9f2 	sdiv	r9, r1, r2
 800a512:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800a516:	eddf 6a89 	vldr	s13, [pc, #548]	; 800a73c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800a51a:	4460      	add	r0, ip
 800a51c:	fb01 f100 	mul.w	r1, r1, r0
 800a520:	6239      	str	r1, [r7, #32]
 800a522:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800a526:	4413      	add	r3, r2
 800a528:	3b01      	subs	r3, #1
 800a52a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a52e:	fb01 f202 	mul.w	r2, r1, r2
 800a532:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a534:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a538:	fb02 f303 	mul.w	r3, r2, r3
 800a53c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a53e:	fb0e f306 	mul.w	r3, lr, r6
 800a542:	fbb6 f2fa 	udiv	r2, r6, sl
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a54c:	00b3      	lsls	r3, r6, #2
 800a54e:	61fb      	str	r3, [r7, #28]
 800a550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a554:	eba5 0509 	sub.w	r5, r5, r9
 800a558:	fb02 f303 	mul.w	r3, r2, r3
 800a55c:	fb05 f303 	mul.w	r3, r5, r3
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
 800a564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	633b      	str	r3, [r7, #48]	; 0x30
 800a56c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a570:	f1c3 0800 	rsb	r8, r3, #0
 800a574:	ebae 0303 	sub.w	r3, lr, r3
 800a578:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800a57c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a57e:	2300      	movs	r3, #0
 800a580:	653b      	str	r3, [r7, #80]	; 0x50
 800a582:	46cc      	mov	ip, r9
 800a584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a588:	f8c7 b014 	str.w	fp, [r7, #20]
 800a58c:	fbb3 f3fa 	udiv	r3, r3, sl
 800a590:	46d1      	mov	r9, sl
 800a592:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f2c0 80c5 	blt.w	800a728 <ai_conv2d_stripe_f32.constprop.0+0x284>
 800a59e:	2400      	movs	r4, #0
 800a5a0:	4673      	mov	r3, lr
 800a5a2:	4671      	mov	r1, lr
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	fb93 f3fe 	sdiv	r3, r3, lr
 800a5b2:	4403      	add	r3, r0
 800a5b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a5b6:	fb0b 0303 	mla	r3, fp, r3, r0
 800a5ba:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a5be:	4440      	add	r0, r8
 800a5c0:	42a8      	cmp	r0, r5
 800a5c2:	bf94      	ite	ls
 800a5c4:	ebc2 0200 	rsbls	r2, r2, r0
 800a5c8:	ebc2 0205 	rsbhi	r2, r2, r5
 800a5cc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800a5d0:	6a3d      	ldr	r5, [r7, #32]
 800a5d2:	4428      	add	r0, r5
 800a5d4:	4420      	add	r0, r4
 800a5d6:	fb91 f4fe 	sdiv	r4, r1, lr
 800a5da:	fb0e 1114 	mls	r1, lr, r4, r1
 800a5de:	1a52      	subs	r2, r2, r1
 800a5e0:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800a5e2:	4401      	add	r1, r0
 800a5e4:	69f8      	ldr	r0, [r7, #28]
 800a5e6:	fb00 4101 	mla	r1, r0, r1, r4
 800a5ea:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a5ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a5ee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800a5f0:	4472      	add	r2, lr
 800a5f2:	3a01      	subs	r2, #1
 800a5f4:	fb92 f6fe 	sdiv	r6, r2, lr
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	bf08      	it	eq
 800a5fe:	4622      	moveq	r2, r4
 800a600:	42a2      	cmp	r2, r4
 800a602:	637a      	str	r2, [r7, #52]	; 0x34
 800a604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a606:	fb0e 2116 	mls	r1, lr, r6, r2
 800a60a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a60e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a612:	bf08      	it	eq
 800a614:	eeb0 7a66 	vmoveq.f32	s14, s13
 800a618:	1b92      	subs	r2, r2, r6
 800a61a:	f1b9 0f00 	cmp.w	r9, #0
 800a61e:	d066      	beq.n	800a6ee <ai_conv2d_stripe_f32.constprop.0+0x24a>
 800a620:	fb0b f202 	mul.w	r2, fp, r2
 800a624:	643a      	str	r2, [r7, #64]	; 0x40
 800a626:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a62a:	fb00 f101 	mul.w	r1, r0, r1
 800a62e:	4591      	cmp	r9, r2
 800a630:	6479      	str	r1, [r7, #68]	; 0x44
 800a632:	d85c      	bhi.n	800a6ee <ai_conv2d_stripe_f32.constprop.0+0x24a>
 800a634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a636:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800a63a:	2500      	movs	r5, #0
 800a63c:	3a01      	subs	r2, #1
 800a63e:	46aa      	mov	sl, r5
 800a640:	61ba      	str	r2, [r7, #24]
 800a642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a644:	f8c7 a008 	str.w	sl, [r7, #8]
 800a648:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a64c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a64e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a650:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800a654:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a65c:	ecf2 7a01 	vldmia	r2!, {s15}
 800a660:	f1bc 0f00 	cmp.w	ip, #0
 800a664:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a668:	63ba      	str	r2, [r7, #56]	; 0x38
 800a66a:	dd22      	ble.n	800a6b2 <ai_conv2d_stripe_f32.constprop.0+0x20e>
 800a66c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a66e:	2100      	movs	r1, #0
 800a670:	2e00      	cmp	r6, #0
 800a672:	bfc8      	it	gt
 800a674:	2000      	movgt	r0, #0
 800a676:	dd15      	ble.n	800a6a4 <ai_conv2d_stripe_f32.constprop.0+0x200>
 800a678:	eb02 040b 	add.w	r4, r2, fp
 800a67c:	4294      	cmp	r4, r2
 800a67e:	d90c      	bls.n	800a69a <ai_conv2d_stripe_f32.constprop.0+0x1f6>
 800a680:	4696      	mov	lr, r2
 800a682:	469a      	mov	sl, r3
 800a684:	ecbe 6a01 	vldmia	lr!, {s12}
 800a688:	ecfa 5a01 	vldmia	sl!, {s11}
 800a68c:	4574      	cmp	r4, lr
 800a68e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a692:	d8f7      	bhi.n	800a684 <ai_conv2d_stripe_f32.constprop.0+0x1e0>
 800a694:	697c      	ldr	r4, [r7, #20]
 800a696:	4423      	add	r3, r4
 800a698:	4422      	add	r2, r4
 800a69a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800a69c:	3001      	adds	r0, #1
 800a69e:	4286      	cmp	r6, r0
 800a6a0:	4422      	add	r2, r4
 800a6a2:	d1e9      	bne.n	800a678 <ai_conv2d_stripe_f32.constprop.0+0x1d4>
 800a6a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a6a6:	3101      	adds	r1, #1
 800a6a8:	4402      	add	r2, r0
 800a6aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6ac:	458c      	cmp	ip, r1
 800a6ae:	4403      	add	r3, r0
 800a6b0:	d1de      	bne.n	800a670 <ai_conv2d_stripe_f32.constprop.0+0x1cc>
 800a6b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6b4:	ece2 7a01 	vstmia	r2!, {s15}
 800a6b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6bc:	4413      	add	r3, r2
 800a6be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6c0:	f108 0801 	add.w	r8, r8, #1
 800a6c4:	4542      	cmp	r2, r8
 800a6c6:	d8c8      	bhi.n	800a65a <ai_conv2d_stripe_f32.constprop.0+0x1b6>
 800a6c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800a6ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6d2:	445a      	add	r2, fp
 800a6d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	f10a 0a01 	add.w	sl, sl, #1
 800a6dc:	4589      	cmp	r9, r1
 800a6de:	bf88      	it	hi
 800a6e0:	2200      	movhi	r2, #0
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	45d1      	cmp	r9, sl
 800a6e6:	4415      	add	r5, r2
 800a6e8:	d1ab      	bne.n	800a642 <ai_conv2d_stripe_f32.constprop.0+0x19e>
 800a6ea:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800a6ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f4:	440a      	add	r2, r1
 800a6f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a6f8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a6fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6fe:	4411      	add	r1, r2
 800a700:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800a704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a706:	eba8 0802 	sub.w	r8, r8, r2
 800a70a:	1a8a      	subs	r2, r1, r2
 800a70c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a70e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a712:	3301      	adds	r3, #1
 800a714:	429a      	cmp	r2, r3
 800a716:	653b      	str	r3, [r7, #80]	; 0x50
 800a718:	f47f af3c 	bne.w	800a594 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800a71c:	3774      	adds	r7, #116	; 0x74
 800a71e:	46bd      	mov	sp, r7
 800a720:	ecbd 8b02 	vpop	{d8}
 800a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a728:	fb98 f1fe 	sdiv	r1, r8, lr
 800a72c:	fb0e 8111 	mls	r1, lr, r1, r8
 800a730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a732:	ebae 0101 	sub.w	r1, lr, r1
 800a736:	4642      	mov	r2, r8
 800a738:	4644      	mov	r4, r8
 800a73a:	e734      	b.n	800a5a6 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800a73c:	00000000 	.word	0x00000000
 800a740:	fb0e f102 	mul.w	r1, lr, r2
 800a744:	2901      	cmp	r1, #1
 800a746:	f47f aecf 	bne.w	800a4e8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800a74a:	1ac1      	subs	r1, r0, r3
 800a74c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a750:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a752:	00b1      	lsls	r1, r6, #2
 800a754:	63b9      	str	r1, [r7, #56]	; 0x38
 800a756:	fb01 f100 	mul.w	r1, r1, r0
 800a75a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a75c:	eb0c 0203 	add.w	r2, ip, r3
 800a760:	fb01 0102 	mla	r1, r1, r2, r0
 800a764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a766:	65b9      	str	r1, [r7, #88]	; 0x58
 800a768:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800a76c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a770:	f080 8269 	bcs.w	800ac46 <ai_conv2d_stripe_f32.constprop.0+0x7a2>
 800a774:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a778:	2a00      	cmp	r2, #0
 800a77a:	d0cf      	beq.n	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800a77c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a780:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a784:	ed1f 6a13 	vldr	s12, [pc, #-76]	; 800a73c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800a788:	fb05 f202 	mul.w	r2, r5, r2
 800a78c:	fb00 f303 	mul.w	r3, r0, r3
 800a790:	fb06 f202 	mul.w	r2, r6, r2
 800a794:	64bb      	str	r3, [r7, #72]	; 0x48
 800a796:	0093      	lsls	r3, r2, #2
 800a798:	643b      	str	r3, [r7, #64]	; 0x40
 800a79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a79c:	fb03 f306 	mul.w	r3, r3, r6
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7a8:	fb03 f306 	mul.w	r3, r3, r6
 800a7ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a7b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7be:	2300      	movs	r3, #0
 800a7c0:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 8106 	beq.w	800a9d6 <ai_conv2d_stripe_f32.constprop.0+0x532>
 800a7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7cc:	ecf3 6a01 	vldmia	r3!, {s13}
 800a7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80ea 	beq.w	800a9b0 <ai_conv2d_stripe_f32.constprop.0+0x50c>
 800a7dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7e0:	f8d7 90c8 	ldr.w	r9, [r7, #200]	; 0xc8
 800a7e4:	425d      	negs	r5, r3
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ee:	f04f 0b00 	mov.w	fp, #0
 800a7f2:	f1b9 0f00 	cmp.w	r9, #0
 800a7f6:	f2c0 8221 	blt.w	800ac3c <ai_conv2d_stripe_f32.constprop.0+0x798>
 800a7fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7fe:	2300      	movs	r3, #0
 800a800:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a802:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a804:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800a808:	fb02 0c06 	mla	ip, r2, r6, r0
 800a80c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a810:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a814:	4428      	add	r0, r5
 800a816:	42a0      	cmp	r0, r4
 800a818:	bf94      	ite	ls
 800a81a:	ebc3 0300 	rsbls	r3, r3, r0
 800a81e:	ebc3 0304 	rsbhi	r3, r3, r4
 800a822:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a826:	1ac4      	subs	r4, r0, r3
 800a828:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a82c:	1ac0      	subs	r0, r0, r3
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
 800a832:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a834:	2a00      	cmp	r2, #0
 800a836:	eeb0 7a66 	vmov.f32	s14, s13
 800a83a:	f340 80a5 	ble.w	800a988 <ai_conv2d_stripe_f32.constprop.0+0x4e4>
 800a83e:	fb06 f204 	mul.w	r2, r6, r4
 800a842:	637a      	str	r2, [r7, #52]	; 0x34
 800a844:	fb06 f200 	mul.w	r2, r6, r0
 800a848:	f023 060f 	bic.w	r6, r3, #15
 800a84c:	1e70      	subs	r0, r6, #1
 800a84e:	0900      	lsrs	r0, r0, #4
 800a850:	3001      	adds	r0, #1
 800a852:	633a      	str	r2, [r7, #48]	; 0x30
 800a854:	0102      	lsls	r2, r0, #4
 800a856:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a858:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800a85c:	2400      	movs	r4, #0
 800a85e:	4662      	mov	r2, ip
 800a860:	2e00      	cmp	r6, #0
 800a862:	bfd8      	it	le
 800a864:	2000      	movle	r0, #0
 800a866:	dd72      	ble.n	800a94e <ai_conv2d_stripe_f32.constprop.0+0x4aa>
 800a868:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800a86c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a870:	f04f 0800 	mov.w	r8, #0
 800a874:	ed50 4a0f 	vldr	s9, [r0, #-60]	; 0xffffffc4
 800a878:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800a87c:	ed1c 5a10 	vldr	s10, [ip, #-64]	; 0xffffffc0
 800a880:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 800a884:	ed5c 3a0d 	vldr	s7, [ip, #-52]	; 0xffffffcc
 800a888:	ed1c 4a0c 	vldr	s8, [ip, #-48]	; 0xffffffd0
 800a88c:	ed1c 2a0a 	vldr	s4, [ip, #-40]	; 0xffffffd8
 800a890:	ed50 2a0a 	vldr	s5, [r0, #-40]	; 0xffffffd8
 800a894:	ed1c 3a09 	vldr	s6, [ip, #-36]	; 0xffffffdc
 800a898:	ed1c 0a06 	vldr	s0, [ip, #-24]	; 0xffffffe8
 800a89c:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 800a8a0:	ed1c 1a05 	vldr	s2, [ip, #-20]	; 0xffffffec
 800a8a4:	ed50 1a05 	vldr	s3, [r0, #-20]	; 0xffffffec
 800a8a8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a8ac:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800a8b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a8b4:	f108 0810 	add.w	r8, r8, #16
 800a8b8:	45b0      	cmp	r8, r6
 800a8ba:	ed10 5a0e 	vldr	s10, [r0, #-56]	; 0xffffffc8
 800a8be:	ed50 5a0d 	vldr	s11, [r0, #-52]	; 0xffffffcc
 800a8c2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a8c6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800a8ca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a8ce:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 800a8d2:	ed1c 5a1b 	vldr	s10, [ip, #-108]	; 0xffffff94
 800a8d6:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800a8da:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 800a8de:	ed50 3a19 	vldr	s7, [r0, #-100]	; 0xffffff9c
 800a8e2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a8e6:	ed1c 4a18 	vldr	s8, [ip, #-96]	; 0xffffffa0
 800a8ea:	ed50 4a18 	vldr	s9, [r0, #-96]	; 0xffffffa0
 800a8ee:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a8f2:	ed1c 5a17 	vldr	s10, [ip, #-92]	; 0xffffffa4
 800a8f6:	ed50 5a17 	vldr	s11, [r0, #-92]	; 0xffffffa4
 800a8fa:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a8fe:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800a902:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800a906:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a90a:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800a90e:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800a912:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a916:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800a91a:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800a91e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a922:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800a926:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800a92a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a92e:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a932:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a936:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a93a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a93e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a942:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a946:	db95      	blt.n	800a874 <ai_conv2d_stripe_f32.constprop.0+0x3d0>
 800a948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a94a:	4471      	add	r1, lr
 800a94c:	4472      	add	r2, lr
 800a94e:	4283      	cmp	r3, r0
 800a950:	dd11      	ble.n	800a976 <ai_conv2d_stripe_f32.constprop.0+0x4d2>
 800a952:	4684      	mov	ip, r0
 800a954:	468a      	mov	sl, r1
 800a956:	4690      	mov	r8, r2
 800a958:	ecf8 5a01 	vldmia	r8!, {s11}
 800a95c:	ecfa 7a01 	vldmia	sl!, {s15}
 800a960:	f10c 0c01 	add.w	ip, ip, #1
 800a964:	4563      	cmp	r3, ip
 800a966:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a96a:	d1f5      	bne.n	800a958 <ai_conv2d_stripe_f32.constprop.0+0x4b4>
 800a96c:	1a18      	subs	r0, r3, r0
 800a96e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a972:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a976:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a978:	4401      	add	r1, r0
 800a97a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a97c:	4402      	add	r2, r0
 800a97e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a980:	3401      	adds	r4, #1
 800a982:	42a0      	cmp	r0, r4
 800a984:	f47f af6c 	bne.w	800a860 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800a988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a98c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a98e:	ed83 7a00 	vstr	s14, [r3]
 800a992:	440b      	add	r3, r1
 800a994:	4491      	add	r9, r2
 800a996:	647b      	str	r3, [r7, #68]	; 0x44
 800a998:	1aad      	subs	r5, r5, r2
 800a99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99e:	4413      	add	r3, r2
 800a9a0:	657b      	str	r3, [r7, #84]	; 0x54
 800a9a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9a6:	f10b 0b01 	add.w	fp, fp, #1
 800a9aa:	455b      	cmp	r3, fp
 800a9ac:	f47f af21 	bne.w	800a7f2 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800a9b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b6:	440a      	add	r2, r1
 800a9b8:	66ba      	str	r2, [r7, #104]	; 0x68
 800a9ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9bc:	3204      	adds	r2, #4
 800a9be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a9ca:	f43f aea7 	beq.w	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800a9ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f47f aefa 	bne.w	800a7ca <ai_conv2d_stripe_f32.constprop.0+0x326>
 800a9d6:	eef0 6a46 	vmov.f32	s13, s12
 800a9da:	e6fa      	b.n	800a7d2 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800a9dc:	fb0e f102 	mul.w	r1, lr, r2
 800a9e0:	2901      	cmp	r1, #1
 800a9e2:	f47f ad81 	bne.w	800a4e8 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800a9e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	f43f ae96 	beq.w	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800a9f0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800a9f4:	ed5f 3aaf 	vldr	s7, [pc, #-700]	; 800a73c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800a9f8:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 800a9fc:	eb0c 0203 	add.w	r2, ip, r3
 800aa00:	fb01 f202 	mul.w	r2, r1, r2
 800aa04:	61fa      	str	r2, [r7, #28]
 800aa06:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800aa0a:	1a1a      	subs	r2, r3, r0
 800aa0c:	442a      	add	r2, r5
 800aa0e:	fb01 f202 	mul.w	r2, r1, r2
 800aa12:	1ac1      	subs	r1, r0, r3
 800aa14:	64f9      	str	r1, [r7, #76]	; 0x4c
 800aa16:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800aa1a:	fb03 f301 	mul.w	r3, r3, r1
 800aa1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa20:	0093      	lsls	r3, r2, #2
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa30:	f1c3 0b00 	rsb	fp, r3, #0
 800aa34:	00f3      	lsls	r3, r6, #3
 800aa36:	623b      	str	r3, [r7, #32]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	653b      	str	r3, [r7, #80]	; 0x50
 800aa3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa40:	fbb3 f3f6 	udiv	r3, r3, r6
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800aa50:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800aa54:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800aa58:	f2c0 80ea 	blt.w	800ac30 <ai_conv2d_stripe_f32.constprop.0+0x78c>
 800aa5c:	2500      	movs	r5, #0
 800aa5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa60:	462b      	mov	r3, r5
 800aa62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa66:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800aa6a:	69fc      	ldr	r4, [r7, #28]
 800aa6c:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800aa6e:	445a      	add	r2, fp
 800aa70:	4282      	cmp	r2, r0
 800aa72:	bf28      	it	cs
 800aa74:	4602      	movcs	r2, r0
 800aa76:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800aa7a:	1ad2      	subs	r2, r2, r3
 800aa7c:	1904      	adds	r4, r0, r4
 800aa7e:	2e00      	cmp	r6, #0
 800aa80:	f000 822b 	beq.w	800aeda <ai_conv2d_stripe_f32.constprop.0+0xa36>
 800aa84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa86:	647e      	str	r6, [r7, #68]	; 0x44
 800aa88:	429e      	cmp	r6, r3
 800aa8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa8c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800aa90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa94:	eba3 0002 	sub.w	r0, r3, r2
 800aa98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa9c:	fb03 f000 	mul.w	r0, r3, r0
 800aaa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aaa4:	bf14      	ite	ne
 800aaa6:	eeb0 3a62 	vmovne.f32	s6, s5
 800aaaa:	eeb0 3a63 	vmoveq.f32	s6, s7
 800aaae:	1a9b      	subs	r3, r3, r2
 800aab0:	442c      	add	r4, r5
 800aab2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800aab4:	fb08 5e04 	mla	lr, r8, r4, r5
 800aab8:	eb0e 0408 	add.w	r4, lr, r8
 800aabc:	45a6      	cmp	lr, r4
 800aabe:	62bc      	str	r4, [r7, #40]	; 0x28
 800aac0:	f080 809d 	bcs.w	800abfe <ai_conv2d_stripe_f32.constprop.0+0x75a>
 800aac4:	0080      	lsls	r0, r0, #2
 800aac6:	6378      	str	r0, [r7, #52]	; 0x34
 800aac8:	e9d7 0428 	ldrd	r0, r4, [r7, #160]	; 0xa0
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	633b      	str	r3, [r7, #48]	; 0x30
 800aad0:	42a0      	cmp	r0, r4
 800aad2:	f022 0303 	bic.w	r3, r2, #3
 800aad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aad8:	f200 8091 	bhi.w	800abfe <ai_conv2d_stripe_f32.constprop.0+0x75a>
 800aadc:	1e58      	subs	r0, r3, #1
 800aade:	0880      	lsrs	r0, r0, #2
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	fb00 a00a 	mla	r0, r0, sl, sl
 800aae6:	6138      	str	r0, [r7, #16]
 800aae8:	f04f 0900 	mov.w	r9, #0
 800aaec:	0118      	lsls	r0, r3, #4
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	6178      	str	r0, [r7, #20]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800aaf8:	f8c7 b008 	str.w	fp, [r7, #8]
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab00:	4499      	add	r9, r3
 800ab02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab04:	181c      	adds	r4, r3, r0
 800ab06:	65bc      	str	r4, [r7, #88]	; 0x58
 800ab08:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800ab0a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ab0e:	1820      	adds	r0, r4, r0
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
 800ab12:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ab16:	6438      	str	r0, [r7, #64]	; 0x40
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab1c:	ecb3 7a01 	vldmia	r3!, {s14}
 800ab20:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ab2a:	dd57      	ble.n	800abdc <ai_conv2d_stripe_f32.constprop.0+0x738>
 800ab2c:	4675      	mov	r5, lr
 800ab2e:	f04f 0b00 	mov.w	fp, #0
 800ab32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfd8      	it	le
 800ab38:	2400      	movle	r4, #0
 800ab3a:	dd32      	ble.n	800aba2 <ai_conv2d_stripe_f32.constprop.0+0x6fe>
 800ab3c:	6a38      	ldr	r0, [r7, #32]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	182c      	adds	r4, r5, r0
 800ab42:	f101 0310 	add.w	r3, r1, #16
 800ab46:	4628      	mov	r0, r5
 800ab48:	2600      	movs	r6, #0
 800ab4a:	eb00 0c08 	add.w	ip, r0, r8
 800ab4e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800ab52:	eddc 7a00 	vldr	s15, [ip]
 800ab56:	ed53 4a04 	vldr	s9, [r3, #-16]
 800ab5a:	ed90 5a00 	vldr	s10, [r0]
 800ab5e:	edd4 6a00 	vldr	s13, [r4]
 800ab62:	ed53 5a02 	vldr	s11, [r3, #-8]
 800ab66:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ab6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab6c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ab70:	eb04 0c08 	add.w	ip, r4, r8
 800ab74:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ab78:	3604      	adds	r6, #4
 800ab7a:	4296      	cmp	r6, r2
 800ab7c:	f103 0310 	add.w	r3, r3, #16
 800ab80:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800ab84:	4450      	add	r0, sl
 800ab86:	4454      	add	r4, sl
 800ab88:	eddc 6a00 	vldr	s13, [ip]
 800ab8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ab90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab94:	dbd9      	blt.n	800ab4a <ai_conv2d_stripe_f32.constprop.0+0x6a6>
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	68fc      	ldr	r4, [r7, #12]
 800ab9c:	441d      	add	r5, r3
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	4419      	add	r1, r3
 800aba2:	42a2      	cmp	r2, r4
 800aba4:	dd11      	ble.n	800abca <ai_conv2d_stripe_f32.constprop.0+0x726>
 800aba6:	4620      	mov	r0, r4
 800aba8:	462b      	mov	r3, r5
 800abaa:	460e      	mov	r6, r1
 800abac:	edd3 7a00 	vldr	s15, [r3]
 800abb0:	ecf6 6a01 	vldmia	r6!, {s13}
 800abb4:	3001      	adds	r0, #1
 800abb6:	4290      	cmp	r0, r2
 800abb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800abbc:	4443      	add	r3, r8
 800abbe:	d1f5      	bne.n	800abac <ai_conv2d_stripe_f32.constprop.0+0x708>
 800abc0:	1b14      	subs	r4, r2, r4
 800abc2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abc6:	fb04 5508 	mla	r5, r4, r8, r5
 800abca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abcc:	441d      	add	r5, r3
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	4419      	add	r1, r3
 800abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd4:	f10b 0b01 	add.w	fp, fp, #1
 800abd8:	459b      	cmp	fp, r3
 800abda:	d1aa      	bne.n	800ab32 <ai_conv2d_stripe_f32.constprop.0+0x68e>
 800abdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abde:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800abe0:	eca3 7a01 	vstmia	r3!, {s14}
 800abe4:	643b      	str	r3, [r7, #64]	; 0x40
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	4419      	add	r1, r3
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	4283      	cmp	r3, r0
 800abee:	d194      	bne.n	800ab1a <ai_conv2d_stripe_f32.constprop.0+0x676>
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	f10e 0e04 	add.w	lr, lr, #4
 800abf6:	459e      	cmp	lr, r3
 800abf8:	d380      	bcc.n	800aafc <ai_conv2d_stripe_f32.constprop.0+0x658>
 800abfa:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800abfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac04:	440a      	add	r2, r1
 800ac06:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ac0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac0e:	440a      	add	r2, r1
 800ac10:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800ac14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac18:	3301      	adds	r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac1e:	ebab 0b01 	sub.w	fp, fp, r1
 800ac22:	f43f ad7b 	beq.w	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800ac26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f6bf af16 	bge.w	800aa5c <ai_conv2d_stripe_f32.constprop.0+0x5b8>
 800ac30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac32:	465b      	mov	r3, fp
 800ac34:	eb02 010b 	add.w	r1, r2, fp
 800ac38:	465d      	mov	r5, fp
 800ac3a:	e712      	b.n	800aa62 <ai_conv2d_stripe_f32.constprop.0+0x5be>
 800ac3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac40:	462b      	mov	r3, r5
 800ac42:	442a      	add	r2, r5
 800ac44:	e5dc      	b.n	800a800 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800ac46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac4a:	fb02 f505 	mul.w	r5, r2, r5
 800ac4e:	fb06 f205 	mul.w	r2, r6, r5
 800ac52:	0095      	lsls	r5, r2, #2
 800ac54:	637a      	str	r2, [r7, #52]	; 0x34
 800ac56:	1dea      	adds	r2, r5, #7
 800ac58:	f022 0207 	bic.w	r2, r2, #7
 800ac5c:	4669      	mov	r1, sp
 800ac5e:	ebad 0d02 	sub.w	sp, sp, r2
 800ac62:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ac66:	ee08 1a90 	vmov	s17, r1
 800ac6a:	46e9      	mov	r9, sp
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	f000 8130 	beq.w	800aed2 <ai_conv2d_stripe_f32.constprop.0+0xa2e>
 800ac72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac76:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 800af10 <ai_conv2d_stripe_f32.constprop.0+0xa6c>
 800ac7a:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
 800ac82:	647b      	str	r3, [r7, #68]	; 0x44
 800ac84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac88:	fb03 f306 	mul.w	r3, r3, r6
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	623b      	str	r3, [r7, #32]
 800ac90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac94:	fb03 f306 	mul.w	r3, r3, r6
 800ac98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acaa:	2300      	movs	r3, #0
 800acac:	46ca      	mov	sl, r9
 800acae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acb0:	46a9      	mov	r9, r5
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	b123      	cbz	r3, 800acc0 <ai_conv2d_stripe_f32.constprop.0+0x81c>
 800acb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acb8:	464a      	mov	r2, r9
 800acba:	4650      	mov	r0, sl
 800acbc:	f001 fb1e 	bl	800c2fc <memcpy>
 800acc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8120 	beq.w	800af08 <ai_conv2d_stripe_f32.constprop.0+0xa64>
 800acc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acca:	ecf3 6a01 	vldmia	r3!, {s13}
 800acce:	64bb      	str	r3, [r7, #72]	; 0x48
 800acd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80ee 	beq.w	800aeb6 <ai_conv2d_stripe_f32.constprop.0+0xa12>
 800acda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acde:	f8c7 901c 	str.w	r9, [r7, #28]
 800ace2:	425d      	negs	r5, r3
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	653b      	str	r3, [r7, #80]	; 0x50
 800ace8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acea:	643b      	str	r3, [r7, #64]	; 0x40
 800acec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acf0:	657b      	str	r3, [r7, #84]	; 0x54
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f2c0 8100 	blt.w	800aefe <ai_conv2d_stripe_f32.constprop.0+0xa5a>
 800acfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800ad08:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
 800ad0c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800ad0e:	4428      	add	r0, r5
 800ad10:	42b0      	cmp	r0, r6
 800ad12:	bf94      	ite	ls
 800ad14:	ebc3 0300 	rsbls	r3, r3, r0
 800ad18:	ebc3 0306 	rsbhi	r3, r3, r6
 800ad1c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800ad20:	eba0 0c03 	sub.w	ip, r0, r3
 800ad24:	1af0      	subs	r0, r6, r3
 800ad26:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800ad2a:	fb06 f303 	mul.w	r3, r6, r3
 800ad2e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	fb02 a204 	mla	r2, r2, r4, sl
 800ad36:	eeb0 7a66 	vmov.f32	s14, s13
 800ad3a:	f340 80a2 	ble.w	800ae82 <ai_conv2d_stripe_f32.constprop.0+0x9de>
 800ad3e:	fb04 f000 	mul.w	r0, r4, r0
 800ad42:	f023 060f 	bic.w	r6, r3, #15
 800ad46:	6338      	str	r0, [r7, #48]	; 0x30
 800ad48:	1e70      	subs	r0, r6, #1
 800ad4a:	0900      	lsrs	r0, r0, #4
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800ad52:	0100      	lsls	r0, r0, #4
 800ad54:	fb04 fc0c 	mul.w	ip, r4, ip
 800ad58:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad5a:	2400      	movs	r4, #0
 800ad5c:	2e00      	cmp	r6, #0
 800ad5e:	bfd8      	it	le
 800ad60:	2000      	movle	r0, #0
 800ad62:	dd72      	ble.n	800ae4a <ai_conv2d_stripe_f32.constprop.0+0x9a6>
 800ad64:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800ad68:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800ad6c:	f04f 0900 	mov.w	r9, #0
 800ad70:	ed10 5a0f 	vldr	s10, [r0, #-60]	; 0xffffffc4
 800ad74:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800ad78:	ed5e 5a10 	vldr	s11, [lr, #-64]	; 0xffffffc0
 800ad7c:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 800ad80:	ed1e 4a0d 	vldr	s8, [lr, #-52]	; 0xffffffcc
 800ad84:	ed5e 4a0c 	vldr	s9, [lr, #-48]	; 0xffffffd0
 800ad88:	ed5e 2a0a 	vldr	s5, [lr, #-40]	; 0xffffffd8
 800ad8c:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 800ad90:	ed5e 3a09 	vldr	s7, [lr, #-36]	; 0xffffffdc
 800ad94:	ed5e 0a06 	vldr	s1, [lr, #-24]	; 0xffffffe8
 800ad98:	ed10 1a06 	vldr	s2, [r0, #-24]	; 0xffffffe8
 800ad9c:	ed5e 1a05 	vldr	s3, [lr, #-20]	; 0xffffffec
 800ada0:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800ada4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ada8:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800adac:	eee5 7a86 	vfma.f32	s15, s11, s12
 800adb0:	f109 0910 	add.w	r9, r9, #16
 800adb4:	45b1      	cmp	r9, r6
 800adb6:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800adba:	ed10 6a0d 	vldr	s12, [r0, #-52]	; 0xffffffcc
 800adbe:	eee5 7a25 	vfma.f32	s15, s10, s11
 800adc2:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800adc6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800adca:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 800adce:	ed5e 5a1b 	vldr	s11, [lr, #-108]	; 0xffffff94
 800add2:	eee4 7a06 	vfma.f32	s15, s8, s12
 800add6:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 800adda:	ed10 4a19 	vldr	s8, [r0, #-100]	; 0xffffff9c
 800adde:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ade2:	ed5e 4a18 	vldr	s9, [lr, #-96]	; 0xffffffa0
 800ade6:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 800adea:	eee5 7a86 	vfma.f32	s15, s11, s12
 800adee:	ed5e 5a17 	vldr	s11, [lr, #-92]	; 0xffffffa4
 800adf2:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 800adf6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800adfa:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800adfe:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800ae02:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ae06:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800ae0a:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800ae0e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ae12:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800ae16:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800ae1a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ae1e:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800ae22:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800ae26:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ae2a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800ae2e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ae32:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ae36:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ae3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ae3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae42:	db95      	blt.n	800ad70 <ai_conv2d_stripe_f32.constprop.0+0x8cc>
 800ae44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae46:	4441      	add	r1, r8
 800ae48:	4442      	add	r2, r8
 800ae4a:	4283      	cmp	r3, r0
 800ae4c:	dd11      	ble.n	800ae72 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800ae4e:	4686      	mov	lr, r0
 800ae50:	468b      	mov	fp, r1
 800ae52:	4691      	mov	r9, r2
 800ae54:	ecb9 6a01 	vldmia	r9!, {s12}
 800ae58:	ecfb 7a01 	vldmia	fp!, {s15}
 800ae5c:	f10e 0e01 	add.w	lr, lr, #1
 800ae60:	4573      	cmp	r3, lr
 800ae62:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ae66:	d1f5      	bne.n	800ae54 <ai_conv2d_stripe_f32.constprop.0+0x9b0>
 800ae68:	1a18      	subs	r0, r3, r0
 800ae6a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ae6e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ae72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae74:	4402      	add	r2, r0
 800ae76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ae78:	3401      	adds	r4, #1
 800ae7a:	42a0      	cmp	r0, r4
 800ae7c:	4461      	add	r1, ip
 800ae7e:	f47f af6d 	bne.w	800ad5c <ai_conv2d_stripe_f32.constprop.0+0x8b8>
 800ae82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae84:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ae86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8a:	ed82 7a00 	vstr	s14, [r2]
 800ae8e:	4401      	add	r1, r0
 800ae90:	6579      	str	r1, [r7, #84]	; 0x54
 800ae92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae94:	440a      	add	r2, r1
 800ae96:	643a      	str	r2, [r7, #64]	; 0x40
 800ae98:	6a39      	ldr	r1, [r7, #32]
 800ae9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae9c:	440a      	add	r2, r1
 800ae9e:	653a      	str	r2, [r7, #80]	; 0x50
 800aea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aea4:	3301      	adds	r3, #1
 800aea6:	429a      	cmp	r2, r3
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeaa:	eba5 0500 	sub.w	r5, r5, r0
 800aeae:	f47f af22 	bne.w	800acf6 <ai_conv2d_stripe_f32.constprop.0+0x852>
 800aeb2:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800aeb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aeb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeba:	444a      	add	r2, r9
 800aebc:	66ba      	str	r2, [r7, #104]	; 0x68
 800aebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aec0:	3204      	adds	r2, #4
 800aec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aec4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aec8:	3301      	adds	r3, #1
 800aeca:	429a      	cmp	r2, r3
 800aecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aece:	f47f aef0 	bne.w	800acb2 <ai_conv2d_stripe_f32.constprop.0+0x80e>
 800aed2:	ee18 3a90 	vmov	r3, s17
 800aed6:	469d      	mov	sp, r3
 800aed8:	e420      	b.n	800a71c <ai_conv2d_stripe_f32.constprop.0+0x278>
 800aeda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aedc:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800aede:	647e      	str	r6, [r7, #68]	; 0x44
 800aee0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800aee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aee8:	1a98      	subs	r0, r3, r2
 800aeea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aeee:	fb03 f000 	mul.w	r0, r3, r0
 800aef2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aef6:	eeb0 3a63 	vmov.f32	s6, s7
 800aefa:	1a9b      	subs	r3, r3, r2
 800aefc:	e5d8      	b.n	800aab0 <ai_conv2d_stripe_f32.constprop.0+0x60c>
 800aefe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af02:	462b      	mov	r3, r5
 800af04:	442a      	add	r2, r5
 800af06:	e6fd      	b.n	800ad04 <ai_conv2d_stripe_f32.constprop.0+0x860>
 800af08:	eef0 6a48 	vmov.f32	s13, s16
 800af0c:	e6e0      	b.n	800acd0 <ai_conv2d_stripe_f32.constprop.0+0x82c>
 800af0e:	bf00      	nop
 800af10:	00000000 	.word	0x00000000

0800af14 <ai_dict_decompress_f32>:
 800af14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af18:	9d08      	ldr	r5, [sp, #32]
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800af20:	d00e      	beq.n	800af40 <ai_dict_decompress_f32+0x2c>
 800af22:	2b08      	cmp	r3, #8
 800af24:	d10a      	bne.n	800af3c <ai_dict_decompress_f32+0x28>
 800af26:	42a8      	cmp	r0, r5
 800af28:	d208      	bcs.n	800af3c <ai_dict_decompress_f32+0x28>
 800af2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f840 3b04 	str.w	r3, [r0], #4
 800af38:	4285      	cmp	r5, r0
 800af3a:	d8f6      	bhi.n	800af2a <ai_dict_decompress_f32+0x16>
 800af3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af40:	9b07      	ldr	r3, [sp, #28]
 800af42:	085e      	lsrs	r6, r3, #1
 800af44:	f003 0701 	and.w	r7, r3, #1
 800af48:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800af4c:	f106 38ff 	add.w	r8, r6, #4294967295
 800af50:	42a8      	cmp	r0, r5
 800af52:	d2f3      	bcs.n	800af3c <ai_dict_decompress_f32+0x28>
 800af54:	b33e      	cbz	r6, 800afa6 <ai_dict_decompress_f32+0x92>
 800af56:	f100 0e08 	add.w	lr, r0, #8
 800af5a:	f101 3cff 	add.w	ip, r1, #4294967295
 800af5e:	eb01 0408 	add.w	r4, r1, r8
 800af62:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800af66:	091b      	lsrs	r3, r3, #4
 800af68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af6c:	f10e 0e08 	add.w	lr, lr, #8
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f84e 3c10 	str.w	r3, [lr, #-16]
 800af76:	f89c 3000 	ldrb.w	r3, [ip]
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af82:	4564      	cmp	r4, ip
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800af8a:	d1ea      	bne.n	800af62 <ai_dict_decompress_f32+0x4e>
 800af8c:	4431      	add	r1, r6
 800af8e:	4448      	add	r0, r9
 800af90:	2f00      	cmp	r7, #0
 800af92:	d0dd      	beq.n	800af50 <ai_dict_decompress_f32+0x3c>
 800af94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af98:	091b      	lsrs	r3, r3, #4
 800af9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f840 3b04 	str.w	r3, [r0], #4
 800afa4:	e7d4      	b.n	800af50 <ai_dict_decompress_f32+0x3c>
 800afa6:	2f00      	cmp	r7, #0
 800afa8:	d1f4      	bne.n	800af94 <ai_dict_decompress_f32+0x80>
 800afaa:	42a8      	cmp	r0, r5
 800afac:	d3fd      	bcc.n	800afaa <ai_dict_decompress_f32+0x96>
 800afae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afb2:	bf00      	nop

0800afb4 <forward_conv2d>:
 800afb4:	6982      	ldr	r2, [r0, #24]
 800afb6:	8813      	ldrh	r3, [r2, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8110 	beq.w	800b1de <forward_conv2d+0x22a>
 800afbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc2:	ed2d 8b04 	vpush	{d8-d9}
 800afc6:	6852      	ldr	r2, [r2, #4]
 800afc8:	6851      	ldr	r1, [r2, #4]
 800afca:	b0a9      	sub	sp, #164	; 0xa4
 800afcc:	4604      	mov	r4, r0
 800afce:	b101      	cbz	r1, 800afd2 <forward_conv2d+0x1e>
 800afd0:	6809      	ldr	r1, [r1, #0]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	f000 8151 	beq.w	800b27a <forward_conv2d+0x2c6>
 800afd8:	6915      	ldr	r5, [r2, #16]
 800afda:	b105      	cbz	r5, 800afde <forward_conv2d+0x2a>
 800afdc:	682d      	ldr	r5, [r5, #0]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	f000 80ff 	beq.w	800b1e2 <forward_conv2d+0x22e>
 800afe4:	69d3      	ldr	r3, [r2, #28]
 800afe6:	8b12      	ldrh	r2, [r2, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 8137 	beq.w	800b25c <forward_conv2d+0x2a8>
 800afee:	2a01      	cmp	r2, #1
 800aff0:	681e      	ldr	r6, [r3, #0]
 800aff2:	f240 8139 	bls.w	800b268 <forward_conv2d+0x2b4>
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	ee08 2a10 	vmov	s16, r2
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	68ca      	ldr	r2, [r1, #12]
 800b000:	6989      	ldr	r1, [r1, #24]
 800b002:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800b006:	6889      	ldr	r1, [r1, #8]
 800b008:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b00a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800b00e:	69b7      	ldr	r7, [r6, #24]
 800b010:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800b014:	f8dc b008 	ldr.w	fp, [ip, #8]
 800b018:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 800b01c:	ee09 1a10 	vmov	s18, r1
 800b020:	6851      	ldr	r1, [r2, #4]
 800b022:	911b      	str	r1, [sp, #108]	; 0x6c
 800b024:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b028:	9118      	str	r1, [sp, #96]	; 0x60
 800b02a:	68d1      	ldr	r1, [r2, #12]
 800b02c:	6892      	ldr	r2, [r2, #8]
 800b02e:	9223      	str	r2, [sp, #140]	; 0x8c
 800b030:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b032:	9224      	str	r2, [sp, #144]	; 0x90
 800b034:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b036:	9217      	str	r2, [sp, #92]	; 0x5c
 800b038:	6802      	ldr	r2, [r0, #0]
 800b03a:	9211      	str	r2, [sp, #68]	; 0x44
 800b03c:	6842      	ldr	r2, [r0, #4]
 800b03e:	921e      	str	r2, [sp, #120]	; 0x78
 800b040:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b042:	9210      	str	r2, [sp, #64]	; 0x40
 800b044:	f8de 2008 	ldr.w	r2, [lr, #8]
 800b048:	9219      	str	r2, [sp, #100]	; 0x64
 800b04a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b04e:	9122      	str	r1, [sp, #136]	; 0x88
 800b050:	921a      	str	r2, [sp, #104]	; 0x68
 800b052:	69e2      	ldr	r2, [r4, #28]
 800b054:	9225      	str	r2, [sp, #148]	; 0x94
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	ee08 2a90 	vmov	s17, r2
 800b05c:	ee18 2a10 	vmov	r2, s16
 800b060:	b11a      	cbz	r2, 800b06a <forward_conv2d+0xb6>
 800b062:	6992      	ldr	r2, [r2, #24]
 800b064:	6892      	ldr	r2, [r2, #8]
 800b066:	ee08 2a10 	vmov	s16, r2
 800b06a:	69aa      	ldr	r2, [r5, #24]
 800b06c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800b070:	6892      	ldr	r2, [r2, #8]
 800b072:	9216      	str	r2, [sp, #88]	; 0x58
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80de 	beq.w	800b236 <forward_conv2d+0x282>
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	f000 80e3 	beq.w	800b248 <forward_conv2d+0x294>
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	9327      	str	r3, [sp, #156]	; 0x9c
 800b08c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b090:	f000 ffce 	bl	800c030 <ai_array_get_byte_size>
 800b094:	69b7      	ldr	r7, [r6, #24]
 800b096:	9013      	str	r0, [sp, #76]	; 0x4c
 800b098:	4a7b      	ldr	r2, [pc, #492]	; (800b288 <forward_conv2d+0x2d4>)
 800b09a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b09c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2900      	cmp	r1, #0
 800b0a2:	bf08      	it	eq
 800b0a4:	4611      	moveq	r1, r2
 800b0a6:	9112      	str	r1, [sp, #72]	; 0x48
 800b0a8:	fa1f f18a 	uxth.w	r1, sl
 800b0ac:	1e70      	subs	r0, r6, #1
 800b0ae:	3901      	subs	r1, #1
 800b0b0:	fb00 6101 	mla	r1, r0, r1, r6
 800b0b4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b0b8:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b0ba:	911c      	str	r1, [sp, #112]	; 0x70
 800b0bc:	3a01      	subs	r2, #1
 800b0be:	1e41      	subs	r1, r0, #1
 800b0c0:	fb01 0202 	mla	r2, r1, r2, r0
 800b0c4:	921d      	str	r2, [sp, #116]	; 0x74
 800b0c6:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800b0ca:	2a04      	cmp	r2, #4
 800b0cc:	f000 808c 	beq.w	800b1e8 <forward_conv2d+0x234>
 800b0d0:	2a08      	cmp	r2, #8
 800b0d2:	f000 8089 	beq.w	800b1e8 <forward_conv2d+0x234>
 800b0d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b0da:	9315      	str	r3, [sp, #84]	; 0x54
 800b0dc:	425b      	negs	r3, r3
 800b0de:	9314      	str	r3, [sp, #80]	; 0x50
 800b0e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d076      	beq.n	800b1d4 <forward_conv2d+0x220>
 800b0e6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800b0ea:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800b0ee:	921e      	str	r2, [sp, #120]	; 0x78
 800b0f0:	425b      	negs	r3, r3
 800b0f2:	fa0f f28a 	sxth.w	r2, sl
 800b0f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b0fa:	9321      	str	r3, [sp, #132]	; 0x84
 800b0fc:	fb0b f30a 	mul.w	r3, fp, sl
 800b100:	921f      	str	r2, [sp, #124]	; 0x7c
 800b102:	9326      	str	r3, [sp, #152]	; 0x98
 800b104:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800b108:	9220      	str	r2, [sp, #128]	; 0x80
 800b10a:	2300      	movs	r3, #0
 800b10c:	4644      	mov	r4, r8
 800b10e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b110:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b112:	920e      	str	r2, [sp, #56]	; 0x38
 800b114:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b118:	920d      	str	r2, [sp, #52]	; 0x34
 800b11a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b11c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800b11e:	2b00      	cmp	r3, #0
 800b120:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b126:	930a      	str	r3, [sp, #40]	; 0x28
 800b128:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b136:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b138:	e9cd b303 	strd	fp, r3, [sp, #12]
 800b13c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b13e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b142:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b148:	4413      	add	r3, r2
 800b14a:	bfa8      	it	ge
 800b14c:	2200      	movge	r2, #0
 800b14e:	9208      	str	r2, [sp, #32]
 800b150:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b152:	4293      	cmp	r3, r2
 800b154:	bf28      	it	cs
 800b156:	4613      	movcs	r3, r2
 800b158:	9309      	str	r3, [sp, #36]	; 0x24
 800b15a:	ee18 2a90 	vmov	r2, s17
 800b15e:	ee18 3a10 	vmov	r3, s16
 800b162:	ee19 1a10 	vmov	r1, s18
 800b166:	4638      	mov	r0, r7
 800b168:	f7ff f99c 	bl	800a4a4 <ai_conv2d_stripe_f32.constprop.0>
 800b16c:	f1bb 0f00 	cmp.w	fp, #0
 800b170:	d020      	beq.n	800b1b4 <forward_conv2d+0x200>
 800b172:	2600      	movs	r6, #0
 800b174:	464a      	mov	r2, r9
 800b176:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800b17a:	9610      	str	r6, [sp, #64]	; 0x40
 800b17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b17e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b180:	9211      	str	r2, [sp, #68]	; 0x44
 800b182:	3301      	adds	r3, #1
 800b184:	9310      	str	r3, [sp, #64]	; 0x40
 800b186:	69ab      	ldr	r3, [r5, #24]
 800b188:	4629      	mov	r1, r5
 800b18a:	609f      	str	r7, [r3, #8]
 800b18c:	4628      	mov	r0, r5
 800b18e:	4623      	mov	r3, r4
 800b190:	47b0      	blx	r6
 800b192:	444c      	add	r4, r9
 800b194:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b196:	eba4 0308 	sub.w	r3, r4, r8
 800b19a:	4293      	cmp	r3, r2
 800b19c:	bfa8      	it	ge
 800b19e:	4644      	movge	r4, r8
 800b1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1a4:	459b      	cmp	fp, r3
 800b1a6:	4457      	add	r7, sl
 800b1a8:	d1e8      	bne.n	800b17c <forward_conv2d+0x1c8>
 800b1aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1ac:	4691      	mov	r9, r2
 800b1ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b1b0:	4413      	add	r3, r2
 800b1b2:	9316      	str	r3, [sp, #88]	; 0x58
 800b1b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b1ba:	4413      	add	r3, r2
 800b1bc:	9314      	str	r3, [sp, #80]	; 0x50
 800b1be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	9315      	str	r3, [sp, #84]	; 0x54
 800b1c4:	69ab      	ldr	r3, [r5, #24]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	609a      	str	r2, [r3, #8]
 800b1ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b1cc:	3101      	adds	r1, #1
 800b1ce:	428b      	cmp	r3, r1
 800b1d0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1d2:	d19d      	bne.n	800b110 <forward_conv2d+0x15c>
 800b1d4:	b029      	add	sp, #164	; 0xa4
 800b1d6:	ecbd 8b04 	vpop	{d8-d9}
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	deff      	udf	#255	; 0xff
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	deff      	udf	#255	; 0xff
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	2a00      	cmp	r2, #0
 800b1ec:	f43f af73 	beq.w	800b0d6 <forward_conv2d+0x122>
 800b1f0:	69a1      	ldr	r1, [r4, #24]
 800b1f2:	8808      	ldrh	r0, [r1, #0]
 800b1f4:	2803      	cmp	r0, #3
 800b1f6:	d943      	bls.n	800b280 <forward_conv2d+0x2cc>
 800b1f8:	6849      	ldr	r1, [r1, #4]
 800b1fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	d037      	beq.n	800b270 <forward_conv2d+0x2bc>
 800b200:	6809      	ldr	r1, [r1, #0]
 800b202:	2900      	cmp	r1, #0
 800b204:	d034      	beq.n	800b270 <forward_conv2d+0x2bc>
 800b206:	698c      	ldr	r4, [r1, #24]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b20e:	9401      	str	r4, [sp, #4]
 800b210:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800b212:	9400      	str	r4, [sp, #0]
 800b214:	ee18 4a90 	vmov	r4, s17
 800b218:	2800      	cmp	r0, #0
 800b21a:	bf18      	it	ne
 800b21c:	4604      	movne	r4, r0
 800b21e:	ee08 4a90 	vmov	s17, r4
 800b222:	f3c3 14c6 	ubfx	r4, r3, #7, #7
 800b226:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800b22a:	fa44 f303 	asr.w	r3, r4, r3
 800b22e:	b29b      	uxth	r3, r3
 800b230:	f7ff fe70 	bl	800af14 <ai_dict_decompress_f32>
 800b234:	e74f      	b.n	800b0d6 <forward_conv2d+0x122>
 800b236:	f1b8 0f00 	cmp.w	r8, #0
 800b23a:	d00b      	beq.n	800b254 <forward_conv2d+0x2a0>
 800b23c:	9327      	str	r3, [sp, #156]	; 0x9c
 800b23e:	2301      	movs	r3, #1
 800b240:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800b244:	9313      	str	r3, [sp, #76]	; 0x4c
 800b246:	e727      	b.n	800b098 <forward_conv2d+0xe4>
 800b248:	f1b8 0f00 	cmp.w	r8, #0
 800b24c:	d001      	beq.n	800b252 <forward_conv2d+0x29e>
 800b24e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800b252:	2300      	movs	r3, #0
 800b254:	9327      	str	r3, [sp, #156]	; 0x9c
 800b256:	2301      	movs	r3, #1
 800b258:	9313      	str	r3, [sp, #76]	; 0x4c
 800b25a:	e71d      	b.n	800b098 <forward_conv2d+0xe4>
 800b25c:	2a01      	cmp	r2, #1
 800b25e:	d90a      	bls.n	800b276 <forward_conv2d+0x2c2>
 800b260:	ee08 3a10 	vmov	s16, r3
 800b264:	461e      	mov	r6, r3
 800b266:	e6ca      	b.n	800affe <forward_conv2d+0x4a>
 800b268:	2200      	movs	r2, #0
 800b26a:	ee08 2a10 	vmov	s16, r2
 800b26e:	e6c5      	b.n	800affc <forward_conv2d+0x48>
 800b270:	2300      	movs	r3, #0
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	deff      	udf	#255	; 0xff
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	deff      	udf	#255	; 0xff
 800b27a:	2300      	movs	r3, #0
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	deff      	udf	#255	; 0xff
 800b280:	2300      	movs	r3, #0
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	deff      	udf	#255	; 0xff
 800b286:	bf00      	nop
 800b288:	0800a4a1 	.word	0x0800a4a1

0800b28c <forward_dense>:
 800b28c:	6983      	ldr	r3, [r0, #24]
 800b28e:	881a      	ldrh	r2, [r3, #0]
 800b290:	2a00      	cmp	r2, #0
 800b292:	f000 8181 	beq.w	800b598 <forward_dense+0x30c>
 800b296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29a:	ed2d 8b02 	vpush	{d8}
 800b29e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b2a2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800b2a6:	b095      	sub	sp, #84	; 0x54
 800b2a8:	b105      	cbz	r5, 800b2ac <forward_dense+0x20>
 800b2aa:	682d      	ldr	r5, [r5, #0]
 800b2ac:	2a01      	cmp	r2, #1
 800b2ae:	f000 828f 	beq.w	800b7d0 <forward_dense+0x544>
 800b2b2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800b2b6:	b106      	cbz	r6, 800b2ba <forward_dense+0x2e>
 800b2b8:	6836      	ldr	r6, [r6, #0]
 800b2ba:	2a02      	cmp	r2, #2
 800b2bc:	f000 816e 	beq.w	800b59c <forward_dense+0x310>
 800b2c0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800b2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 8274 	beq.w	800b7b4 <forward_dense+0x528>
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800b2d2:	6809      	ldr	r1, [r1, #0]
 800b2d4:	910d      	str	r1, [sp, #52]	; 0x34
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	f240 826e 	bls.w	800b7b8 <forward_dense+0x52c>
 800b2dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	68e8      	ldr	r0, [r5, #12]
 800b2e6:	68f7      	ldr	r7, [r6, #12]
 800b2e8:	6840      	ldr	r0, [r0, #4]
 800b2ea:	6999      	ldr	r1, [r3, #24]
 800b2ec:	9013      	str	r0, [sp, #76]	; 0x4c
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	680b      	ldr	r3, [r1, #0]
 800b2f2:	9012      	str	r0, [sp, #72]	; 0x48
 800b2f4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800b2f8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800b2fc:	fb00 f404 	mul.w	r4, r0, r4
 800b300:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800b304:	fa4e f000 	asr.w	r0, lr, r0
 800b308:	2a03      	cmp	r2, #3
 800b30a:	9010      	str	r0, [sp, #64]	; 0x40
 800b30c:	f000 825d 	beq.w	800b7ca <forward_dense+0x53e>
 800b310:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800b314:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800b318:	2a00      	cmp	r2, #0
 800b31a:	f000 8246 	beq.w	800b7aa <forward_dense+0x51e>
 800b31e:	6812      	ldr	r2, [r2, #0]
 800b320:	2a00      	cmp	r2, #0
 800b322:	f000 8242 	beq.w	800b7aa <forward_dense+0x51e>
 800b326:	2b04      	cmp	r3, #4
 800b328:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b32c:	f000 822c 	beq.w	800b788 <forward_dense+0x4fc>
 800b330:	2b08      	cmp	r3, #8
 800b332:	f000 8229 	beq.w	800b788 <forward_dense+0x4fc>
 800b336:	f04f 0b00 	mov.w	fp, #0
 800b33a:	69b2      	ldr	r2, [r6, #24]
 800b33c:	69ab      	ldr	r3, [r5, #24]
 800b33e:	6891      	ldr	r1, [r2, #8]
 800b340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	6952      	ldr	r2, [r2, #20]
 800b346:	9106      	str	r1, [sp, #24]
 800b348:	fb07 f404 	mul.w	r4, r7, r4
 800b34c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b352:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b356:	4281      	cmp	r1, r0
 800b358:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800b35c:	900e      	str	r0, [sp, #56]	; 0x38
 800b35e:	940c      	str	r4, [sp, #48]	; 0x30
 800b360:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800b364:	f080 8113 	bcs.w	800b58e <forward_dense+0x302>
 800b368:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b36a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800b5b8 <forward_dense+0x32c>
 800b36e:	f021 0201 	bic.w	r2, r1, #1
 800b372:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b376:	9204      	str	r2, [sp, #16]
 800b378:	f001 0201 	and.w	r2, r1, #1
 800b37c:	08c8      	lsrs	r0, r1, #3
 800b37e:	9208      	str	r2, [sp, #32]
 800b380:	008a      	lsls	r2, r1, #2
 800b382:	f001 0a07 	and.w	sl, r1, #7
 800b386:	920f      	str	r2, [sp, #60]	; 0x3c
 800b388:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800b38c:	3320      	adds	r3, #32
 800b38e:	465c      	mov	r4, fp
 800b390:	9007      	str	r0, [sp, #28]
 800b392:	46cb      	mov	fp, r9
 800b394:	9205      	str	r2, [sp, #20]
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	46c1      	mov	r9, r8
 800b39a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800b39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	9b02      	ldr	r3, [sp, #8]
 800b3a6:	3b20      	subs	r3, #32
 800b3a8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ac:	b10b      	cbz	r3, 800b3b2 <forward_dense+0x126>
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	f000 81da 	beq.w	800b76c <forward_dense+0x4e0>
 800b3b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b3ba:	2904      	cmp	r1, #4
 800b3bc:	9906      	ldr	r1, [sp, #24]
 800b3be:	f000 80fd 	beq.w	800b5bc <forward_dense+0x330>
 800b3c2:	4549      	cmp	r1, r9
 800b3c4:	f080 80d2 	bcs.w	800b56c <forward_dense+0x2e0>
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	9907      	ldr	r1, [sp, #28]
 800b3cc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3d0:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b3d4:	1c4e      	adds	r6, r1, #1
 800b3d6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b3da:	4694      	mov	ip, r2
 800b3dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b3de:	468e      	mov	lr, r1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80de 	beq.w	800b5a2 <forward_dense+0x316>
 800b3e6:	ecf3 2a01 	vldmia	r3!, {s5}
 800b3ea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b5b8 <forward_dense+0x32c>
 800b3ee:	f1be 0f00 	cmp.w	lr, #0
 800b3f2:	f000 80de 	beq.w	800b5b2 <forward_dense+0x326>
 800b3f6:	f10c 0108 	add.w	r1, ip, #8
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800b400:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800b404:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800b408:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800b40c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800b410:	ed10 5a04 	vldr	s10, [r0, #-16]
 800b414:	ed50 5a03 	vldr	s11, [r0, #-12]
 800b418:	ed10 6a02 	vldr	s12, [r0, #-8]
 800b41c:	ed50 6a01 	vldr	s13, [r0, #-4]
 800b420:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b424:	edd5 7a00 	vldr	s15, [r5]
 800b428:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800b42c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b430:	ee67 7a83 	vmul.f32	s15, s15, s6
 800b434:	ed95 3a00 	vldr	s6, [r5]
 800b438:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800b43c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b440:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b444:	3108      	adds	r1, #8
 800b446:	edd5 3a00 	vldr	s7, [r5]
 800b44a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800b44e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b452:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b456:	3020      	adds	r0, #32
 800b458:	ed95 4a00 	vldr	s8, [r5]
 800b45c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800b460:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b464:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b468:	edd5 4a00 	vldr	s9, [r5]
 800b46c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800b470:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b474:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b478:	ed95 5a00 	vldr	s10, [r5]
 800b47c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800b480:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b484:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b488:	edd5 5a00 	vldr	s11, [r5]
 800b48c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800b490:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b494:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b498:	428e      	cmp	r6, r1
 800b49a:	ed95 6a00 	vldr	s12, [r5]
 800b49e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b4a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4a6:	d1a9      	bne.n	800b3fc <forward_dense+0x170>
 800b4a8:	f1a6 0108 	sub.w	r1, r6, #8
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d04a      	beq.n	800b548 <forward_dense+0x2bc>
 800b4b2:	780d      	ldrb	r5, [r1, #0]
 800b4b4:	edd0 6a00 	vldr	s13, [r0]
 800b4b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4bc:	edd5 7a00 	vldr	s15, [r5]
 800b4c0:	2a01      	cmp	r2, #1
 800b4c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4c6:	d03f      	beq.n	800b548 <forward_dense+0x2bc>
 800b4c8:	784d      	ldrb	r5, [r1, #1]
 800b4ca:	edd0 6a01 	vldr	s13, [r0, #4]
 800b4ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4d2:	edd5 7a00 	vldr	s15, [r5]
 800b4d6:	2a02      	cmp	r2, #2
 800b4d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4dc:	d034      	beq.n	800b548 <forward_dense+0x2bc>
 800b4de:	788d      	ldrb	r5, [r1, #2]
 800b4e0:	edd0 6a02 	vldr	s13, [r0, #8]
 800b4e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4e8:	edd5 7a00 	vldr	s15, [r5]
 800b4ec:	2a03      	cmp	r2, #3
 800b4ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4f2:	d029      	beq.n	800b548 <forward_dense+0x2bc>
 800b4f4:	78cd      	ldrb	r5, [r1, #3]
 800b4f6:	edd0 6a03 	vldr	s13, [r0, #12]
 800b4fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b4fe:	edd5 7a00 	vldr	s15, [r5]
 800b502:	2a04      	cmp	r2, #4
 800b504:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b508:	d01e      	beq.n	800b548 <forward_dense+0x2bc>
 800b50a:	790d      	ldrb	r5, [r1, #4]
 800b50c:	edd0 6a04 	vldr	s13, [r0, #16]
 800b510:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b514:	edd5 7a00 	vldr	s15, [r5]
 800b518:	2a05      	cmp	r2, #5
 800b51a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b51e:	d013      	beq.n	800b548 <forward_dense+0x2bc>
 800b520:	794d      	ldrb	r5, [r1, #5]
 800b522:	edd0 6a05 	vldr	s13, [r0, #20]
 800b526:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b52a:	edd5 7a00 	vldr	s15, [r5]
 800b52e:	2a06      	cmp	r2, #6
 800b530:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b534:	d008      	beq.n	800b548 <forward_dense+0x2bc>
 800b536:	7989      	ldrb	r1, [r1, #6]
 800b538:	edd0 7a06 	vldr	s15, [r0, #24]
 800b53c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b540:	edd1 6a00 	vldr	s13, [r1]
 800b544:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b548:	44dc      	add	ip, fp
 800b54a:	445e      	add	r6, fp
 800b54c:	ee32 7a87 	vadd.f32	s14, s5, s14
 800b550:	eca7 7a01 	vstmia	r7!, {s14}
 800b554:	454f      	cmp	r7, r9
 800b556:	f4ff af43 	bcc.w	800b3e0 <forward_dense+0x154>
 800b55a:	9a06      	ldr	r2, [sp, #24]
 800b55c:	eba9 0302 	sub.w	r3, r9, r2
 800b560:	3b01      	subs	r3, #1
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	3304      	adds	r3, #4
 800b568:	18d3      	adds	r3, r2, r3
 800b56a:	9306      	str	r3, [sp, #24]
 800b56c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b56e:	9a05      	ldr	r2, [sp, #20]
 800b570:	4499      	add	r9, r3
 800b572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b574:	441a      	add	r2, r3
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	9a02      	ldr	r2, [sp, #8]
 800b57a:	441a      	add	r2, r3
 800b57c:	9202      	str	r2, [sp, #8]
 800b57e:	9a04      	ldr	r2, [sp, #16]
 800b580:	441a      	add	r2, r3
 800b582:	9204      	str	r2, [sp, #16]
 800b584:	9b06      	ldr	r3, [sp, #24]
 800b586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b588:	4293      	cmp	r3, r2
 800b58a:	f4ff af08 	bcc.w	800b39e <forward_dense+0x112>
 800b58e:	b015      	add	sp, #84	; 0x54
 800b590:	ecbd 8b02 	vpop	{d8}
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	6853      	ldr	r3, [r2, #4]
 800b59a:	deff      	udf	#255	; 0xff
 800b59c:	2300      	movs	r3, #0
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	deff      	udf	#255	; 0xff
 800b5a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b5b8 <forward_dense+0x32c>
 800b5a6:	eef0 2a48 	vmov.f32	s5, s16
 800b5aa:	f1be 0f00 	cmp.w	lr, #0
 800b5ae:	f47f af22 	bne.w	800b3f6 <forward_dense+0x16a>
 800b5b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5b4:	4661      	mov	r1, ip
 800b5b6:	e77a      	b.n	800b4ae <forward_dense+0x222>
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	4549      	cmp	r1, r9
 800b5be:	d2d5      	bcs.n	800b56c <forward_dense+0x2e0>
 800b5c0:	9807      	ldr	r0, [sp, #28]
 800b5c2:	9103      	str	r1, [sp, #12]
 800b5c4:	9904      	ldr	r1, [sp, #16]
 800b5c6:	f100 0c01 	add.w	ip, r0, #1
 800b5ca:	3901      	subs	r1, #1
 800b5cc:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b5d0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80b2 	beq.w	800b73c <forward_dense+0x4b0>
 800b5d8:	9907      	ldr	r1, [sp, #28]
 800b5da:	ecf3 2a01 	vldmia	r3!, {s5}
 800b5de:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800b5b8 <forward_dense+0x32c>
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	f000 80b2 	beq.w	800b74c <forward_dense+0x4c0>
 800b5e8:	9902      	ldr	r1, [sp, #8]
 800b5ea:	1d10      	adds	r0, r2, #4
 800b5ec:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800b5f0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800b5f4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800b5f8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 800b5fc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800b600:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800b604:	ed11 5a04 	vldr	s10, [r1, #-16]
 800b608:	ed51 5a03 	vldr	s11, [r1, #-12]
 800b60c:	ed11 6a02 	vldr	s12, [r1, #-8]
 800b610:	ed51 6a01 	vldr	s13, [r1, #-4]
 800b614:	f006 070f 	and.w	r7, r6, #15
 800b618:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b61c:	edd7 7a00 	vldr	s15, [r7]
 800b620:	0936      	lsrs	r6, r6, #4
 800b622:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b626:	ed96 3a00 	vldr	s6, [r6]
 800b62a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800b62e:	092e      	lsrs	r6, r5, #4
 800b630:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b634:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b638:	f005 050f 	and.w	r5, r5, #15
 800b63c:	edd6 3a00 	vldr	s7, [r6]
 800b640:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800b644:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b648:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b64c:	0937      	lsrs	r7, r6, #4
 800b64e:	ed95 4a00 	vldr	s8, [r5]
 800b652:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800b656:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b65a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b65e:	f006 060f 	and.w	r6, r6, #15
 800b662:	edd7 4a00 	vldr	s9, [r7]
 800b666:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b66a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b66e:	3004      	adds	r0, #4
 800b670:	ed96 5a00 	vldr	s10, [r6]
 800b674:	092e      	lsrs	r6, r5, #4
 800b676:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b67a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b67e:	f005 050f 	and.w	r5, r5, #15
 800b682:	edd6 5a00 	vldr	s11, [r6]
 800b686:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b68a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b68e:	4584      	cmp	ip, r0
 800b690:	ed95 6a00 	vldr	s12, [r5]
 800b694:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b698:	f101 0120 	add.w	r1, r1, #32
 800b69c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6a0:	d1a4      	bne.n	800b5ec <forward_dense+0x360>
 800b6a2:	f8dd e014 	ldr.w	lr, [sp, #20]
 800b6a6:	f1ac 0804 	sub.w	r8, ip, #4
 800b6aa:	9904      	ldr	r1, [sp, #16]
 800b6ac:	458e      	cmp	lr, r1
 800b6ae:	d22a      	bcs.n	800b706 <forward_dense+0x47a>
 800b6b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6b2:	eba1 070e 	sub.w	r7, r1, lr
 800b6b6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800b6ba:	f10e 0008 	add.w	r0, lr, #8
 800b6be:	f108 36ff 	add.w	r6, r8, #4294967295
 800b6c2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800b6c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6ca:	ed50 5a01 	vldr	s11, [r0, #-4]
 800b6ce:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b6d2:	f001 050f 	and.w	r5, r1, #15
 800b6d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800b6da:	edd5 7a00 	vldr	s15, [r5]
 800b6de:	0909      	lsrs	r1, r1, #4
 800b6e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b6e4:	ed91 6a00 	vldr	s12, [r1]
 800b6e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b6ec:	42b7      	cmp	r7, r6
 800b6ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b6f2:	f100 0008 	add.w	r0, r0, #8
 800b6f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6fa:	d1e4      	bne.n	800b6c6 <forward_dense+0x43a>
 800b6fc:	f10a 0a01 	add.w	sl, sl, #1
 800b700:	44d0      	add	r8, sl
 800b702:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800b706:	9908      	ldr	r1, [sp, #32]
 800b708:	b321      	cbz	r1, 800b754 <forward_dense+0x4c8>
 800b70a:	f898 1000 	ldrb.w	r1, [r8]
 800b70e:	edde 7a00 	vldr	s15, [lr]
 800b712:	0909      	lsrs	r1, r1, #4
 800b714:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800b718:	edd1 6a00 	vldr	s13, [r1]
 800b71c:	9903      	ldr	r1, [sp, #12]
 800b71e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b722:	445a      	add	r2, fp
 800b724:	44dc      	add	ip, fp
 800b726:	ee72 2a87 	vadd.f32	s5, s5, s14
 800b72a:	ece1 2a01 	vstmia	r1!, {s5}
 800b72e:	4589      	cmp	r9, r1
 800b730:	9103      	str	r1, [sp, #12]
 800b732:	f67f af12 	bls.w	800b55a <forward_dense+0x2ce>
 800b736:	2b00      	cmp	r3, #0
 800b738:	f47f af4e 	bne.w	800b5d8 <forward_dense+0x34c>
 800b73c:	9907      	ldr	r1, [sp, #28]
 800b73e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800b5b8 <forward_dense+0x32c>
 800b742:	eef0 2a48 	vmov.f32	s5, s16
 800b746:	2900      	cmp	r1, #0
 800b748:	f47f af4e 	bne.w	800b5e8 <forward_dense+0x35c>
 800b74c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800b750:	4690      	mov	r8, r2
 800b752:	e7aa      	b.n	800b6aa <forward_dense+0x41e>
 800b754:	9903      	ldr	r1, [sp, #12]
 800b756:	ee32 7a87 	vadd.f32	s14, s5, s14
 800b75a:	445a      	add	r2, fp
 800b75c:	eca1 7a01 	vstmia	r1!, {s14}
 800b760:	4549      	cmp	r1, r9
 800b762:	9103      	str	r1, [sp, #12]
 800b764:	44dc      	add	ip, fp
 800b766:	f4ff af34 	bcc.w	800b5d2 <forward_dense+0x346>
 800b76a:	e6f6      	b.n	800b55a <forward_dense+0x2ce>
 800b76c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b76e:	9d06      	ldr	r5, [sp, #24]
 800b770:	9101      	str	r1, [sp, #4]
 800b772:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b774:	9100      	str	r1, [sp, #0]
 800b776:	4628      	mov	r0, r5
 800b778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b77a:	f000 faab 	bl	800bcd4 <lite_dense_if32of32wf32>
 800b77e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b780:	462b      	mov	r3, r5
 800b782:	4413      	add	r3, r2
 800b784:	9306      	str	r3, [sp, #24]
 800b786:	e6f1      	b.n	800b56c <forward_dense+0x2e0>
 800b788:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800b78c:	f1b9 0f00 	cmp.w	r9, #0
 800b790:	d016      	beq.n	800b7c0 <forward_dense+0x534>
 800b792:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b796:	f000 fc4b 	bl	800c030 <ai_array_get_byte_size>
 800b79a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800b79e:	4602      	mov	r2, r0
 800b7a0:	4641      	mov	r1, r8
 800b7a2:	4658      	mov	r0, fp
 800b7a4:	f000 fdaa 	bl	800c2fc <memcpy>
 800b7a8:	e5c7      	b.n	800b33a <forward_dense+0xae>
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d00a      	beq.n	800b7c4 <forward_dense+0x538>
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	e5bd      	b.n	800b330 <forward_dense+0xa4>
 800b7b4:	930d      	str	r3, [sp, #52]	; 0x34
 800b7b6:	e595      	b.n	800b2e4 <forward_dense+0x58>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7bc:	460b      	mov	r3, r1
 800b7be:	e591      	b.n	800b2e4 <forward_dense+0x58>
 800b7c0:	46c3      	mov	fp, r8
 800b7c2:	e5ba      	b.n	800b33a <forward_dense+0xae>
 800b7c4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800b7c8:	e5b7      	b.n	800b33a <forward_dense+0xae>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	deff      	udf	#255	; 0xff
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	deff      	udf	#255	; 0xff
 800b7d6:	bf00      	nop

0800b7d8 <nl_func_relu_array_f32>:
 800b7d8:	b430      	push	{r4, r5}
 800b7da:	698c      	ldr	r4, [r1, #24]
 800b7dc:	6981      	ldr	r1, [r0, #24]
 800b7de:	68a5      	ldr	r5, [r4, #8]
 800b7e0:	6889      	ldr	r1, [r1, #8]
 800b7e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b7e6:	3a01      	subs	r2, #1
 800b7e8:	0093      	lsls	r3, r2, #2
 800b7ea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800b7ee:	4295      	cmp	r5, r2
 800b7f0:	d814      	bhi.n	800b81c <nl_func_relu_array_f32+0x44>
 800b7f2:	1d18      	adds	r0, r3, #4
 800b7f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b820 <nl_func_relu_array_f32+0x48>
 800b7f8:	1d13      	adds	r3, r2, #4
 800b7fa:	4401      	add	r1, r0
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	ed73 7a01 	vldmdb	r3!, {s15}
 800b802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80a:	bfb8      	it	lt
 800b80c:	eef0 7a47 	vmovlt.f32	s15, s14
 800b810:	ed61 7a01 	vstmdb	r1!, {s15}
 800b814:	68a0      	ldr	r0, [r4, #8]
 800b816:	3a08      	subs	r2, #8
 800b818:	4290      	cmp	r0, r2
 800b81a:	d9ef      	bls.n	800b7fc <nl_func_relu_array_f32+0x24>
 800b81c:	bc30      	pop	{r4, r5}
 800b81e:	4770      	bx	lr
 800b820:	00000000 	.word	0x00000000

0800b824 <forward_relu>:
 800b824:	6982      	ldr	r2, [r0, #24]
 800b826:	8813      	ldrh	r3, [r2, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d05b      	beq.n	800b8e4 <forward_relu+0xc0>
 800b82c:	6851      	ldr	r1, [r2, #4]
 800b82e:	684a      	ldr	r2, [r1, #4]
 800b830:	b102      	cbz	r2, 800b834 <forward_relu+0x10>
 800b832:	6812      	ldr	r2, [r2, #0]
 800b834:	2b01      	cmp	r3, #1
 800b836:	f000 8123 	beq.w	800ba80 <forward_relu+0x25c>
 800b83a:	b470      	push	{r4, r5, r6}
 800b83c:	6909      	ldr	r1, [r1, #16]
 800b83e:	b101      	cbz	r1, 800b842 <forward_relu+0x1e>
 800b840:	6809      	ldr	r1, [r1, #0]
 800b842:	69c6      	ldr	r6, [r0, #28]
 800b844:	2e00      	cmp	r6, #0
 800b846:	f000 8097 	beq.w	800b978 <forward_relu+0x154>
 800b84a:	6873      	ldr	r3, [r6, #4]
 800b84c:	6988      	ldr	r0, [r1, #24]
 800b84e:	6991      	ldr	r1, [r2, #24]
 800b850:	2b01      	cmp	r3, #1
 800b852:	f000 80c1 	beq.w	800b9d8 <forward_relu+0x1b4>
 800b856:	6893      	ldr	r3, [r2, #8]
 800b858:	6880      	ldr	r0, [r0, #8]
 800b85a:	688c      	ldr	r4, [r1, #8]
 800b85c:	0a1b      	lsrs	r3, r3, #8
 800b85e:	f000 80f2 	beq.w	800ba46 <forward_relu+0x222>
 800b862:	68d5      	ldr	r5, [r2, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b86a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b86e:	42ab      	cmp	r3, r5
 800b870:	fb01 f202 	mul.w	r2, r1, r2
 800b874:	d1f9      	bne.n	800b86a <forward_relu+0x46>
 800b876:	68b3      	ldr	r3, [r6, #8]
 800b878:	ed93 7a02 	vldr	s14, [r3, #8]
 800b87c:	edd3 6a00 	vldr	s13, [r3]
 800b880:	ed93 6a01 	vldr	s12, [r3, #4]
 800b884:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b888:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b88c:	3a01      	subs	r2, #1
 800b88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b892:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b896:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b89a:	d425      	bmi.n	800b8e8 <forward_relu+0xc4>
 800b89c:	429c      	cmp	r4, r3
 800b89e:	d81f      	bhi.n	800b8e0 <forward_relu+0xbc>
 800b8a0:	1d1a      	adds	r2, r3, #4
 800b8a2:	1d01      	adds	r1, r0, #4
 800b8a4:	e00d      	b.n	800b8c2 <forward_relu+0x9e>
 800b8a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ae:	db03      	blt.n	800b8b8 <forward_relu+0x94>
 800b8b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b8b8:	3b08      	subs	r3, #8
 800b8ba:	429c      	cmp	r4, r3
 800b8bc:	ed61 7a01 	vstmdb	r1!, {s15}
 800b8c0:	d80e      	bhi.n	800b8e0 <forward_relu+0xbc>
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	ed72 7a01 	vldmdb	r2!, {s15}
 800b8c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d0:	d9e9      	bls.n	800b8a6 <forward_relu+0x82>
 800b8d2:	3b08      	subs	r3, #8
 800b8d4:	eef0 7a47 	vmov.f32	s15, s14
 800b8d8:	429c      	cmp	r4, r3
 800b8da:	ed61 7a01 	vstmdb	r1!, {s15}
 800b8de:	d9f0      	bls.n	800b8c2 <forward_relu+0x9e>
 800b8e0:	bc70      	pop	{r4, r5, r6}
 800b8e2:	4770      	bx	lr
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	deff      	udf	#255	; 0xff
 800b8e8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f0:	d11f      	bne.n	800b932 <forward_relu+0x10e>
 800b8f2:	429c      	cmp	r4, r3
 800b8f4:	d8f4      	bhi.n	800b8e0 <forward_relu+0xbc>
 800b8f6:	1b1c      	subs	r4, r3, r4
 800b8f8:	f024 0403 	bic.w	r4, r4, #3
 800b8fc:	1d1a      	adds	r2, r3, #4
 800b8fe:	2500      	movs	r5, #0
 800b900:	1b1b      	subs	r3, r3, r4
 800b902:	1d01      	adds	r1, r0, #4
 800b904:	ed72 7a01 	vldmdb	r2!, {s15}
 800b908:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b910:	dc0a      	bgt.n	800b928 <forward_relu+0x104>
 800b912:	429a      	cmp	r2, r3
 800b914:	f841 5d04 	str.w	r5, [r1, #-4]!
 800b918:	d0e2      	beq.n	800b8e0 <forward_relu+0xbc>
 800b91a:	ed72 7a01 	vldmdb	r2!, {s15}
 800b91e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b926:	ddf4      	ble.n	800b912 <forward_relu+0xee>
 800b928:	429a      	cmp	r2, r3
 800b92a:	ed61 7a01 	vstmdb	r1!, {s15}
 800b92e:	d1e9      	bne.n	800b904 <forward_relu+0xe0>
 800b930:	e7d6      	b.n	800b8e0 <forward_relu+0xbc>
 800b932:	429c      	cmp	r4, r3
 800b934:	d8d4      	bhi.n	800b8e0 <forward_relu+0xbc>
 800b936:	1b1c      	subs	r4, r3, r4
 800b938:	f024 0403 	bic.w	r4, r4, #3
 800b93c:	1d1a      	adds	r2, r3, #4
 800b93e:	1d01      	adds	r1, r0, #4
 800b940:	1b1b      	subs	r3, r3, r4
 800b942:	ed72 7a01 	vldmdb	r2!, {s15}
 800b946:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94e:	db0e      	blt.n	800b96e <forward_relu+0x14a>
 800b950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b954:	4293      	cmp	r3, r2
 800b956:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b95a:	ed61 7a01 	vstmdb	r1!, {s15}
 800b95e:	d0bf      	beq.n	800b8e0 <forward_relu+0xbc>
 800b960:	ed72 7a01 	vldmdb	r2!, {s15}
 800b964:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96c:	daf0      	bge.n	800b950 <forward_relu+0x12c>
 800b96e:	4293      	cmp	r3, r2
 800b970:	ed61 7a01 	vstmdb	r1!, {s15}
 800b974:	d1e5      	bne.n	800b942 <forward_relu+0x11e>
 800b976:	e7b3      	b.n	800b8e0 <forward_relu+0xbc>
 800b978:	6893      	ldr	r3, [r2, #8]
 800b97a:	6989      	ldr	r1, [r1, #24]
 800b97c:	6990      	ldr	r0, [r2, #24]
 800b97e:	6889      	ldr	r1, [r1, #8]
 800b980:	6884      	ldr	r4, [r0, #8]
 800b982:	0a1b      	lsrs	r3, r3, #8
 800b984:	d075      	beq.n	800ba72 <forward_relu+0x24e>
 800b986:	68d5      	ldr	r5, [r2, #12]
 800b988:	2201      	movs	r2, #1
 800b98a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b98e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800b992:	429d      	cmp	r5, r3
 800b994:	fb00 f202 	mul.w	r2, r0, r2
 800b998:	d1f9      	bne.n	800b98e <forward_relu+0x16a>
 800b99a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b9a4:	4294      	cmp	r4, r2
 800b9a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b9aa:	d899      	bhi.n	800b8e0 <forward_relu+0xbc>
 800b9ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ba88 <forward_relu+0x264>
 800b9b0:	3204      	adds	r2, #4
 800b9b2:	3104      	adds	r1, #4
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	ed72 7a01 	vldmdb	r2!, {s15}
 800b9ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c2:	f1a3 0308 	sub.w	r3, r3, #8
 800b9c6:	bfb8      	it	lt
 800b9c8:	eef0 7a47 	vmovlt.f32	s15, s14
 800b9cc:	429c      	cmp	r4, r3
 800b9ce:	ed61 7a01 	vstmdb	r1!, {s15}
 800b9d2:	d9ef      	bls.n	800b9b4 <forward_relu+0x190>
 800b9d4:	bc70      	pop	{r4, r5, r6}
 800b9d6:	4770      	bx	lr
 800b9d8:	688c      	ldr	r4, [r1, #8]
 800b9da:	6891      	ldr	r1, [r2, #8]
 800b9dc:	6880      	ldr	r0, [r0, #8]
 800b9de:	0a09      	lsrs	r1, r1, #8
 800b9e0:	d049      	beq.n	800ba76 <forward_relu+0x252>
 800b9e2:	68d5      	ldr	r5, [r2, #12]
 800b9e4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800b9e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b9ec:	42aa      	cmp	r2, r5
 800b9ee:	fb01 f303 	mul.w	r3, r1, r3
 800b9f2:	d1f9      	bne.n	800b9e8 <forward_relu+0x1c4>
 800b9f4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800b9f8:	3a01      	subs	r2, #1
 800b9fa:	68b1      	ldr	r1, [r6, #8]
 800b9fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba00:	429c      	cmp	r4, r3
 800ba02:	ed91 7a00 	vldr	s14, [r1]
 800ba06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ba0a:	f63f af69 	bhi.w	800b8e0 <forward_relu+0xbc>
 800ba0e:	2500      	movs	r5, #0
 800ba10:	3304      	adds	r3, #4
 800ba12:	1d02      	adds	r2, r0, #4
 800ba14:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ba18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba20:	f1a3 0104 	sub.w	r1, r3, #4
 800ba24:	f1a3 0308 	sub.w	r3, r3, #8
 800ba28:	d406      	bmi.n	800ba38 <forward_relu+0x214>
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ba30:	f63f af56 	bhi.w	800b8e0 <forward_relu+0xbc>
 800ba34:	460b      	mov	r3, r1
 800ba36:	e7ed      	b.n	800ba14 <forward_relu+0x1f0>
 800ba38:	429c      	cmp	r4, r3
 800ba3a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ba3e:	f63f af4f 	bhi.w	800b8e0 <forward_relu+0xbc>
 800ba42:	460b      	mov	r3, r1
 800ba44:	e7e6      	b.n	800ba14 <forward_relu+0x1f0>
 800ba46:	68b3      	ldr	r3, [r6, #8]
 800ba48:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba4c:	edd3 6a00 	vldr	s13, [r3]
 800ba50:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ba58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5c:	d401      	bmi.n	800ba62 <forward_relu+0x23e>
 800ba5e:	4623      	mov	r3, r4
 800ba60:	e71e      	b.n	800b8a0 <forward_relu+0x7c>
 800ba62:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	f47f af63 	bne.w	800b936 <forward_relu+0x112>
 800ba70:	e741      	b.n	800b8f6 <forward_relu+0xd2>
 800ba72:	4622      	mov	r2, r4
 800ba74:	e79a      	b.n	800b9ac <forward_relu+0x188>
 800ba76:	68b2      	ldr	r2, [r6, #8]
 800ba78:	4623      	mov	r3, r4
 800ba7a:	ed92 7a00 	vldr	s14, [r2]
 800ba7e:	e7c6      	b.n	800ba0e <forward_relu+0x1ea>
 800ba80:	2300      	movs	r3, #0
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	deff      	udf	#255	; 0xff
 800ba86:	bf00      	nop
 800ba88:	00000000 	.word	0x00000000

0800ba8c <forward_sm>:
 800ba8c:	6982      	ldr	r2, [r0, #24]
 800ba8e:	8813      	ldrh	r3, [r2, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d07c      	beq.n	800bb8e <forward_sm+0x102>
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	ed2d 8b04 	vpush	{d8-d9}
 800ba9c:	6852      	ldr	r2, [r2, #4]
 800ba9e:	6854      	ldr	r4, [r2, #4]
 800baa0:	b085      	sub	sp, #20
 800baa2:	b104      	cbz	r4, 800baa6 <forward_sm+0x1a>
 800baa4:	6824      	ldr	r4, [r4, #0]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d076      	beq.n	800bb98 <forward_sm+0x10c>
 800baaa:	6913      	ldr	r3, [r2, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d076      	beq.n	800bb9e <forward_sm+0x112>
 800bab0:	681e      	ldr	r6, [r3, #0]
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	68e0      	ldr	r0, [r4, #12]
 800bab6:	68f2      	ldr	r2, [r6, #12]
 800bab8:	6845      	ldr	r5, [r0, #4]
 800baba:	6857      	ldr	r7, [r2, #4]
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	d068      	beq.n	800bb92 <forward_sm+0x106>
 800bac0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bac4:	2201      	movs	r2, #1
 800bac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baca:	4298      	cmp	r0, r3
 800bacc:	fb01 f202 	mul.w	r2, r1, r2
 800bad0:	d1f9      	bne.n	800bac6 <forward_sm+0x3a>
 800bad2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800bad6:	69a2      	ldr	r2, [r4, #24]
 800bad8:	69b3      	ldr	r3, [r6, #24]
 800bada:	6892      	ldr	r2, [r2, #8]
 800badc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800bae0:	eb02 0309 	add.w	r3, r2, r9
 800bae4:	429a      	cmp	r2, r3
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	d24c      	bcs.n	800bb84 <forward_sm+0xf8>
 800baea:	00bb      	lsls	r3, r7, #2
 800baec:	9303      	str	r3, [sp, #12]
 800baee:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800baf2:	00ab      	lsls	r3, r5, #2
 800baf4:	2d01      	cmp	r5, #1
 800baf6:	ed92 8a00 	vldr	s16, [r2]
 800bafa:	9302      	str	r3, [sp, #8]
 800bafc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800bb00:	463e      	mov	r6, r7
 800bb02:	d93c      	bls.n	800bb7e <forward_sm+0xf2>
 800bb04:	1d13      	adds	r3, r2, #4
 800bb06:	ecf3 7a01 	vldmia	r3!, {s15}
 800bb0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb12:	bfb8      	it	lt
 800bb14:	eeb0 8a67 	vmovlt.f32	s16, s15
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	d1f4      	bne.n	800bb06 <forward_sm+0x7a>
 800bb1c:	eddf 8a21 	vldr	s17, [pc, #132]	; 800bba4 <forward_sm+0x118>
 800bb20:	4692      	mov	sl, r2
 800bb22:	46c3      	mov	fp, r8
 800bb24:	46c1      	mov	r9, r8
 800bb26:	2400      	movs	r4, #0
 800bb28:	ecba 0a01 	vldmia	sl!, {s0}
 800bb2c:	ee30 0a48 	vsub.f32	s0, s0, s16
 800bb30:	f003 fa3c 	bl	800efac <expf>
 800bb34:	3401      	adds	r4, #1
 800bb36:	42a5      	cmp	r5, r4
 800bb38:	ee78 8a80 	vadd.f32	s17, s17, s0
 800bb3c:	eca9 0a01 	vstmia	r9!, {s0}
 800bb40:	d8f2      	bhi.n	800bb28 <forward_sm+0x9c>
 800bb42:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4a:	d00b      	beq.n	800bb64 <forward_sm+0xd8>
 800bb4c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800bb50:	2300      	movs	r3, #0
 800bb52:	3301      	adds	r3, #1
 800bb54:	429d      	cmp	r5, r3
 800bb56:	eddb 7a00 	vldr	s15, [fp]
 800bb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb5e:	eceb 7a01 	vstmia	fp!, {s15}
 800bb62:	d8f6      	bhi.n	800bb52 <forward_sm+0xc6>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	9901      	ldr	r1, [sp, #4]
 800bb68:	4498      	add	r8, r3
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	42b9      	cmp	r1, r7
 800bb6e:	463a      	mov	r2, r7
 800bb70:	441e      	add	r6, r3
 800bb72:	d907      	bls.n	800bb84 <forward_sm+0xf8>
 800bb74:	2d01      	cmp	r5, #1
 800bb76:	ed92 8a00 	vldr	s16, [r2]
 800bb7a:	441f      	add	r7, r3
 800bb7c:	d8c2      	bhi.n	800bb04 <forward_sm+0x78>
 800bb7e:	2d00      	cmp	r5, #0
 800bb80:	d0f0      	beq.n	800bb64 <forward_sm+0xd8>
 800bb82:	e7cb      	b.n	800bb1c <forward_sm+0x90>
 800bb84:	b005      	add	sp, #20
 800bb86:	ecbd 8b04 	vpop	{d8-d9}
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	deff      	udf	#255	; 0xff
 800bb92:	f04f 0904 	mov.w	r9, #4
 800bb96:	e79e      	b.n	800bad6 <forward_sm+0x4a>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	deff      	udf	#255	; 0xff
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	deff      	udf	#255	; 0xff
 800bba2:	bf00      	nop
 800bba4:	00000000 	.word	0x00000000

0800bba8 <ai_check_custom_types>:
 800bba8:	b082      	sub	sp, #8
 800bbaa:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <ai_check_custom_types+0x50>)
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	b118      	cbz	r0, 800bbb8 <ai_check_custom_types+0x10>
 800bbb0:	7803      	ldrb	r3, [r0, #0]
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d002      	beq.n	800bbbc <ai_check_custom_types+0x14>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	b002      	add	sp, #8
 800bbba:	4770      	bx	lr
 800bbbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d004      	beq.n	800bbce <ai_check_custom_types+0x26>
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	f080 0001 	eor.w	r0, r0, #1
 800bbca:	b002      	add	sp, #8
 800bbcc:	4770      	bx	lr
 800bbce:	7842      	ldrb	r2, [r0, #1]
 800bbd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	f100 0001 	add.w	r0, r0, #1
 800bbda:	d1f3      	bne.n	800bbc4 <ai_check_custom_types+0x1c>
 800bbdc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bbe0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d1ed      	bne.n	800bbc4 <ai_check_custom_types+0x1c>
 800bbe8:	7842      	ldrb	r2, [r0, #1]
 800bbea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d1e8      	bne.n	800bbc4 <ai_check_custom_types+0x1c>
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	e7e7      	b.n	800bbc6 <ai_check_custom_types+0x1e>
 800bbf6:	bf00      	nop
 800bbf8:	84048403 	.word	0x84048403

0800bbfc <ai_layers_init_all>:
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	2000      	movs	r0, #0
 800bc00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bc02:	b143      	cbz	r3, 800bc16 <ai_layers_init_all+0x1a>
 800bc04:	691a      	ldr	r2, [r3, #16]
 800bc06:	60d9      	str	r1, [r3, #12]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	f100 0001 	add.w	r0, r0, #1
 800bc0e:	d002      	beq.n	800bc16 <ai_layers_init_all+0x1a>
 800bc10:	b10a      	cbz	r2, 800bc16 <ai_layers_init_all+0x1a>
 800bc12:	4613      	mov	r3, r2
 800bc14:	e7f5      	b.n	800bc02 <ai_layers_init_all+0x6>
 800bc16:	4770      	bx	lr

0800bc18 <ai_layers_post_init_all>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bc1c:	2500      	movs	r5, #0
 800bc1e:	b16c      	cbz	r4, 800bc3c <ai_layers_post_init_all+0x24>
 800bc20:	6863      	ldr	r3, [r4, #4]
 800bc22:	07db      	lsls	r3, r3, #31
 800bc24:	d504      	bpl.n	800bc30 <ai_layers_post_init_all+0x18>
 800bc26:	6a23      	ldr	r3, [r4, #32]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	b10b      	cbz	r3, 800bc30 <ai_layers_post_init_all+0x18>
 800bc2c:	4798      	blx	r3
 800bc2e:	3501      	adds	r5, #1
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	d002      	beq.n	800bc3c <ai_layers_post_init_all+0x24>
 800bc36:	b10b      	cbz	r3, 800bc3c <ai_layers_post_init_all+0x24>
 800bc38:	461c      	mov	r4, r3
 800bc3a:	e7f0      	b.n	800bc1e <ai_layers_post_init_all+0x6>
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}

0800bc40 <ai_layers_forward_all>:
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800bc48:	4604      	mov	r4, r0
 800bc4a:	f1b8 0f00 	cmp.w	r8, #0
 800bc4e:	d02b      	beq.n	800bca8 <ai_layers_forward_all+0x68>
 800bc50:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800bc52:	6381      	str	r1, [r0, #56]	; 0x38
 800bc54:	b321      	cbz	r1, 800bca0 <ai_layers_forward_all+0x60>
 800bc56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800bc58:	2001      	movs	r0, #1
 800bc5a:	47c0      	blx	r8
 800bc5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bc5e:	b1fe      	cbz	r6, 800bca0 <ai_layers_forward_all+0x60>
 800bc60:	2700      	movs	r7, #0
 800bc62:	4631      	mov	r1, r6
 800bc64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bc66:	2002      	movs	r0, #2
 800bc68:	47c0      	blx	r8
 800bc6a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	696b      	ldr	r3, [r5, #20]
 800bc70:	4798      	blx	r3
 800bc72:	692e      	ldr	r6, [r5, #16]
 800bc74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bc76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc78:	42b5      	cmp	r5, r6
 800bc7a:	f04f 0003 	mov.w	r0, #3
 800bc7e:	d007      	beq.n	800bc90 <ai_layers_forward_all+0x50>
 800bc80:	47c0      	blx	r8
 800bc82:	3701      	adds	r7, #1
 800bc84:	63a6      	str	r6, [r4, #56]	; 0x38
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	d1eb      	bne.n	800bc62 <ai_layers_forward_all+0x22>
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	2003      	movs	r0, #3
 800bc92:	47c0      	blx	r8
 800bc94:	2300      	movs	r3, #0
 800bc96:	3701      	adds	r7, #1
 800bc98:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca0:	2700      	movs	r7, #0
 800bca2:	4638      	mov	r0, r7
 800bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800bcaa:	6385      	str	r5, [r0, #56]	; 0x38
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	d0f7      	beq.n	800bca0 <ai_layers_forward_all+0x60>
 800bcb0:	4647      	mov	r7, r8
 800bcb2:	696b      	ldr	r3, [r5, #20]
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	4798      	blx	r3
 800bcb8:	462b      	mov	r3, r5
 800bcba:	692d      	ldr	r5, [r5, #16]
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d004      	beq.n	800bcca <ai_layers_forward_all+0x8a>
 800bcc0:	63a5      	str	r5, [r4, #56]	; 0x38
 800bcc2:	3701      	adds	r7, #1
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	d1f4      	bne.n	800bcb2 <ai_layers_forward_all+0x72>
 800bcc8:	e7df      	b.n	800bc8a <ai_layers_forward_all+0x4a>
 800bcca:	2300      	movs	r3, #0
 800bccc:	63a3      	str	r3, [r4, #56]	; 0x38
 800bcce:	3701      	adds	r7, #1
 800bcd0:	e7db      	b.n	800bc8a <ai_layers_forward_all+0x4a>
 800bcd2:	bf00      	nop

0800bcd4 <lite_dense_if32of32wf32>:
 800bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800bcdc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800bce0:	4287      	cmp	r7, r0
 800bce2:	f240 8106 	bls.w	800bef2 <lite_dense_if32of32wf32+0x21e>
 800bce6:	f1a6 0810 	sub.w	r8, r6, #16
 800bcea:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800bcee:	f108 0801 	add.w	r8, r8, #1
 800bcf2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800bcf6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800bcfa:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800bcfe:	4605      	mov	r5, r0
 800bd00:	f006 0a0f 	and.w	sl, r6, #15
 800bd04:	2e0f      	cmp	r6, #15
 800bd06:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800bf18 <lite_dense_if32of32wf32+0x244>
 800bd0a:	f240 8101 	bls.w	800bf10 <lite_dense_if32of32wf32+0x23c>
 800bd0e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800bd12:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800bd16:	46b6      	mov	lr, r6
 800bd18:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800bd1c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800bd20:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 800bd24:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800bd28:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800bd2c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800bd30:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 800bd34:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800bd38:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800bd3c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800bd40:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800bd44:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800bd48:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800bd4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bd50:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800bd54:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd58:	f1ae 0e10 	sub.w	lr, lr, #16
 800bd5c:	f1be 0f0f 	cmp.w	lr, #15
 800bd60:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800bd64:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800bd68:	eee5 7a86 	vfma.f32	s15, s11, s12
 800bd6c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800bd70:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800bd74:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800bd78:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800bd7c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800bd80:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800bd84:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800bd88:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd8c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800bd90:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800bd94:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bd98:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800bd9c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800bda0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bda4:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800bda8:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800bdac:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bdb0:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800bdb4:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800bdb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bdbc:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800bdc0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800bdc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bdc8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800bdcc:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800bdd0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bdd4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bdd8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bddc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bde0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bde4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bde8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdec:	d894      	bhi.n	800bd18 <lite_dense_if32of32wf32+0x44>
 800bdee:	eb02 0e0b 	add.w	lr, r2, fp
 800bdf2:	4654      	mov	r4, sl
 800bdf4:	46c4      	mov	ip, r8
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d075      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800bdfa:	eddc 6a00 	vldr	s13, [ip]
 800bdfe:	edde 7a00 	vldr	s15, [lr]
 800be02:	2c01      	cmp	r4, #1
 800be04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be08:	d06d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be0a:	eddc 6a01 	vldr	s13, [ip, #4]
 800be0e:	edde 7a01 	vldr	s15, [lr, #4]
 800be12:	2c02      	cmp	r4, #2
 800be14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be18:	d065      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be1a:	eddc 6a02 	vldr	s13, [ip, #8]
 800be1e:	edde 7a02 	vldr	s15, [lr, #8]
 800be22:	2c03      	cmp	r4, #3
 800be24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be28:	d05d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be2a:	eddc 6a03 	vldr	s13, [ip, #12]
 800be2e:	edde 7a03 	vldr	s15, [lr, #12]
 800be32:	2c04      	cmp	r4, #4
 800be34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be38:	d055      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be3a:	eddc 6a04 	vldr	s13, [ip, #16]
 800be3e:	edde 7a04 	vldr	s15, [lr, #16]
 800be42:	2c05      	cmp	r4, #5
 800be44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be48:	d04d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be4a:	eddc 6a05 	vldr	s13, [ip, #20]
 800be4e:	edde 7a05 	vldr	s15, [lr, #20]
 800be52:	2c06      	cmp	r4, #6
 800be54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be58:	d045      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be5a:	eddc 6a06 	vldr	s13, [ip, #24]
 800be5e:	edde 7a06 	vldr	s15, [lr, #24]
 800be62:	2c07      	cmp	r4, #7
 800be64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be68:	d03d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be6a:	eddc 6a07 	vldr	s13, [ip, #28]
 800be6e:	edde 7a07 	vldr	s15, [lr, #28]
 800be72:	2c08      	cmp	r4, #8
 800be74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be78:	d035      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be7a:	eddc 6a08 	vldr	s13, [ip, #32]
 800be7e:	edde 7a08 	vldr	s15, [lr, #32]
 800be82:	2c09      	cmp	r4, #9
 800be84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be88:	d02d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be8a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800be8e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800be92:	2c0a      	cmp	r4, #10
 800be94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be98:	d025      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800be9a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800be9e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800bea2:	2c0b      	cmp	r4, #11
 800bea4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bea8:	d01d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800beaa:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800beae:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800beb2:	2c0c      	cmp	r4, #12
 800beb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800beb8:	d015      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800beba:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800bebe:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800bec2:	3c0d      	subs	r4, #13
 800bec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bec8:	d00d      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800beca:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800bece:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800bed2:	2c01      	cmp	r4, #1
 800bed4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bed8:	d005      	beq.n	800bee6 <lite_dense_if32of32wf32+0x212>
 800beda:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800bede:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800bee2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bee6:	444a      	add	r2, r9
 800bee8:	eca5 7a01 	vstmia	r5!, {s14}
 800beec:	42af      	cmp	r7, r5
 800beee:	f63f af09 	bhi.w	800bd04 <lite_dense_if32of32wf32+0x30>
 800bef2:	b15b      	cbz	r3, 800bf0c <lite_dense_if32of32wf32+0x238>
 800bef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bef6:	b14a      	cbz	r2, 800bf0c <lite_dense_if32of32wf32+0x238>
 800bef8:	edd0 7a00 	vldr	s15, [r0]
 800befc:	ecb3 7a01 	vldmia	r3!, {s14}
 800bf00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf04:	ece0 7a01 	vstmia	r0!, {s15}
 800bf08:	4287      	cmp	r7, r0
 800bf0a:	d1f5      	bne.n	800bef8 <lite_dense_if32of32wf32+0x224>
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf10:	4634      	mov	r4, r6
 800bf12:	4696      	mov	lr, r2
 800bf14:	468c      	mov	ip, r1
 800bf16:	e76e      	b.n	800bdf6 <lite_dense_if32of32wf32+0x122>
 800bf18:	00000000 	.word	0x00000000

0800bf1c <ai_version_get>:
 800bf1c:	0212      	lsls	r2, r2, #8
 800bf1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bf22:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800bf26:	4770      	bx	lr

0800bf28 <get_tensor_byte_size>:
 800bf28:	b410      	push	{r4}
 800bf2a:	6983      	ldr	r3, [r0, #24]
 800bf2c:	68c4      	ldr	r4, [r0, #12]
 800bf2e:	6941      	ldr	r1, [r0, #20]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68e0      	ldr	r0, [r4, #12]
 800bf34:	4a07      	ldr	r2, [pc, #28]	; (800bf54 <get_tensor_byte_size+0x2c>)
 800bf36:	68c9      	ldr	r1, [r1, #12]
 800bf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800bf40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bf44:	fb01 f000 	mul.w	r0, r1, r0
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	bf04      	itt	eq
 800bf4c:	3007      	addeq	r0, #7
 800bf4e:	08c0      	lsreq	r0, r0, #3
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	000400c0 	.word	0x000400c0

0800bf58 <ai_array_to_buffer_fmt>:
 800bf58:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d050      	beq.n	800c002 <ai_array_to_buffer_fmt+0xaa>
 800bf60:	4b2a      	ldr	r3, [pc, #168]	; (800c00c <ai_array_to_buffer_fmt+0xb4>)
 800bf62:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d00b      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bf6a:	dc1c      	bgt.n	800bfa6 <ai_array_to_buffer_fmt+0x4e>
 800bf6c:	4b28      	ldr	r3, [pc, #160]	; (800c010 <ai_array_to_buffer_fmt+0xb8>)
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d007      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bf72:	dd0b      	ble.n	800bf8c <ai_array_to_buffer_fmt+0x34>
 800bf74:	4b27      	ldr	r3, [pc, #156]	; (800c014 <ai_array_to_buffer_fmt+0xbc>)
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d003      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bf7a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d131      	bne.n	800bfe6 <ai_array_to_buffer_fmt+0x8e>
 800bf82:	4613      	mov	r3, r2
 800bf84:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800bf88:	4318      	orrs	r0, r3
 800bf8a:	4770      	bx	lr
 800bf8c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d0f6      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bf94:	dd2c      	ble.n	800bff0 <ai_array_to_buffer_fmt+0x98>
 800bf96:	4b20      	ldr	r3, [pc, #128]	; (800c018 <ai_array_to_buffer_fmt+0xc0>)
 800bf98:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	bf18      	it	ne
 800bfa0:	2340      	movne	r3, #64	; 0x40
 800bfa2:	4318      	orrs	r0, r3
 800bfa4:	4770      	bx	lr
 800bfa6:	4b1d      	ldr	r3, [pc, #116]	; (800c01c <ai_array_to_buffer_fmt+0xc4>)
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d0ea      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bfac:	dd0e      	ble.n	800bfcc <ai_array_to_buffer_fmt+0x74>
 800bfae:	4b1c      	ldr	r3, [pc, #112]	; (800c020 <ai_array_to_buffer_fmt+0xc8>)
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d0e6      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bfb4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d0e2      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bfbc:	4b19      	ldr	r3, [pc, #100]	; (800c024 <ai_array_to_buffer_fmt+0xcc>)
 800bfbe:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	bf18      	it	ne
 800bfc6:	2340      	movne	r3, #64	; 0x40
 800bfc8:	4318      	orrs	r0, r3
 800bfca:	4770      	bx	lr
 800bfcc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d0d6      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bfd4:	3307      	adds	r3, #7
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d0d3      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bfda:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	bf18      	it	ne
 800bfe2:	2340      	movne	r3, #64	; 0x40
 800bfe4:	e7ce      	b.n	800bf84 <ai_array_to_buffer_fmt+0x2c>
 800bfe6:	4b10      	ldr	r3, [pc, #64]	; (800c028 <ai_array_to_buffer_fmt+0xd0>)
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	bf18      	it	ne
 800bfec:	2340      	movne	r3, #64	; 0x40
 800bfee:	e7c9      	b.n	800bf84 <ai_array_to_buffer_fmt+0x2c>
 800bff0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d0c4      	beq.n	800bf82 <ai_array_to_buffer_fmt+0x2a>
 800bff8:	3380      	adds	r3, #128	; 0x80
 800bffa:	429a      	cmp	r2, r3
 800bffc:	bf18      	it	ne
 800bffe:	2340      	movne	r3, #64	; 0x40
 800c000:	e7c0      	b.n	800bf84 <ai_array_to_buffer_fmt+0x2c>
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <ai_array_to_buffer_fmt+0xd4>)
 800c004:	4003      	ands	r3, r0
 800c006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c00a:	e7bb      	b.n	800bf84 <ai_array_to_buffer_fmt+0x2c>
 800c00c:	00840040 	.word	0x00840040
 800c010:	00040840 	.word	0x00040840
 800c014:	00041040 	.word	0x00041040
 800c018:	00040447 	.word	0x00040447
 800c01c:	00840840 	.word	0x00840840
 800c020:	00841040 	.word	0x00841040
 800c024:	0084084f 	.word	0x0084084f
 800c028:	0004084f 	.word	0x0004084f
 800c02c:	00803fff 	.word	0x00803fff

0800c030 <ai_array_get_byte_size>:
 800c030:	b319      	cbz	r1, 800c07a <ai_array_get_byte_size+0x4a>
 800c032:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c036:	fb03 f101 	mul.w	r1, r3, r1
 800c03a:	3107      	adds	r1, #7
 800c03c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800c040:	f021 0307 	bic.w	r3, r1, #7
 800c044:	2a04      	cmp	r2, #4
 800c046:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800c04a:	fa23 f101 	lsr.w	r1, r3, r1
 800c04e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800c052:	d00b      	beq.n	800c06c <ai_array_get_byte_size+0x3c>
 800c054:	2a08      	cmp	r2, #8
 800c056:	d002      	beq.n	800c05e <ai_array_get_byte_size+0x2e>
 800c058:	3107      	adds	r1, #7
 800c05a:	08c8      	lsrs	r0, r1, #3
 800c05c:	4770      	bx	lr
 800c05e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c062:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800c066:	3107      	adds	r1, #7
 800c068:	08c8      	lsrs	r0, r1, #3
 800c06a:	4770      	bx	lr
 800c06c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c070:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800c074:	3107      	adds	r1, #7
 800c076:	08c8      	lsrs	r0, r1, #3
 800c078:	4770      	bx	lr
 800c07a:	4608      	mov	r0, r1
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop

0800c080 <ai_array_get_data_byte_size>:
 800c080:	b169      	cbz	r1, 800c09e <ai_array_get_data_byte_size+0x1e>
 800c082:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800c086:	fb02 f101 	mul.w	r1, r2, r1
 800c08a:	1dcb      	adds	r3, r1, #7
 800c08c:	f023 0307 	bic.w	r3, r3, #7
 800c090:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800c094:	fa23 f000 	lsr.w	r0, r3, r0
 800c098:	3007      	adds	r0, #7
 800c09a:	08c0      	lsrs	r0, r0, #3
 800c09c:	4770      	bx	lr
 800c09e:	4608      	mov	r0, r1
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop

0800c0a4 <__errno>:
 800c0a4:	4b01      	ldr	r3, [pc, #4]	; (800c0ac <__errno+0x8>)
 800c0a6:	6818      	ldr	r0, [r3, #0]
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	2000098c 	.word	0x2000098c

0800c0b0 <std>:
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	e9c0 3300 	strd	r3, r3, [r0]
 800c0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0be:	6083      	str	r3, [r0, #8]
 800c0c0:	8181      	strh	r1, [r0, #12]
 800c0c2:	6643      	str	r3, [r0, #100]	; 0x64
 800c0c4:	81c2      	strh	r2, [r0, #14]
 800c0c6:	6183      	str	r3, [r0, #24]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	2208      	movs	r2, #8
 800c0cc:	305c      	adds	r0, #92	; 0x5c
 800c0ce:	f000 f923 	bl	800c318 <memset>
 800c0d2:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <std+0x38>)
 800c0d4:	6263      	str	r3, [r4, #36]	; 0x24
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <std+0x3c>)
 800c0d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0da:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <std+0x40>)
 800c0dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <std+0x44>)
 800c0e0:	6224      	str	r4, [r4, #32]
 800c0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0e4:	bd10      	pop	{r4, pc}
 800c0e6:	bf00      	nop
 800c0e8:	0800ce85 	.word	0x0800ce85
 800c0ec:	0800cea7 	.word	0x0800cea7
 800c0f0:	0800cedf 	.word	0x0800cedf
 800c0f4:	0800cf03 	.word	0x0800cf03

0800c0f8 <_cleanup_r>:
 800c0f8:	4901      	ldr	r1, [pc, #4]	; (800c100 <_cleanup_r+0x8>)
 800c0fa:	f000 b8af 	b.w	800c25c <_fwalk_reent>
 800c0fe:	bf00      	nop
 800c100:	0800df81 	.word	0x0800df81

0800c104 <__sfmoreglue>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	2268      	movs	r2, #104	; 0x68
 800c108:	1e4d      	subs	r5, r1, #1
 800c10a:	4355      	muls	r5, r2
 800c10c:	460e      	mov	r6, r1
 800c10e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c112:	f000 f975 	bl	800c400 <_malloc_r>
 800c116:	4604      	mov	r4, r0
 800c118:	b140      	cbz	r0, 800c12c <__sfmoreglue+0x28>
 800c11a:	2100      	movs	r1, #0
 800c11c:	e9c0 1600 	strd	r1, r6, [r0]
 800c120:	300c      	adds	r0, #12
 800c122:	60a0      	str	r0, [r4, #8]
 800c124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c128:	f000 f8f6 	bl	800c318 <memset>
 800c12c:	4620      	mov	r0, r4
 800c12e:	bd70      	pop	{r4, r5, r6, pc}

0800c130 <__sfp_lock_acquire>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__sfp_lock_acquire+0x8>)
 800c132:	f000 b8d8 	b.w	800c2e6 <__retarget_lock_acquire_recursive>
 800c136:	bf00      	nop
 800c138:	2000412d 	.word	0x2000412d

0800c13c <__sfp_lock_release>:
 800c13c:	4801      	ldr	r0, [pc, #4]	; (800c144 <__sfp_lock_release+0x8>)
 800c13e:	f000 b8d3 	b.w	800c2e8 <__retarget_lock_release_recursive>
 800c142:	bf00      	nop
 800c144:	2000412d 	.word	0x2000412d

0800c148 <__sinit_lock_acquire>:
 800c148:	4801      	ldr	r0, [pc, #4]	; (800c150 <__sinit_lock_acquire+0x8>)
 800c14a:	f000 b8cc 	b.w	800c2e6 <__retarget_lock_acquire_recursive>
 800c14e:	bf00      	nop
 800c150:	2000412e 	.word	0x2000412e

0800c154 <__sinit_lock_release>:
 800c154:	4801      	ldr	r0, [pc, #4]	; (800c15c <__sinit_lock_release+0x8>)
 800c156:	f000 b8c7 	b.w	800c2e8 <__retarget_lock_release_recursive>
 800c15a:	bf00      	nop
 800c15c:	2000412e 	.word	0x2000412e

0800c160 <__sinit>:
 800c160:	b510      	push	{r4, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	f7ff fff0 	bl	800c148 <__sinit_lock_acquire>
 800c168:	69a3      	ldr	r3, [r4, #24]
 800c16a:	b11b      	cbz	r3, 800c174 <__sinit+0x14>
 800c16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c170:	f7ff bff0 	b.w	800c154 <__sinit_lock_release>
 800c174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c178:	6523      	str	r3, [r4, #80]	; 0x50
 800c17a:	4b13      	ldr	r3, [pc, #76]	; (800c1c8 <__sinit+0x68>)
 800c17c:	4a13      	ldr	r2, [pc, #76]	; (800c1cc <__sinit+0x6c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	62a2      	str	r2, [r4, #40]	; 0x28
 800c182:	42a3      	cmp	r3, r4
 800c184:	bf04      	itt	eq
 800c186:	2301      	moveq	r3, #1
 800c188:	61a3      	streq	r3, [r4, #24]
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 f820 	bl	800c1d0 <__sfp>
 800c190:	6060      	str	r0, [r4, #4]
 800c192:	4620      	mov	r0, r4
 800c194:	f000 f81c 	bl	800c1d0 <__sfp>
 800c198:	60a0      	str	r0, [r4, #8]
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 f818 	bl	800c1d0 <__sfp>
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	60e0      	str	r0, [r4, #12]
 800c1a4:	2104      	movs	r1, #4
 800c1a6:	6860      	ldr	r0, [r4, #4]
 800c1a8:	f7ff ff82 	bl	800c0b0 <std>
 800c1ac:	68a0      	ldr	r0, [r4, #8]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	2109      	movs	r1, #9
 800c1b2:	f7ff ff7d 	bl	800c0b0 <std>
 800c1b6:	68e0      	ldr	r0, [r4, #12]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	2112      	movs	r1, #18
 800c1bc:	f7ff ff78 	bl	800c0b0 <std>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	61a3      	str	r3, [r4, #24]
 800c1c4:	e7d2      	b.n	800c16c <__sinit+0xc>
 800c1c6:	bf00      	nop
 800c1c8:	0801b610 	.word	0x0801b610
 800c1cc:	0800c0f9 	.word	0x0800c0f9

0800c1d0 <__sfp>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	f7ff ffac 	bl	800c130 <__sfp_lock_acquire>
 800c1d8:	4b1e      	ldr	r3, [pc, #120]	; (800c254 <__sfp+0x84>)
 800c1da:	681e      	ldr	r6, [r3, #0]
 800c1dc:	69b3      	ldr	r3, [r6, #24]
 800c1de:	b913      	cbnz	r3, 800c1e6 <__sfp+0x16>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff ffbd 	bl	800c160 <__sinit>
 800c1e6:	3648      	adds	r6, #72	; 0x48
 800c1e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	d503      	bpl.n	800c1f8 <__sfp+0x28>
 800c1f0:	6833      	ldr	r3, [r6, #0]
 800c1f2:	b30b      	cbz	r3, 800c238 <__sfp+0x68>
 800c1f4:	6836      	ldr	r6, [r6, #0]
 800c1f6:	e7f7      	b.n	800c1e8 <__sfp+0x18>
 800c1f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1fc:	b9d5      	cbnz	r5, 800c234 <__sfp+0x64>
 800c1fe:	4b16      	ldr	r3, [pc, #88]	; (800c258 <__sfp+0x88>)
 800c200:	60e3      	str	r3, [r4, #12]
 800c202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c206:	6665      	str	r5, [r4, #100]	; 0x64
 800c208:	f000 f86c 	bl	800c2e4 <__retarget_lock_init_recursive>
 800c20c:	f7ff ff96 	bl	800c13c <__sfp_lock_release>
 800c210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c218:	6025      	str	r5, [r4, #0]
 800c21a:	61a5      	str	r5, [r4, #24]
 800c21c:	2208      	movs	r2, #8
 800c21e:	4629      	mov	r1, r5
 800c220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c224:	f000 f878 	bl	800c318 <memset>
 800c228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c22c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c230:	4620      	mov	r0, r4
 800c232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c234:	3468      	adds	r4, #104	; 0x68
 800c236:	e7d9      	b.n	800c1ec <__sfp+0x1c>
 800c238:	2104      	movs	r1, #4
 800c23a:	4638      	mov	r0, r7
 800c23c:	f7ff ff62 	bl	800c104 <__sfmoreglue>
 800c240:	4604      	mov	r4, r0
 800c242:	6030      	str	r0, [r6, #0]
 800c244:	2800      	cmp	r0, #0
 800c246:	d1d5      	bne.n	800c1f4 <__sfp+0x24>
 800c248:	f7ff ff78 	bl	800c13c <__sfp_lock_release>
 800c24c:	230c      	movs	r3, #12
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	e7ee      	b.n	800c230 <__sfp+0x60>
 800c252:	bf00      	nop
 800c254:	0801b610 	.word	0x0801b610
 800c258:	ffff0001 	.word	0xffff0001

0800c25c <_fwalk_reent>:
 800c25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c260:	4606      	mov	r6, r0
 800c262:	4688      	mov	r8, r1
 800c264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c268:	2700      	movs	r7, #0
 800c26a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c26e:	f1b9 0901 	subs.w	r9, r9, #1
 800c272:	d505      	bpl.n	800c280 <_fwalk_reent+0x24>
 800c274:	6824      	ldr	r4, [r4, #0]
 800c276:	2c00      	cmp	r4, #0
 800c278:	d1f7      	bne.n	800c26a <_fwalk_reent+0xe>
 800c27a:	4638      	mov	r0, r7
 800c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c280:	89ab      	ldrh	r3, [r5, #12]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d907      	bls.n	800c296 <_fwalk_reent+0x3a>
 800c286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c28a:	3301      	adds	r3, #1
 800c28c:	d003      	beq.n	800c296 <_fwalk_reent+0x3a>
 800c28e:	4629      	mov	r1, r5
 800c290:	4630      	mov	r0, r6
 800c292:	47c0      	blx	r8
 800c294:	4307      	orrs	r7, r0
 800c296:	3568      	adds	r5, #104	; 0x68
 800c298:	e7e9      	b.n	800c26e <_fwalk_reent+0x12>
	...

0800c29c <__libc_init_array>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	4d0d      	ldr	r5, [pc, #52]	; (800c2d4 <__libc_init_array+0x38>)
 800c2a0:	4c0d      	ldr	r4, [pc, #52]	; (800c2d8 <__libc_init_array+0x3c>)
 800c2a2:	1b64      	subs	r4, r4, r5
 800c2a4:	10a4      	asrs	r4, r4, #2
 800c2a6:	2600      	movs	r6, #0
 800c2a8:	42a6      	cmp	r6, r4
 800c2aa:	d109      	bne.n	800c2c0 <__libc_init_array+0x24>
 800c2ac:	4d0b      	ldr	r5, [pc, #44]	; (800c2dc <__libc_init_array+0x40>)
 800c2ae:	4c0c      	ldr	r4, [pc, #48]	; (800c2e0 <__libc_init_array+0x44>)
 800c2b0:	f002 ffba 	bl	800f228 <_init>
 800c2b4:	1b64      	subs	r4, r4, r5
 800c2b6:	10a4      	asrs	r4, r4, #2
 800c2b8:	2600      	movs	r6, #0
 800c2ba:	42a6      	cmp	r6, r4
 800c2bc:	d105      	bne.n	800c2ca <__libc_init_array+0x2e>
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c4:	4798      	blx	r3
 800c2c6:	3601      	adds	r6, #1
 800c2c8:	e7ee      	b.n	800c2a8 <__libc_init_array+0xc>
 800c2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ce:	4798      	blx	r3
 800c2d0:	3601      	adds	r6, #1
 800c2d2:	e7f2      	b.n	800c2ba <__libc_init_array+0x1e>
 800c2d4:	0801b9a8 	.word	0x0801b9a8
 800c2d8:	0801b9a8 	.word	0x0801b9a8
 800c2dc:	0801b9a8 	.word	0x0801b9a8
 800c2e0:	0801b9ac 	.word	0x0801b9ac

0800c2e4 <__retarget_lock_init_recursive>:
 800c2e4:	4770      	bx	lr

0800c2e6 <__retarget_lock_acquire_recursive>:
 800c2e6:	4770      	bx	lr

0800c2e8 <__retarget_lock_release_recursive>:
 800c2e8:	4770      	bx	lr
	...

0800c2ec <malloc>:
 800c2ec:	4b02      	ldr	r3, [pc, #8]	; (800c2f8 <malloc+0xc>)
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f000 b885 	b.w	800c400 <_malloc_r>
 800c2f6:	bf00      	nop
 800c2f8:	2000098c 	.word	0x2000098c

0800c2fc <memcpy>:
 800c2fc:	440a      	add	r2, r1
 800c2fe:	4291      	cmp	r1, r2
 800c300:	f100 33ff 	add.w	r3, r0, #4294967295
 800c304:	d100      	bne.n	800c308 <memcpy+0xc>
 800c306:	4770      	bx	lr
 800c308:	b510      	push	{r4, lr}
 800c30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c30e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c312:	4291      	cmp	r1, r2
 800c314:	d1f9      	bne.n	800c30a <memcpy+0xe>
 800c316:	bd10      	pop	{r4, pc}

0800c318 <memset>:
 800c318:	4402      	add	r2, r0
 800c31a:	4603      	mov	r3, r0
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d100      	bne.n	800c322 <memset+0xa>
 800c320:	4770      	bx	lr
 800c322:	f803 1b01 	strb.w	r1, [r3], #1
 800c326:	e7f9      	b.n	800c31c <memset+0x4>

0800c328 <_free_r>:
 800c328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c32a:	2900      	cmp	r1, #0
 800c32c:	d044      	beq.n	800c3b8 <_free_r+0x90>
 800c32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c332:	9001      	str	r0, [sp, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	f1a1 0404 	sub.w	r4, r1, #4
 800c33a:	bfb8      	it	lt
 800c33c:	18e4      	addlt	r4, r4, r3
 800c33e:	f001 fee9 	bl	800e114 <__malloc_lock>
 800c342:	4a1e      	ldr	r2, [pc, #120]	; (800c3bc <_free_r+0x94>)
 800c344:	9801      	ldr	r0, [sp, #4]
 800c346:	6813      	ldr	r3, [r2, #0]
 800c348:	b933      	cbnz	r3, 800c358 <_free_r+0x30>
 800c34a:	6063      	str	r3, [r4, #4]
 800c34c:	6014      	str	r4, [r2, #0]
 800c34e:	b003      	add	sp, #12
 800c350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c354:	f001 bee4 	b.w	800e120 <__malloc_unlock>
 800c358:	42a3      	cmp	r3, r4
 800c35a:	d908      	bls.n	800c36e <_free_r+0x46>
 800c35c:	6825      	ldr	r5, [r4, #0]
 800c35e:	1961      	adds	r1, r4, r5
 800c360:	428b      	cmp	r3, r1
 800c362:	bf01      	itttt	eq
 800c364:	6819      	ldreq	r1, [r3, #0]
 800c366:	685b      	ldreq	r3, [r3, #4]
 800c368:	1949      	addeq	r1, r1, r5
 800c36a:	6021      	streq	r1, [r4, #0]
 800c36c:	e7ed      	b.n	800c34a <_free_r+0x22>
 800c36e:	461a      	mov	r2, r3
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	b10b      	cbz	r3, 800c378 <_free_r+0x50>
 800c374:	42a3      	cmp	r3, r4
 800c376:	d9fa      	bls.n	800c36e <_free_r+0x46>
 800c378:	6811      	ldr	r1, [r2, #0]
 800c37a:	1855      	adds	r5, r2, r1
 800c37c:	42a5      	cmp	r5, r4
 800c37e:	d10b      	bne.n	800c398 <_free_r+0x70>
 800c380:	6824      	ldr	r4, [r4, #0]
 800c382:	4421      	add	r1, r4
 800c384:	1854      	adds	r4, r2, r1
 800c386:	42a3      	cmp	r3, r4
 800c388:	6011      	str	r1, [r2, #0]
 800c38a:	d1e0      	bne.n	800c34e <_free_r+0x26>
 800c38c:	681c      	ldr	r4, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	6053      	str	r3, [r2, #4]
 800c392:	4421      	add	r1, r4
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	e7da      	b.n	800c34e <_free_r+0x26>
 800c398:	d902      	bls.n	800c3a0 <_free_r+0x78>
 800c39a:	230c      	movs	r3, #12
 800c39c:	6003      	str	r3, [r0, #0]
 800c39e:	e7d6      	b.n	800c34e <_free_r+0x26>
 800c3a0:	6825      	ldr	r5, [r4, #0]
 800c3a2:	1961      	adds	r1, r4, r5
 800c3a4:	428b      	cmp	r3, r1
 800c3a6:	bf04      	itt	eq
 800c3a8:	6819      	ldreq	r1, [r3, #0]
 800c3aa:	685b      	ldreq	r3, [r3, #4]
 800c3ac:	6063      	str	r3, [r4, #4]
 800c3ae:	bf04      	itt	eq
 800c3b0:	1949      	addeq	r1, r1, r5
 800c3b2:	6021      	streq	r1, [r4, #0]
 800c3b4:	6054      	str	r4, [r2, #4]
 800c3b6:	e7ca      	b.n	800c34e <_free_r+0x26>
 800c3b8:	b003      	add	sp, #12
 800c3ba:	bd30      	pop	{r4, r5, pc}
 800c3bc:	20004130 	.word	0x20004130

0800c3c0 <sbrk_aligned>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	4e0e      	ldr	r6, [pc, #56]	; (800c3fc <sbrk_aligned+0x3c>)
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	6831      	ldr	r1, [r6, #0]
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	b911      	cbnz	r1, 800c3d2 <sbrk_aligned+0x12>
 800c3cc:	f000 fcf6 	bl	800cdbc <_sbrk_r>
 800c3d0:	6030      	str	r0, [r6, #0]
 800c3d2:	4621      	mov	r1, r4
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f000 fcf1 	bl	800cdbc <_sbrk_r>
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	d00a      	beq.n	800c3f4 <sbrk_aligned+0x34>
 800c3de:	1cc4      	adds	r4, r0, #3
 800c3e0:	f024 0403 	bic.w	r4, r4, #3
 800c3e4:	42a0      	cmp	r0, r4
 800c3e6:	d007      	beq.n	800c3f8 <sbrk_aligned+0x38>
 800c3e8:	1a21      	subs	r1, r4, r0
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f000 fce6 	bl	800cdbc <_sbrk_r>
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d101      	bne.n	800c3f8 <sbrk_aligned+0x38>
 800c3f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	20004134 	.word	0x20004134

0800c400 <_malloc_r>:
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	1ccd      	adds	r5, r1, #3
 800c406:	f025 0503 	bic.w	r5, r5, #3
 800c40a:	3508      	adds	r5, #8
 800c40c:	2d0c      	cmp	r5, #12
 800c40e:	bf38      	it	cc
 800c410:	250c      	movcc	r5, #12
 800c412:	2d00      	cmp	r5, #0
 800c414:	4607      	mov	r7, r0
 800c416:	db01      	blt.n	800c41c <_malloc_r+0x1c>
 800c418:	42a9      	cmp	r1, r5
 800c41a:	d905      	bls.n	800c428 <_malloc_r+0x28>
 800c41c:	230c      	movs	r3, #12
 800c41e:	603b      	str	r3, [r7, #0]
 800c420:	2600      	movs	r6, #0
 800c422:	4630      	mov	r0, r6
 800c424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c428:	4e2e      	ldr	r6, [pc, #184]	; (800c4e4 <_malloc_r+0xe4>)
 800c42a:	f001 fe73 	bl	800e114 <__malloc_lock>
 800c42e:	6833      	ldr	r3, [r6, #0]
 800c430:	461c      	mov	r4, r3
 800c432:	bb34      	cbnz	r4, 800c482 <_malloc_r+0x82>
 800c434:	4629      	mov	r1, r5
 800c436:	4638      	mov	r0, r7
 800c438:	f7ff ffc2 	bl	800c3c0 <sbrk_aligned>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	4604      	mov	r4, r0
 800c440:	d14d      	bne.n	800c4de <_malloc_r+0xde>
 800c442:	6834      	ldr	r4, [r6, #0]
 800c444:	4626      	mov	r6, r4
 800c446:	2e00      	cmp	r6, #0
 800c448:	d140      	bne.n	800c4cc <_malloc_r+0xcc>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	4631      	mov	r1, r6
 800c44e:	4638      	mov	r0, r7
 800c450:	eb04 0803 	add.w	r8, r4, r3
 800c454:	f000 fcb2 	bl	800cdbc <_sbrk_r>
 800c458:	4580      	cmp	r8, r0
 800c45a:	d13a      	bne.n	800c4d2 <_malloc_r+0xd2>
 800c45c:	6821      	ldr	r1, [r4, #0]
 800c45e:	3503      	adds	r5, #3
 800c460:	1a6d      	subs	r5, r5, r1
 800c462:	f025 0503 	bic.w	r5, r5, #3
 800c466:	3508      	adds	r5, #8
 800c468:	2d0c      	cmp	r5, #12
 800c46a:	bf38      	it	cc
 800c46c:	250c      	movcc	r5, #12
 800c46e:	4629      	mov	r1, r5
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff ffa5 	bl	800c3c0 <sbrk_aligned>
 800c476:	3001      	adds	r0, #1
 800c478:	d02b      	beq.n	800c4d2 <_malloc_r+0xd2>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	442b      	add	r3, r5
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	e00e      	b.n	800c4a0 <_malloc_r+0xa0>
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	1b52      	subs	r2, r2, r5
 800c486:	d41e      	bmi.n	800c4c6 <_malloc_r+0xc6>
 800c488:	2a0b      	cmp	r2, #11
 800c48a:	d916      	bls.n	800c4ba <_malloc_r+0xba>
 800c48c:	1961      	adds	r1, r4, r5
 800c48e:	42a3      	cmp	r3, r4
 800c490:	6025      	str	r5, [r4, #0]
 800c492:	bf18      	it	ne
 800c494:	6059      	strne	r1, [r3, #4]
 800c496:	6863      	ldr	r3, [r4, #4]
 800c498:	bf08      	it	eq
 800c49a:	6031      	streq	r1, [r6, #0]
 800c49c:	5162      	str	r2, [r4, r5]
 800c49e:	604b      	str	r3, [r1, #4]
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	f104 060b 	add.w	r6, r4, #11
 800c4a6:	f001 fe3b 	bl	800e120 <__malloc_unlock>
 800c4aa:	f026 0607 	bic.w	r6, r6, #7
 800c4ae:	1d23      	adds	r3, r4, #4
 800c4b0:	1af2      	subs	r2, r6, r3
 800c4b2:	d0b6      	beq.n	800c422 <_malloc_r+0x22>
 800c4b4:	1b9b      	subs	r3, r3, r6
 800c4b6:	50a3      	str	r3, [r4, r2]
 800c4b8:	e7b3      	b.n	800c422 <_malloc_r+0x22>
 800c4ba:	6862      	ldr	r2, [r4, #4]
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	bf0c      	ite	eq
 800c4c0:	6032      	streq	r2, [r6, #0]
 800c4c2:	605a      	strne	r2, [r3, #4]
 800c4c4:	e7ec      	b.n	800c4a0 <_malloc_r+0xa0>
 800c4c6:	4623      	mov	r3, r4
 800c4c8:	6864      	ldr	r4, [r4, #4]
 800c4ca:	e7b2      	b.n	800c432 <_malloc_r+0x32>
 800c4cc:	4634      	mov	r4, r6
 800c4ce:	6876      	ldr	r6, [r6, #4]
 800c4d0:	e7b9      	b.n	800c446 <_malloc_r+0x46>
 800c4d2:	230c      	movs	r3, #12
 800c4d4:	603b      	str	r3, [r7, #0]
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	f001 fe22 	bl	800e120 <__malloc_unlock>
 800c4dc:	e7a1      	b.n	800c422 <_malloc_r+0x22>
 800c4de:	6025      	str	r5, [r4, #0]
 800c4e0:	e7de      	b.n	800c4a0 <_malloc_r+0xa0>
 800c4e2:	bf00      	nop
 800c4e4:	20004130 	.word	0x20004130

0800c4e8 <__cvt>:
 800c4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	ec55 4b10 	vmov	r4, r5, d0
 800c4f0:	2d00      	cmp	r5, #0
 800c4f2:	460e      	mov	r6, r1
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	bfbb      	ittet	lt
 800c4fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c4fe:	461d      	movlt	r5, r3
 800c500:	2300      	movge	r3, #0
 800c502:	232d      	movlt	r3, #45	; 0x2d
 800c504:	700b      	strb	r3, [r1, #0]
 800c506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c50c:	4691      	mov	r9, r2
 800c50e:	f023 0820 	bic.w	r8, r3, #32
 800c512:	bfbc      	itt	lt
 800c514:	4622      	movlt	r2, r4
 800c516:	4614      	movlt	r4, r2
 800c518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c51c:	d005      	beq.n	800c52a <__cvt+0x42>
 800c51e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c522:	d100      	bne.n	800c526 <__cvt+0x3e>
 800c524:	3601      	adds	r6, #1
 800c526:	2102      	movs	r1, #2
 800c528:	e000      	b.n	800c52c <__cvt+0x44>
 800c52a:	2103      	movs	r1, #3
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	9301      	str	r3, [sp, #4]
 800c530:	ab02      	add	r3, sp, #8
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	ec45 4b10 	vmov	d0, r4, r5
 800c538:	4653      	mov	r3, sl
 800c53a:	4632      	mov	r2, r6
 800c53c:	f000 feac 	bl	800d298 <_dtoa_r>
 800c540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c544:	4607      	mov	r7, r0
 800c546:	d102      	bne.n	800c54e <__cvt+0x66>
 800c548:	f019 0f01 	tst.w	r9, #1
 800c54c:	d022      	beq.n	800c594 <__cvt+0xac>
 800c54e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c552:	eb07 0906 	add.w	r9, r7, r6
 800c556:	d110      	bne.n	800c57a <__cvt+0x92>
 800c558:	783b      	ldrb	r3, [r7, #0]
 800c55a:	2b30      	cmp	r3, #48	; 0x30
 800c55c:	d10a      	bne.n	800c574 <__cvt+0x8c>
 800c55e:	2200      	movs	r2, #0
 800c560:	2300      	movs	r3, #0
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	f7f4 fabf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c56a:	b918      	cbnz	r0, 800c574 <__cvt+0x8c>
 800c56c:	f1c6 0601 	rsb	r6, r6, #1
 800c570:	f8ca 6000 	str.w	r6, [sl]
 800c574:	f8da 3000 	ldr.w	r3, [sl]
 800c578:	4499      	add	r9, r3
 800c57a:	2200      	movs	r2, #0
 800c57c:	2300      	movs	r3, #0
 800c57e:	4620      	mov	r0, r4
 800c580:	4629      	mov	r1, r5
 800c582:	f7f4 fab1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c586:	b108      	cbz	r0, 800c58c <__cvt+0xa4>
 800c588:	f8cd 900c 	str.w	r9, [sp, #12]
 800c58c:	2230      	movs	r2, #48	; 0x30
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	454b      	cmp	r3, r9
 800c592:	d307      	bcc.n	800c5a4 <__cvt+0xbc>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c598:	1bdb      	subs	r3, r3, r7
 800c59a:	4638      	mov	r0, r7
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	b004      	add	sp, #16
 800c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a4:	1c59      	adds	r1, r3, #1
 800c5a6:	9103      	str	r1, [sp, #12]
 800c5a8:	701a      	strb	r2, [r3, #0]
 800c5aa:	e7f0      	b.n	800c58e <__cvt+0xa6>

0800c5ac <__exponent>:
 800c5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	bfb8      	it	lt
 800c5b4:	4249      	neglt	r1, r1
 800c5b6:	f803 2b02 	strb.w	r2, [r3], #2
 800c5ba:	bfb4      	ite	lt
 800c5bc:	222d      	movlt	r2, #45	; 0x2d
 800c5be:	222b      	movge	r2, #43	; 0x2b
 800c5c0:	2909      	cmp	r1, #9
 800c5c2:	7042      	strb	r2, [r0, #1]
 800c5c4:	dd2a      	ble.n	800c61c <__exponent+0x70>
 800c5c6:	f10d 0407 	add.w	r4, sp, #7
 800c5ca:	46a4      	mov	ip, r4
 800c5cc:	270a      	movs	r7, #10
 800c5ce:	46a6      	mov	lr, r4
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c5d6:	fb07 1516 	mls	r5, r7, r6, r1
 800c5da:	3530      	adds	r5, #48	; 0x30
 800c5dc:	2a63      	cmp	r2, #99	; 0x63
 800c5de:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	dcf1      	bgt.n	800c5ce <__exponent+0x22>
 800c5ea:	3130      	adds	r1, #48	; 0x30
 800c5ec:	f1ae 0502 	sub.w	r5, lr, #2
 800c5f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c5f4:	1c44      	adds	r4, r0, #1
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4561      	cmp	r1, ip
 800c5fa:	d30a      	bcc.n	800c612 <__exponent+0x66>
 800c5fc:	f10d 0209 	add.w	r2, sp, #9
 800c600:	eba2 020e 	sub.w	r2, r2, lr
 800c604:	4565      	cmp	r5, ip
 800c606:	bf88      	it	hi
 800c608:	2200      	movhi	r2, #0
 800c60a:	4413      	add	r3, r2
 800c60c:	1a18      	subs	r0, r3, r0
 800c60e:	b003      	add	sp, #12
 800c610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c61a:	e7ed      	b.n	800c5f8 <__exponent+0x4c>
 800c61c:	2330      	movs	r3, #48	; 0x30
 800c61e:	3130      	adds	r1, #48	; 0x30
 800c620:	7083      	strb	r3, [r0, #2]
 800c622:	70c1      	strb	r1, [r0, #3]
 800c624:	1d03      	adds	r3, r0, #4
 800c626:	e7f1      	b.n	800c60c <__exponent+0x60>

0800c628 <_printf_float>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	ed2d 8b02 	vpush	{d8}
 800c630:	b08d      	sub	sp, #52	; 0x34
 800c632:	460c      	mov	r4, r1
 800c634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c638:	4616      	mov	r6, r2
 800c63a:	461f      	mov	r7, r3
 800c63c:	4605      	mov	r5, r0
 800c63e:	f001 fced 	bl	800e01c <_localeconv_r>
 800c642:	f8d0 a000 	ldr.w	sl, [r0]
 800c646:	4650      	mov	r0, sl
 800c648:	f7f3 fdcc 	bl	80001e4 <strlen>
 800c64c:	2300      	movs	r3, #0
 800c64e:	930a      	str	r3, [sp, #40]	; 0x28
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	9305      	str	r3, [sp, #20]
 800c654:	f8d8 3000 	ldr.w	r3, [r8]
 800c658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c65c:	3307      	adds	r3, #7
 800c65e:	f023 0307 	bic.w	r3, r3, #7
 800c662:	f103 0208 	add.w	r2, r3, #8
 800c666:	f8c8 2000 	str.w	r2, [r8]
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c67a:	9307      	str	r3, [sp, #28]
 800c67c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c680:	ee08 0a10 	vmov	s16, r0
 800c684:	4b9f      	ldr	r3, [pc, #636]	; (800c904 <_printf_float+0x2dc>)
 800c686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c68a:	f04f 32ff 	mov.w	r2, #4294967295
 800c68e:	f7f4 fa5d 	bl	8000b4c <__aeabi_dcmpun>
 800c692:	bb88      	cbnz	r0, 800c6f8 <_printf_float+0xd0>
 800c694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c698:	4b9a      	ldr	r3, [pc, #616]	; (800c904 <_printf_float+0x2dc>)
 800c69a:	f04f 32ff 	mov.w	r2, #4294967295
 800c69e:	f7f4 fa37 	bl	8000b10 <__aeabi_dcmple>
 800c6a2:	bb48      	cbnz	r0, 800c6f8 <_printf_float+0xd0>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f4 fa26 	bl	8000afc <__aeabi_dcmplt>
 800c6b0:	b110      	cbz	r0, 800c6b8 <_printf_float+0x90>
 800c6b2:	232d      	movs	r3, #45	; 0x2d
 800c6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6b8:	4b93      	ldr	r3, [pc, #588]	; (800c908 <_printf_float+0x2e0>)
 800c6ba:	4894      	ldr	r0, [pc, #592]	; (800c90c <_printf_float+0x2e4>)
 800c6bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c6c0:	bf94      	ite	ls
 800c6c2:	4698      	movls	r8, r3
 800c6c4:	4680      	movhi	r8, r0
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	6123      	str	r3, [r4, #16]
 800c6ca:	9b05      	ldr	r3, [sp, #20]
 800c6cc:	f023 0204 	bic.w	r2, r3, #4
 800c6d0:	6022      	str	r2, [r4, #0]
 800c6d2:	f04f 0900 	mov.w	r9, #0
 800c6d6:	9700      	str	r7, [sp, #0]
 800c6d8:	4633      	mov	r3, r6
 800c6da:	aa0b      	add	r2, sp, #44	; 0x2c
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f9d8 	bl	800ca94 <_printf_common>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f040 8090 	bne.w	800c80a <_printf_float+0x1e2>
 800c6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ee:	b00d      	add	sp, #52	; 0x34
 800c6f0:	ecbd 8b02 	vpop	{d8}
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	4642      	mov	r2, r8
 800c6fa:	464b      	mov	r3, r9
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	4649      	mov	r1, r9
 800c700:	f7f4 fa24 	bl	8000b4c <__aeabi_dcmpun>
 800c704:	b140      	cbz	r0, 800c718 <_printf_float+0xf0>
 800c706:	464b      	mov	r3, r9
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfbc      	itt	lt
 800c70c:	232d      	movlt	r3, #45	; 0x2d
 800c70e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c712:	487f      	ldr	r0, [pc, #508]	; (800c910 <_printf_float+0x2e8>)
 800c714:	4b7f      	ldr	r3, [pc, #508]	; (800c914 <_printf_float+0x2ec>)
 800c716:	e7d1      	b.n	800c6bc <_printf_float+0x94>
 800c718:	6863      	ldr	r3, [r4, #4]
 800c71a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c71e:	9206      	str	r2, [sp, #24]
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	d13f      	bne.n	800c7a4 <_printf_float+0x17c>
 800c724:	2306      	movs	r3, #6
 800c726:	6063      	str	r3, [r4, #4]
 800c728:	9b05      	ldr	r3, [sp, #20]
 800c72a:	6861      	ldr	r1, [r4, #4]
 800c72c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c730:	2300      	movs	r3, #0
 800c732:	9303      	str	r3, [sp, #12]
 800c734:	ab0a      	add	r3, sp, #40	; 0x28
 800c736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c73a:	ab09      	add	r3, sp, #36	; 0x24
 800c73c:	ec49 8b10 	vmov	d0, r8, r9
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	6022      	str	r2, [r4, #0]
 800c744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c748:	4628      	mov	r0, r5
 800c74a:	f7ff fecd 	bl	800c4e8 <__cvt>
 800c74e:	9b06      	ldr	r3, [sp, #24]
 800c750:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c752:	2b47      	cmp	r3, #71	; 0x47
 800c754:	4680      	mov	r8, r0
 800c756:	d108      	bne.n	800c76a <_printf_float+0x142>
 800c758:	1cc8      	adds	r0, r1, #3
 800c75a:	db02      	blt.n	800c762 <_printf_float+0x13a>
 800c75c:	6863      	ldr	r3, [r4, #4]
 800c75e:	4299      	cmp	r1, r3
 800c760:	dd41      	ble.n	800c7e6 <_printf_float+0x1be>
 800c762:	f1ab 0b02 	sub.w	fp, fp, #2
 800c766:	fa5f fb8b 	uxtb.w	fp, fp
 800c76a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c76e:	d820      	bhi.n	800c7b2 <_printf_float+0x18a>
 800c770:	3901      	subs	r1, #1
 800c772:	465a      	mov	r2, fp
 800c774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c778:	9109      	str	r1, [sp, #36]	; 0x24
 800c77a:	f7ff ff17 	bl	800c5ac <__exponent>
 800c77e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c780:	1813      	adds	r3, r2, r0
 800c782:	2a01      	cmp	r2, #1
 800c784:	4681      	mov	r9, r0
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	dc02      	bgt.n	800c790 <_printf_float+0x168>
 800c78a:	6822      	ldr	r2, [r4, #0]
 800c78c:	07d2      	lsls	r2, r2, #31
 800c78e:	d501      	bpl.n	800c794 <_printf_float+0x16c>
 800c790:	3301      	adds	r3, #1
 800c792:	6123      	str	r3, [r4, #16]
 800c794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d09c      	beq.n	800c6d6 <_printf_float+0xae>
 800c79c:	232d      	movs	r3, #45	; 0x2d
 800c79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a2:	e798      	b.n	800c6d6 <_printf_float+0xae>
 800c7a4:	9a06      	ldr	r2, [sp, #24]
 800c7a6:	2a47      	cmp	r2, #71	; 0x47
 800c7a8:	d1be      	bne.n	800c728 <_printf_float+0x100>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1bc      	bne.n	800c728 <_printf_float+0x100>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e7b9      	b.n	800c726 <_printf_float+0xfe>
 800c7b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c7b6:	d118      	bne.n	800c7ea <_printf_float+0x1c2>
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	6863      	ldr	r3, [r4, #4]
 800c7bc:	dd0b      	ble.n	800c7d6 <_printf_float+0x1ae>
 800c7be:	6121      	str	r1, [r4, #16]
 800c7c0:	b913      	cbnz	r3, 800c7c8 <_printf_float+0x1a0>
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	07d0      	lsls	r0, r2, #31
 800c7c6:	d502      	bpl.n	800c7ce <_printf_float+0x1a6>
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	440b      	add	r3, r1
 800c7cc:	6123      	str	r3, [r4, #16]
 800c7ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800c7d0:	f04f 0900 	mov.w	r9, #0
 800c7d4:	e7de      	b.n	800c794 <_printf_float+0x16c>
 800c7d6:	b913      	cbnz	r3, 800c7de <_printf_float+0x1b6>
 800c7d8:	6822      	ldr	r2, [r4, #0]
 800c7da:	07d2      	lsls	r2, r2, #31
 800c7dc:	d501      	bpl.n	800c7e2 <_printf_float+0x1ba>
 800c7de:	3302      	adds	r3, #2
 800c7e0:	e7f4      	b.n	800c7cc <_printf_float+0x1a4>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7f2      	b.n	800c7cc <_printf_float+0x1a4>
 800c7e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ec:	4299      	cmp	r1, r3
 800c7ee:	db05      	blt.n	800c7fc <_printf_float+0x1d4>
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	6121      	str	r1, [r4, #16]
 800c7f4:	07d8      	lsls	r0, r3, #31
 800c7f6:	d5ea      	bpl.n	800c7ce <_printf_float+0x1a6>
 800c7f8:	1c4b      	adds	r3, r1, #1
 800c7fa:	e7e7      	b.n	800c7cc <_printf_float+0x1a4>
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	bfd4      	ite	le
 800c800:	f1c1 0202 	rsble	r2, r1, #2
 800c804:	2201      	movgt	r2, #1
 800c806:	4413      	add	r3, r2
 800c808:	e7e0      	b.n	800c7cc <_printf_float+0x1a4>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	055a      	lsls	r2, r3, #21
 800c80e:	d407      	bmi.n	800c820 <_printf_float+0x1f8>
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	4642      	mov	r2, r8
 800c814:	4631      	mov	r1, r6
 800c816:	4628      	mov	r0, r5
 800c818:	47b8      	blx	r7
 800c81a:	3001      	adds	r0, #1
 800c81c:	d12c      	bne.n	800c878 <_printf_float+0x250>
 800c81e:	e764      	b.n	800c6ea <_printf_float+0xc2>
 800c820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c824:	f240 80e0 	bls.w	800c9e8 <_printf_float+0x3c0>
 800c828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c82c:	2200      	movs	r2, #0
 800c82e:	2300      	movs	r3, #0
 800c830:	f7f4 f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c834:	2800      	cmp	r0, #0
 800c836:	d034      	beq.n	800c8a2 <_printf_float+0x27a>
 800c838:	4a37      	ldr	r2, [pc, #220]	; (800c918 <_printf_float+0x2f0>)
 800c83a:	2301      	movs	r3, #1
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f af51 	beq.w	800c6ea <_printf_float+0xc2>
 800c848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c84c:	429a      	cmp	r2, r3
 800c84e:	db02      	blt.n	800c856 <_printf_float+0x22e>
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	07d8      	lsls	r0, r3, #31
 800c854:	d510      	bpl.n	800c878 <_printf_float+0x250>
 800c856:	ee18 3a10 	vmov	r3, s16
 800c85a:	4652      	mov	r2, sl
 800c85c:	4631      	mov	r1, r6
 800c85e:	4628      	mov	r0, r5
 800c860:	47b8      	blx	r7
 800c862:	3001      	adds	r0, #1
 800c864:	f43f af41 	beq.w	800c6ea <_printf_float+0xc2>
 800c868:	f04f 0800 	mov.w	r8, #0
 800c86c:	f104 091a 	add.w	r9, r4, #26
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	3b01      	subs	r3, #1
 800c874:	4543      	cmp	r3, r8
 800c876:	dc09      	bgt.n	800c88c <_printf_float+0x264>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	079b      	lsls	r3, r3, #30
 800c87c:	f100 8105 	bmi.w	800ca8a <_printf_float+0x462>
 800c880:	68e0      	ldr	r0, [r4, #12]
 800c882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c884:	4298      	cmp	r0, r3
 800c886:	bfb8      	it	lt
 800c888:	4618      	movlt	r0, r3
 800c88a:	e730      	b.n	800c6ee <_printf_float+0xc6>
 800c88c:	2301      	movs	r3, #1
 800c88e:	464a      	mov	r2, r9
 800c890:	4631      	mov	r1, r6
 800c892:	4628      	mov	r0, r5
 800c894:	47b8      	blx	r7
 800c896:	3001      	adds	r0, #1
 800c898:	f43f af27 	beq.w	800c6ea <_printf_float+0xc2>
 800c89c:	f108 0801 	add.w	r8, r8, #1
 800c8a0:	e7e6      	b.n	800c870 <_printf_float+0x248>
 800c8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	dc39      	bgt.n	800c91c <_printf_float+0x2f4>
 800c8a8:	4a1b      	ldr	r2, [pc, #108]	; (800c918 <_printf_float+0x2f0>)
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	47b8      	blx	r7
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	f43f af19 	beq.w	800c6ea <_printf_float+0xc2>
 800c8b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	d102      	bne.n	800c8c6 <_printf_float+0x29e>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	07d9      	lsls	r1, r3, #31
 800c8c4:	d5d8      	bpl.n	800c878 <_printf_float+0x250>
 800c8c6:	ee18 3a10 	vmov	r3, s16
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f af09 	beq.w	800c6ea <_printf_float+0xc2>
 800c8d8:	f04f 0900 	mov.w	r9, #0
 800c8dc:	f104 0a1a 	add.w	sl, r4, #26
 800c8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e2:	425b      	negs	r3, r3
 800c8e4:	454b      	cmp	r3, r9
 800c8e6:	dc01      	bgt.n	800c8ec <_printf_float+0x2c4>
 800c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ea:	e792      	b.n	800c812 <_printf_float+0x1ea>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	47b8      	blx	r7
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	f43f aef7 	beq.w	800c6ea <_printf_float+0xc2>
 800c8fc:	f109 0901 	add.w	r9, r9, #1
 800c900:	e7ee      	b.n	800c8e0 <_printf_float+0x2b8>
 800c902:	bf00      	nop
 800c904:	7fefffff 	.word	0x7fefffff
 800c908:	0801b614 	.word	0x0801b614
 800c90c:	0801b618 	.word	0x0801b618
 800c910:	0801b620 	.word	0x0801b620
 800c914:	0801b61c 	.word	0x0801b61c
 800c918:	0801b624 	.word	0x0801b624
 800c91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c91e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c920:	429a      	cmp	r2, r3
 800c922:	bfa8      	it	ge
 800c924:	461a      	movge	r2, r3
 800c926:	2a00      	cmp	r2, #0
 800c928:	4691      	mov	r9, r2
 800c92a:	dc37      	bgt.n	800c99c <_printf_float+0x374>
 800c92c:	f04f 0b00 	mov.w	fp, #0
 800c930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c934:	f104 021a 	add.w	r2, r4, #26
 800c938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	eba3 0309 	sub.w	r3, r3, r9
 800c940:	455b      	cmp	r3, fp
 800c942:	dc33      	bgt.n	800c9ac <_printf_float+0x384>
 800c944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c948:	429a      	cmp	r2, r3
 800c94a:	db3b      	blt.n	800c9c4 <_printf_float+0x39c>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	07da      	lsls	r2, r3, #31
 800c950:	d438      	bmi.n	800c9c4 <_printf_float+0x39c>
 800c952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c954:	9a05      	ldr	r2, [sp, #20]
 800c956:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c958:	1a9a      	subs	r2, r3, r2
 800c95a:	eba3 0901 	sub.w	r9, r3, r1
 800c95e:	4591      	cmp	r9, r2
 800c960:	bfa8      	it	ge
 800c962:	4691      	movge	r9, r2
 800c964:	f1b9 0f00 	cmp.w	r9, #0
 800c968:	dc35      	bgt.n	800c9d6 <_printf_float+0x3ae>
 800c96a:	f04f 0800 	mov.w	r8, #0
 800c96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c972:	f104 0a1a 	add.w	sl, r4, #26
 800c976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	eba3 0309 	sub.w	r3, r3, r9
 800c980:	4543      	cmp	r3, r8
 800c982:	f77f af79 	ble.w	800c878 <_printf_float+0x250>
 800c986:	2301      	movs	r3, #1
 800c988:	4652      	mov	r2, sl
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b8      	blx	r7
 800c990:	3001      	adds	r0, #1
 800c992:	f43f aeaa 	beq.w	800c6ea <_printf_float+0xc2>
 800c996:	f108 0801 	add.w	r8, r8, #1
 800c99a:	e7ec      	b.n	800c976 <_printf_float+0x34e>
 800c99c:	4613      	mov	r3, r2
 800c99e:	4631      	mov	r1, r6
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d1c0      	bne.n	800c92c <_printf_float+0x304>
 800c9aa:	e69e      	b.n	800c6ea <_printf_float+0xc2>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4631      	mov	r1, r6
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	9205      	str	r2, [sp, #20]
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f ae97 	beq.w	800c6ea <_printf_float+0xc2>
 800c9bc:	9a05      	ldr	r2, [sp, #20]
 800c9be:	f10b 0b01 	add.w	fp, fp, #1
 800c9c2:	e7b9      	b.n	800c938 <_printf_float+0x310>
 800c9c4:	ee18 3a10 	vmov	r3, s16
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	47b8      	blx	r7
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d1be      	bne.n	800c952 <_printf_float+0x32a>
 800c9d4:	e689      	b.n	800c6ea <_printf_float+0xc2>
 800c9d6:	9a05      	ldr	r2, [sp, #20]
 800c9d8:	464b      	mov	r3, r9
 800c9da:	4442      	add	r2, r8
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4628      	mov	r0, r5
 800c9e0:	47b8      	blx	r7
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	d1c1      	bne.n	800c96a <_printf_float+0x342>
 800c9e6:	e680      	b.n	800c6ea <_printf_float+0xc2>
 800c9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ea:	2a01      	cmp	r2, #1
 800c9ec:	dc01      	bgt.n	800c9f2 <_printf_float+0x3ca>
 800c9ee:	07db      	lsls	r3, r3, #31
 800c9f0:	d538      	bpl.n	800ca64 <_printf_float+0x43c>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	4642      	mov	r2, r8
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	47b8      	blx	r7
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	f43f ae74 	beq.w	800c6ea <_printf_float+0xc2>
 800ca02:	ee18 3a10 	vmov	r3, s16
 800ca06:	4652      	mov	r2, sl
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	47b8      	blx	r7
 800ca0e:	3001      	adds	r0, #1
 800ca10:	f43f ae6b 	beq.w	800c6ea <_printf_float+0xc2>
 800ca14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f7f4 f864 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca20:	b9d8      	cbnz	r0, 800ca5a <_printf_float+0x432>
 800ca22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca24:	f108 0201 	add.w	r2, r8, #1
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	4631      	mov	r1, r6
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	47b8      	blx	r7
 800ca30:	3001      	adds	r0, #1
 800ca32:	d10e      	bne.n	800ca52 <_printf_float+0x42a>
 800ca34:	e659      	b.n	800c6ea <_printf_float+0xc2>
 800ca36:	2301      	movs	r3, #1
 800ca38:	4652      	mov	r2, sl
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	f43f ae52 	beq.w	800c6ea <_printf_float+0xc2>
 800ca46:	f108 0801 	add.w	r8, r8, #1
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	4543      	cmp	r3, r8
 800ca50:	dcf1      	bgt.n	800ca36 <_printf_float+0x40e>
 800ca52:	464b      	mov	r3, r9
 800ca54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca58:	e6dc      	b.n	800c814 <_printf_float+0x1ec>
 800ca5a:	f04f 0800 	mov.w	r8, #0
 800ca5e:	f104 0a1a 	add.w	sl, r4, #26
 800ca62:	e7f2      	b.n	800ca4a <_printf_float+0x422>
 800ca64:	2301      	movs	r3, #1
 800ca66:	4642      	mov	r2, r8
 800ca68:	e7df      	b.n	800ca2a <_printf_float+0x402>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	464a      	mov	r2, r9
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	f43f ae38 	beq.w	800c6ea <_printf_float+0xc2>
 800ca7a:	f108 0801 	add.w	r8, r8, #1
 800ca7e:	68e3      	ldr	r3, [r4, #12]
 800ca80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca82:	1a5b      	subs	r3, r3, r1
 800ca84:	4543      	cmp	r3, r8
 800ca86:	dcf0      	bgt.n	800ca6a <_printf_float+0x442>
 800ca88:	e6fa      	b.n	800c880 <_printf_float+0x258>
 800ca8a:	f04f 0800 	mov.w	r8, #0
 800ca8e:	f104 0919 	add.w	r9, r4, #25
 800ca92:	e7f4      	b.n	800ca7e <_printf_float+0x456>

0800ca94 <_printf_common>:
 800ca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	4616      	mov	r6, r2
 800ca9a:	4699      	mov	r9, r3
 800ca9c:	688a      	ldr	r2, [r1, #8]
 800ca9e:	690b      	ldr	r3, [r1, #16]
 800caa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caa4:	4293      	cmp	r3, r2
 800caa6:	bfb8      	it	lt
 800caa8:	4613      	movlt	r3, r2
 800caaa:	6033      	str	r3, [r6, #0]
 800caac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cab0:	4607      	mov	r7, r0
 800cab2:	460c      	mov	r4, r1
 800cab4:	b10a      	cbz	r2, 800caba <_printf_common+0x26>
 800cab6:	3301      	adds	r3, #1
 800cab8:	6033      	str	r3, [r6, #0]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	0699      	lsls	r1, r3, #26
 800cabe:	bf42      	ittt	mi
 800cac0:	6833      	ldrmi	r3, [r6, #0]
 800cac2:	3302      	addmi	r3, #2
 800cac4:	6033      	strmi	r3, [r6, #0]
 800cac6:	6825      	ldr	r5, [r4, #0]
 800cac8:	f015 0506 	ands.w	r5, r5, #6
 800cacc:	d106      	bne.n	800cadc <_printf_common+0x48>
 800cace:	f104 0a19 	add.w	sl, r4, #25
 800cad2:	68e3      	ldr	r3, [r4, #12]
 800cad4:	6832      	ldr	r2, [r6, #0]
 800cad6:	1a9b      	subs	r3, r3, r2
 800cad8:	42ab      	cmp	r3, r5
 800cada:	dc26      	bgt.n	800cb2a <_printf_common+0x96>
 800cadc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cae0:	1e13      	subs	r3, r2, #0
 800cae2:	6822      	ldr	r2, [r4, #0]
 800cae4:	bf18      	it	ne
 800cae6:	2301      	movne	r3, #1
 800cae8:	0692      	lsls	r2, r2, #26
 800caea:	d42b      	bmi.n	800cb44 <_printf_common+0xb0>
 800caec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caf0:	4649      	mov	r1, r9
 800caf2:	4638      	mov	r0, r7
 800caf4:	47c0      	blx	r8
 800caf6:	3001      	adds	r0, #1
 800caf8:	d01e      	beq.n	800cb38 <_printf_common+0xa4>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	68e5      	ldr	r5, [r4, #12]
 800cafe:	6832      	ldr	r2, [r6, #0]
 800cb00:	f003 0306 	and.w	r3, r3, #6
 800cb04:	2b04      	cmp	r3, #4
 800cb06:	bf08      	it	eq
 800cb08:	1aad      	subeq	r5, r5, r2
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	6922      	ldr	r2, [r4, #16]
 800cb0e:	bf0c      	ite	eq
 800cb10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb14:	2500      	movne	r5, #0
 800cb16:	4293      	cmp	r3, r2
 800cb18:	bfc4      	itt	gt
 800cb1a:	1a9b      	subgt	r3, r3, r2
 800cb1c:	18ed      	addgt	r5, r5, r3
 800cb1e:	2600      	movs	r6, #0
 800cb20:	341a      	adds	r4, #26
 800cb22:	42b5      	cmp	r5, r6
 800cb24:	d11a      	bne.n	800cb5c <_printf_common+0xc8>
 800cb26:	2000      	movs	r0, #0
 800cb28:	e008      	b.n	800cb3c <_printf_common+0xa8>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4652      	mov	r2, sl
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4638      	mov	r0, r7
 800cb32:	47c0      	blx	r8
 800cb34:	3001      	adds	r0, #1
 800cb36:	d103      	bne.n	800cb40 <_printf_common+0xac>
 800cb38:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb40:	3501      	adds	r5, #1
 800cb42:	e7c6      	b.n	800cad2 <_printf_common+0x3e>
 800cb44:	18e1      	adds	r1, r4, r3
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	2030      	movs	r0, #48	; 0x30
 800cb4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb4e:	4422      	add	r2, r4
 800cb50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb58:	3302      	adds	r3, #2
 800cb5a:	e7c7      	b.n	800caec <_printf_common+0x58>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4649      	mov	r1, r9
 800cb62:	4638      	mov	r0, r7
 800cb64:	47c0      	blx	r8
 800cb66:	3001      	adds	r0, #1
 800cb68:	d0e6      	beq.n	800cb38 <_printf_common+0xa4>
 800cb6a:	3601      	adds	r6, #1
 800cb6c:	e7d9      	b.n	800cb22 <_printf_common+0x8e>
	...

0800cb70 <_printf_i>:
 800cb70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb74:	7e0f      	ldrb	r7, [r1, #24]
 800cb76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb78:	2f78      	cmp	r7, #120	; 0x78
 800cb7a:	4691      	mov	r9, r2
 800cb7c:	4680      	mov	r8, r0
 800cb7e:	460c      	mov	r4, r1
 800cb80:	469a      	mov	sl, r3
 800cb82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb86:	d807      	bhi.n	800cb98 <_printf_i+0x28>
 800cb88:	2f62      	cmp	r7, #98	; 0x62
 800cb8a:	d80a      	bhi.n	800cba2 <_printf_i+0x32>
 800cb8c:	2f00      	cmp	r7, #0
 800cb8e:	f000 80d8 	beq.w	800cd42 <_printf_i+0x1d2>
 800cb92:	2f58      	cmp	r7, #88	; 0x58
 800cb94:	f000 80a3 	beq.w	800ccde <_printf_i+0x16e>
 800cb98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cba0:	e03a      	b.n	800cc18 <_printf_i+0xa8>
 800cba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cba6:	2b15      	cmp	r3, #21
 800cba8:	d8f6      	bhi.n	800cb98 <_printf_i+0x28>
 800cbaa:	a101      	add	r1, pc, #4	; (adr r1, 800cbb0 <_printf_i+0x40>)
 800cbac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbb0:	0800cc09 	.word	0x0800cc09
 800cbb4:	0800cc1d 	.word	0x0800cc1d
 800cbb8:	0800cb99 	.word	0x0800cb99
 800cbbc:	0800cb99 	.word	0x0800cb99
 800cbc0:	0800cb99 	.word	0x0800cb99
 800cbc4:	0800cb99 	.word	0x0800cb99
 800cbc8:	0800cc1d 	.word	0x0800cc1d
 800cbcc:	0800cb99 	.word	0x0800cb99
 800cbd0:	0800cb99 	.word	0x0800cb99
 800cbd4:	0800cb99 	.word	0x0800cb99
 800cbd8:	0800cb99 	.word	0x0800cb99
 800cbdc:	0800cd29 	.word	0x0800cd29
 800cbe0:	0800cc4d 	.word	0x0800cc4d
 800cbe4:	0800cd0b 	.word	0x0800cd0b
 800cbe8:	0800cb99 	.word	0x0800cb99
 800cbec:	0800cb99 	.word	0x0800cb99
 800cbf0:	0800cd4b 	.word	0x0800cd4b
 800cbf4:	0800cb99 	.word	0x0800cb99
 800cbf8:	0800cc4d 	.word	0x0800cc4d
 800cbfc:	0800cb99 	.word	0x0800cb99
 800cc00:	0800cb99 	.word	0x0800cb99
 800cc04:	0800cd13 	.word	0x0800cd13
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	1d1a      	adds	r2, r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	602a      	str	r2, [r5, #0]
 800cc10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e0a3      	b.n	800cd64 <_printf_i+0x1f4>
 800cc1c:	6820      	ldr	r0, [r4, #0]
 800cc1e:	6829      	ldr	r1, [r5, #0]
 800cc20:	0606      	lsls	r6, r0, #24
 800cc22:	f101 0304 	add.w	r3, r1, #4
 800cc26:	d50a      	bpl.n	800cc3e <_printf_i+0xce>
 800cc28:	680e      	ldr	r6, [r1, #0]
 800cc2a:	602b      	str	r3, [r5, #0]
 800cc2c:	2e00      	cmp	r6, #0
 800cc2e:	da03      	bge.n	800cc38 <_printf_i+0xc8>
 800cc30:	232d      	movs	r3, #45	; 0x2d
 800cc32:	4276      	negs	r6, r6
 800cc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc38:	485e      	ldr	r0, [pc, #376]	; (800cdb4 <_printf_i+0x244>)
 800cc3a:	230a      	movs	r3, #10
 800cc3c:	e019      	b.n	800cc72 <_printf_i+0x102>
 800cc3e:	680e      	ldr	r6, [r1, #0]
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc46:	bf18      	it	ne
 800cc48:	b236      	sxthne	r6, r6
 800cc4a:	e7ef      	b.n	800cc2c <_printf_i+0xbc>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	6820      	ldr	r0, [r4, #0]
 800cc50:	1d19      	adds	r1, r3, #4
 800cc52:	6029      	str	r1, [r5, #0]
 800cc54:	0601      	lsls	r1, r0, #24
 800cc56:	d501      	bpl.n	800cc5c <_printf_i+0xec>
 800cc58:	681e      	ldr	r6, [r3, #0]
 800cc5a:	e002      	b.n	800cc62 <_printf_i+0xf2>
 800cc5c:	0646      	lsls	r6, r0, #25
 800cc5e:	d5fb      	bpl.n	800cc58 <_printf_i+0xe8>
 800cc60:	881e      	ldrh	r6, [r3, #0]
 800cc62:	4854      	ldr	r0, [pc, #336]	; (800cdb4 <_printf_i+0x244>)
 800cc64:	2f6f      	cmp	r7, #111	; 0x6f
 800cc66:	bf0c      	ite	eq
 800cc68:	2308      	moveq	r3, #8
 800cc6a:	230a      	movne	r3, #10
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc72:	6865      	ldr	r5, [r4, #4]
 800cc74:	60a5      	str	r5, [r4, #8]
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	bfa2      	ittt	ge
 800cc7a:	6821      	ldrge	r1, [r4, #0]
 800cc7c:	f021 0104 	bicge.w	r1, r1, #4
 800cc80:	6021      	strge	r1, [r4, #0]
 800cc82:	b90e      	cbnz	r6, 800cc88 <_printf_i+0x118>
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	d04d      	beq.n	800cd24 <_printf_i+0x1b4>
 800cc88:	4615      	mov	r5, r2
 800cc8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc8e:	fb03 6711 	mls	r7, r3, r1, r6
 800cc92:	5dc7      	ldrb	r7, [r0, r7]
 800cc94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc98:	4637      	mov	r7, r6
 800cc9a:	42bb      	cmp	r3, r7
 800cc9c:	460e      	mov	r6, r1
 800cc9e:	d9f4      	bls.n	800cc8a <_printf_i+0x11a>
 800cca0:	2b08      	cmp	r3, #8
 800cca2:	d10b      	bne.n	800ccbc <_printf_i+0x14c>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	07de      	lsls	r6, r3, #31
 800cca8:	d508      	bpl.n	800ccbc <_printf_i+0x14c>
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	6861      	ldr	r1, [r4, #4]
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	bfde      	ittt	le
 800ccb2:	2330      	movle	r3, #48	; 0x30
 800ccb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ccbc:	1b52      	subs	r2, r2, r5
 800ccbe:	6122      	str	r2, [r4, #16]
 800ccc0:	f8cd a000 	str.w	sl, [sp]
 800ccc4:	464b      	mov	r3, r9
 800ccc6:	aa03      	add	r2, sp, #12
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4640      	mov	r0, r8
 800cccc:	f7ff fee2 	bl	800ca94 <_printf_common>
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	d14c      	bne.n	800cd6e <_printf_i+0x1fe>
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	b004      	add	sp, #16
 800ccda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccde:	4835      	ldr	r0, [pc, #212]	; (800cdb4 <_printf_i+0x244>)
 800cce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cce4:	6829      	ldr	r1, [r5, #0]
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccec:	6029      	str	r1, [r5, #0]
 800ccee:	061d      	lsls	r5, r3, #24
 800ccf0:	d514      	bpl.n	800cd1c <_printf_i+0x1ac>
 800ccf2:	07df      	lsls	r7, r3, #31
 800ccf4:	bf44      	itt	mi
 800ccf6:	f043 0320 	orrmi.w	r3, r3, #32
 800ccfa:	6023      	strmi	r3, [r4, #0]
 800ccfc:	b91e      	cbnz	r6, 800cd06 <_printf_i+0x196>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	f023 0320 	bic.w	r3, r3, #32
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	2310      	movs	r3, #16
 800cd08:	e7b0      	b.n	800cc6c <_printf_i+0xfc>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	f043 0320 	orr.w	r3, r3, #32
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	2378      	movs	r3, #120	; 0x78
 800cd14:	4828      	ldr	r0, [pc, #160]	; (800cdb8 <_printf_i+0x248>)
 800cd16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd1a:	e7e3      	b.n	800cce4 <_printf_i+0x174>
 800cd1c:	0659      	lsls	r1, r3, #25
 800cd1e:	bf48      	it	mi
 800cd20:	b2b6      	uxthmi	r6, r6
 800cd22:	e7e6      	b.n	800ccf2 <_printf_i+0x182>
 800cd24:	4615      	mov	r5, r2
 800cd26:	e7bb      	b.n	800cca0 <_printf_i+0x130>
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	6826      	ldr	r6, [r4, #0]
 800cd2c:	6961      	ldr	r1, [r4, #20]
 800cd2e:	1d18      	adds	r0, r3, #4
 800cd30:	6028      	str	r0, [r5, #0]
 800cd32:	0635      	lsls	r5, r6, #24
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	d501      	bpl.n	800cd3c <_printf_i+0x1cc>
 800cd38:	6019      	str	r1, [r3, #0]
 800cd3a:	e002      	b.n	800cd42 <_printf_i+0x1d2>
 800cd3c:	0670      	lsls	r0, r6, #25
 800cd3e:	d5fb      	bpl.n	800cd38 <_printf_i+0x1c8>
 800cd40:	8019      	strh	r1, [r3, #0]
 800cd42:	2300      	movs	r3, #0
 800cd44:	6123      	str	r3, [r4, #16]
 800cd46:	4615      	mov	r5, r2
 800cd48:	e7ba      	b.n	800ccc0 <_printf_i+0x150>
 800cd4a:	682b      	ldr	r3, [r5, #0]
 800cd4c:	1d1a      	adds	r2, r3, #4
 800cd4e:	602a      	str	r2, [r5, #0]
 800cd50:	681d      	ldr	r5, [r3, #0]
 800cd52:	6862      	ldr	r2, [r4, #4]
 800cd54:	2100      	movs	r1, #0
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7f3 fa52 	bl	8000200 <memchr>
 800cd5c:	b108      	cbz	r0, 800cd62 <_printf_i+0x1f2>
 800cd5e:	1b40      	subs	r0, r0, r5
 800cd60:	6060      	str	r0, [r4, #4]
 800cd62:	6863      	ldr	r3, [r4, #4]
 800cd64:	6123      	str	r3, [r4, #16]
 800cd66:	2300      	movs	r3, #0
 800cd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd6c:	e7a8      	b.n	800ccc0 <_printf_i+0x150>
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	462a      	mov	r2, r5
 800cd72:	4649      	mov	r1, r9
 800cd74:	4640      	mov	r0, r8
 800cd76:	47d0      	blx	sl
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d0ab      	beq.n	800ccd4 <_printf_i+0x164>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	079b      	lsls	r3, r3, #30
 800cd80:	d413      	bmi.n	800cdaa <_printf_i+0x23a>
 800cd82:	68e0      	ldr	r0, [r4, #12]
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	4298      	cmp	r0, r3
 800cd88:	bfb8      	it	lt
 800cd8a:	4618      	movlt	r0, r3
 800cd8c:	e7a4      	b.n	800ccd8 <_printf_i+0x168>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4632      	mov	r2, r6
 800cd92:	4649      	mov	r1, r9
 800cd94:	4640      	mov	r0, r8
 800cd96:	47d0      	blx	sl
 800cd98:	3001      	adds	r0, #1
 800cd9a:	d09b      	beq.n	800ccd4 <_printf_i+0x164>
 800cd9c:	3501      	adds	r5, #1
 800cd9e:	68e3      	ldr	r3, [r4, #12]
 800cda0:	9903      	ldr	r1, [sp, #12]
 800cda2:	1a5b      	subs	r3, r3, r1
 800cda4:	42ab      	cmp	r3, r5
 800cda6:	dcf2      	bgt.n	800cd8e <_printf_i+0x21e>
 800cda8:	e7eb      	b.n	800cd82 <_printf_i+0x212>
 800cdaa:	2500      	movs	r5, #0
 800cdac:	f104 0619 	add.w	r6, r4, #25
 800cdb0:	e7f5      	b.n	800cd9e <_printf_i+0x22e>
 800cdb2:	bf00      	nop
 800cdb4:	0801b626 	.word	0x0801b626
 800cdb8:	0801b637 	.word	0x0801b637

0800cdbc <_sbrk_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d06      	ldr	r5, [pc, #24]	; (800cdd8 <_sbrk_r+0x1c>)
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	4608      	mov	r0, r1
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	f7f6 f966 	bl	8003098 <_sbrk>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_sbrk_r+0x1a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_sbrk_r+0x1a>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	20004138 	.word	0x20004138

0800cddc <sniprintf>:
 800cddc:	b40c      	push	{r2, r3}
 800cdde:	b530      	push	{r4, r5, lr}
 800cde0:	4b17      	ldr	r3, [pc, #92]	; (800ce40 <sniprintf+0x64>)
 800cde2:	1e0c      	subs	r4, r1, #0
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	b09d      	sub	sp, #116	; 0x74
 800cde8:	da08      	bge.n	800cdfc <sniprintf+0x20>
 800cdea:	238b      	movs	r3, #139	; 0x8b
 800cdec:	602b      	str	r3, [r5, #0]
 800cdee:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf2:	b01d      	add	sp, #116	; 0x74
 800cdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdf8:	b002      	add	sp, #8
 800cdfa:	4770      	bx	lr
 800cdfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ce00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce04:	bf14      	ite	ne
 800ce06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce0a:	4623      	moveq	r3, r4
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	9307      	str	r3, [sp, #28]
 800ce10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce14:	9002      	str	r0, [sp, #8]
 800ce16:	9006      	str	r0, [sp, #24]
 800ce18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce1e:	ab21      	add	r3, sp, #132	; 0x84
 800ce20:	a902      	add	r1, sp, #8
 800ce22:	4628      	mov	r0, r5
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	f001 fda5 	bl	800e974 <_svfiprintf_r>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	bfbc      	itt	lt
 800ce2e:	238b      	movlt	r3, #139	; 0x8b
 800ce30:	602b      	strlt	r3, [r5, #0]
 800ce32:	2c00      	cmp	r4, #0
 800ce34:	d0dd      	beq.n	800cdf2 <sniprintf+0x16>
 800ce36:	9b02      	ldr	r3, [sp, #8]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	e7d9      	b.n	800cdf2 <sniprintf+0x16>
 800ce3e:	bf00      	nop
 800ce40:	2000098c 	.word	0x2000098c

0800ce44 <siprintf>:
 800ce44:	b40e      	push	{r1, r2, r3}
 800ce46:	b500      	push	{lr}
 800ce48:	b09c      	sub	sp, #112	; 0x70
 800ce4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce4c:	9002      	str	r0, [sp, #8]
 800ce4e:	9006      	str	r0, [sp, #24]
 800ce50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce54:	4809      	ldr	r0, [pc, #36]	; (800ce7c <siprintf+0x38>)
 800ce56:	9107      	str	r1, [sp, #28]
 800ce58:	9104      	str	r1, [sp, #16]
 800ce5a:	4909      	ldr	r1, [pc, #36]	; (800ce80 <siprintf+0x3c>)
 800ce5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce60:	9105      	str	r1, [sp, #20]
 800ce62:	6800      	ldr	r0, [r0, #0]
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	a902      	add	r1, sp, #8
 800ce68:	f001 fd84 	bl	800e974 <_svfiprintf_r>
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	b01c      	add	sp, #112	; 0x70
 800ce74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce78:	b003      	add	sp, #12
 800ce7a:	4770      	bx	lr
 800ce7c:	2000098c 	.word	0x2000098c
 800ce80:	ffff0208 	.word	0xffff0208

0800ce84 <__sread>:
 800ce84:	b510      	push	{r4, lr}
 800ce86:	460c      	mov	r4, r1
 800ce88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce8c:	f001 ffcc 	bl	800ee28 <_read_r>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	bfab      	itete	ge
 800ce94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce96:	89a3      	ldrhlt	r3, [r4, #12]
 800ce98:	181b      	addge	r3, r3, r0
 800ce9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce9e:	bfac      	ite	ge
 800cea0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cea2:	81a3      	strhlt	r3, [r4, #12]
 800cea4:	bd10      	pop	{r4, pc}

0800cea6 <__swrite>:
 800cea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceaa:	461f      	mov	r7, r3
 800ceac:	898b      	ldrh	r3, [r1, #12]
 800ceae:	05db      	lsls	r3, r3, #23
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	4616      	mov	r6, r2
 800ceb6:	d505      	bpl.n	800cec4 <__swrite+0x1e>
 800ceb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cebc:	2302      	movs	r3, #2
 800cebe:	2200      	movs	r2, #0
 800cec0:	f001 f8b0 	bl	800e024 <_lseek_r>
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cece:	81a3      	strh	r3, [r4, #12]
 800ced0:	4632      	mov	r2, r6
 800ced2:	463b      	mov	r3, r7
 800ced4:	4628      	mov	r0, r5
 800ced6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceda:	f000 b8a3 	b.w	800d024 <_write_r>

0800cede <__sseek>:
 800cede:	b510      	push	{r4, lr}
 800cee0:	460c      	mov	r4, r1
 800cee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee6:	f001 f89d 	bl	800e024 <_lseek_r>
 800ceea:	1c43      	adds	r3, r0, #1
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	bf15      	itete	ne
 800cef0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cefa:	81a3      	strheq	r3, [r4, #12]
 800cefc:	bf18      	it	ne
 800cefe:	81a3      	strhne	r3, [r4, #12]
 800cf00:	bd10      	pop	{r4, pc}

0800cf02 <__sclose>:
 800cf02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf06:	f000 b92b 	b.w	800d160 <_close_r>

0800cf0a <strcat>:
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	7814      	ldrb	r4, [r2, #0]
 800cf10:	4613      	mov	r3, r2
 800cf12:	3201      	adds	r2, #1
 800cf14:	2c00      	cmp	r4, #0
 800cf16:	d1fa      	bne.n	800cf0e <strcat+0x4>
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf22:	2a00      	cmp	r2, #0
 800cf24:	d1f9      	bne.n	800cf1a <strcat+0x10>
 800cf26:	bd10      	pop	{r4, pc}

0800cf28 <strchr>:
 800cf28:	b2c9      	uxtb	r1, r1
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf30:	b11a      	cbz	r2, 800cf3a <strchr+0x12>
 800cf32:	428a      	cmp	r2, r1
 800cf34:	d1f9      	bne.n	800cf2a <strchr+0x2>
 800cf36:	4618      	mov	r0, r3
 800cf38:	4770      	bx	lr
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	bf18      	it	ne
 800cf3e:	2300      	movne	r3, #0
 800cf40:	e7f9      	b.n	800cf36 <strchr+0xe>

0800cf42 <strcpy>:
 800cf42:	4603      	mov	r3, r0
 800cf44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf48:	f803 2b01 	strb.w	r2, [r3], #1
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d1f9      	bne.n	800cf44 <strcpy+0x2>
 800cf50:	4770      	bx	lr

0800cf52 <strstr>:
 800cf52:	780a      	ldrb	r2, [r1, #0]
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	b96a      	cbnz	r2, 800cf74 <strstr+0x22>
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d109      	bne.n	800cf72 <strstr+0x20>
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4605      	mov	r5, r0
 800cf62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f6      	beq.n	800cf58 <strstr+0x6>
 800cf6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cf6e:	429e      	cmp	r6, r3
 800cf70:	d0f7      	beq.n	800cf62 <strstr+0x10>
 800cf72:	3001      	adds	r0, #1
 800cf74:	7803      	ldrb	r3, [r0, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1ef      	bne.n	800cf5a <strstr+0x8>
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	e7ec      	b.n	800cf58 <strstr+0x6>
	...

0800cf80 <__swbuf_r>:
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf82:	460e      	mov	r6, r1
 800cf84:	4614      	mov	r4, r2
 800cf86:	4605      	mov	r5, r0
 800cf88:	b118      	cbz	r0, 800cf92 <__swbuf_r+0x12>
 800cf8a:	6983      	ldr	r3, [r0, #24]
 800cf8c:	b90b      	cbnz	r3, 800cf92 <__swbuf_r+0x12>
 800cf8e:	f7ff f8e7 	bl	800c160 <__sinit>
 800cf92:	4b21      	ldr	r3, [pc, #132]	; (800d018 <__swbuf_r+0x98>)
 800cf94:	429c      	cmp	r4, r3
 800cf96:	d12b      	bne.n	800cff0 <__swbuf_r+0x70>
 800cf98:	686c      	ldr	r4, [r5, #4]
 800cf9a:	69a3      	ldr	r3, [r4, #24]
 800cf9c:	60a3      	str	r3, [r4, #8]
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	071a      	lsls	r2, r3, #28
 800cfa2:	d52f      	bpl.n	800d004 <__swbuf_r+0x84>
 800cfa4:	6923      	ldr	r3, [r4, #16]
 800cfa6:	b36b      	cbz	r3, 800d004 <__swbuf_r+0x84>
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	6820      	ldr	r0, [r4, #0]
 800cfac:	1ac0      	subs	r0, r0, r3
 800cfae:	6963      	ldr	r3, [r4, #20]
 800cfb0:	b2f6      	uxtb	r6, r6
 800cfb2:	4283      	cmp	r3, r0
 800cfb4:	4637      	mov	r7, r6
 800cfb6:	dc04      	bgt.n	800cfc2 <__swbuf_r+0x42>
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f000 ffe0 	bl	800df80 <_fflush_r>
 800cfc0:	bb30      	cbnz	r0, 800d010 <__swbuf_r+0x90>
 800cfc2:	68a3      	ldr	r3, [r4, #8]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	60a3      	str	r3, [r4, #8]
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	6022      	str	r2, [r4, #0]
 800cfce:	701e      	strb	r6, [r3, #0]
 800cfd0:	6963      	ldr	r3, [r4, #20]
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	4283      	cmp	r3, r0
 800cfd6:	d004      	beq.n	800cfe2 <__swbuf_r+0x62>
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	07db      	lsls	r3, r3, #31
 800cfdc:	d506      	bpl.n	800cfec <__swbuf_r+0x6c>
 800cfde:	2e0a      	cmp	r6, #10
 800cfe0:	d104      	bne.n	800cfec <__swbuf_r+0x6c>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f000 ffcb 	bl	800df80 <_fflush_r>
 800cfea:	b988      	cbnz	r0, 800d010 <__swbuf_r+0x90>
 800cfec:	4638      	mov	r0, r7
 800cfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <__swbuf_r+0x9c>)
 800cff2:	429c      	cmp	r4, r3
 800cff4:	d101      	bne.n	800cffa <__swbuf_r+0x7a>
 800cff6:	68ac      	ldr	r4, [r5, #8]
 800cff8:	e7cf      	b.n	800cf9a <__swbuf_r+0x1a>
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <__swbuf_r+0xa0>)
 800cffc:	429c      	cmp	r4, r3
 800cffe:	bf08      	it	eq
 800d000:	68ec      	ldreq	r4, [r5, #12]
 800d002:	e7ca      	b.n	800cf9a <__swbuf_r+0x1a>
 800d004:	4621      	mov	r1, r4
 800d006:	4628      	mov	r0, r5
 800d008:	f000 f81e 	bl	800d048 <__swsetup_r>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d0cb      	beq.n	800cfa8 <__swbuf_r+0x28>
 800d010:	f04f 37ff 	mov.w	r7, #4294967295
 800d014:	e7ea      	b.n	800cfec <__swbuf_r+0x6c>
 800d016:	bf00      	nop
 800d018:	0801b5d0 	.word	0x0801b5d0
 800d01c:	0801b5f0 	.word	0x0801b5f0
 800d020:	0801b5b0 	.word	0x0801b5b0

0800d024 <_write_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d07      	ldr	r5, [pc, #28]	; (800d044 <_write_r+0x20>)
 800d028:	4604      	mov	r4, r0
 800d02a:	4608      	mov	r0, r1
 800d02c:	4611      	mov	r1, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	602a      	str	r2, [r5, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	f7fc f973 	bl	800931e <_write>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_write_r+0x1e>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_write_r+0x1e>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20004138 	.word	0x20004138

0800d048 <__swsetup_r>:
 800d048:	4b32      	ldr	r3, [pc, #200]	; (800d114 <__swsetup_r+0xcc>)
 800d04a:	b570      	push	{r4, r5, r6, lr}
 800d04c:	681d      	ldr	r5, [r3, #0]
 800d04e:	4606      	mov	r6, r0
 800d050:	460c      	mov	r4, r1
 800d052:	b125      	cbz	r5, 800d05e <__swsetup_r+0x16>
 800d054:	69ab      	ldr	r3, [r5, #24]
 800d056:	b913      	cbnz	r3, 800d05e <__swsetup_r+0x16>
 800d058:	4628      	mov	r0, r5
 800d05a:	f7ff f881 	bl	800c160 <__sinit>
 800d05e:	4b2e      	ldr	r3, [pc, #184]	; (800d118 <__swsetup_r+0xd0>)
 800d060:	429c      	cmp	r4, r3
 800d062:	d10f      	bne.n	800d084 <__swsetup_r+0x3c>
 800d064:	686c      	ldr	r4, [r5, #4]
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d06c:	0719      	lsls	r1, r3, #28
 800d06e:	d42c      	bmi.n	800d0ca <__swsetup_r+0x82>
 800d070:	06dd      	lsls	r5, r3, #27
 800d072:	d411      	bmi.n	800d098 <__swsetup_r+0x50>
 800d074:	2309      	movs	r3, #9
 800d076:	6033      	str	r3, [r6, #0]
 800d078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d07c:	81a3      	strh	r3, [r4, #12]
 800d07e:	f04f 30ff 	mov.w	r0, #4294967295
 800d082:	e03e      	b.n	800d102 <__swsetup_r+0xba>
 800d084:	4b25      	ldr	r3, [pc, #148]	; (800d11c <__swsetup_r+0xd4>)
 800d086:	429c      	cmp	r4, r3
 800d088:	d101      	bne.n	800d08e <__swsetup_r+0x46>
 800d08a:	68ac      	ldr	r4, [r5, #8]
 800d08c:	e7eb      	b.n	800d066 <__swsetup_r+0x1e>
 800d08e:	4b24      	ldr	r3, [pc, #144]	; (800d120 <__swsetup_r+0xd8>)
 800d090:	429c      	cmp	r4, r3
 800d092:	bf08      	it	eq
 800d094:	68ec      	ldreq	r4, [r5, #12]
 800d096:	e7e6      	b.n	800d066 <__swsetup_r+0x1e>
 800d098:	0758      	lsls	r0, r3, #29
 800d09a:	d512      	bpl.n	800d0c2 <__swsetup_r+0x7a>
 800d09c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d09e:	b141      	cbz	r1, 800d0b2 <__swsetup_r+0x6a>
 800d0a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d002      	beq.n	800d0ae <__swsetup_r+0x66>
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff f93d 	bl	800c328 <_free_r>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	6363      	str	r3, [r4, #52]	; 0x34
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	f043 0308 	orr.w	r3, r3, #8
 800d0c8:	81a3      	strh	r3, [r4, #12]
 800d0ca:	6923      	ldr	r3, [r4, #16]
 800d0cc:	b94b      	cbnz	r3, 800d0e2 <__swsetup_r+0x9a>
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0d8:	d003      	beq.n	800d0e2 <__swsetup_r+0x9a>
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f000 ffd9 	bl	800e094 <__smakebuf_r>
 800d0e2:	89a0      	ldrh	r0, [r4, #12]
 800d0e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0e8:	f010 0301 	ands.w	r3, r0, #1
 800d0ec:	d00a      	beq.n	800d104 <__swsetup_r+0xbc>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60a3      	str	r3, [r4, #8]
 800d0f2:	6963      	ldr	r3, [r4, #20]
 800d0f4:	425b      	negs	r3, r3
 800d0f6:	61a3      	str	r3, [r4, #24]
 800d0f8:	6923      	ldr	r3, [r4, #16]
 800d0fa:	b943      	cbnz	r3, 800d10e <__swsetup_r+0xc6>
 800d0fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d100:	d1ba      	bne.n	800d078 <__swsetup_r+0x30>
 800d102:	bd70      	pop	{r4, r5, r6, pc}
 800d104:	0781      	lsls	r1, r0, #30
 800d106:	bf58      	it	pl
 800d108:	6963      	ldrpl	r3, [r4, #20]
 800d10a:	60a3      	str	r3, [r4, #8]
 800d10c:	e7f4      	b.n	800d0f8 <__swsetup_r+0xb0>
 800d10e:	2000      	movs	r0, #0
 800d110:	e7f7      	b.n	800d102 <__swsetup_r+0xba>
 800d112:	bf00      	nop
 800d114:	2000098c 	.word	0x2000098c
 800d118:	0801b5d0 	.word	0x0801b5d0
 800d11c:	0801b5f0 	.word	0x0801b5f0
 800d120:	0801b5b0 	.word	0x0801b5b0

0800d124 <__assert_func>:
 800d124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d126:	4614      	mov	r4, r2
 800d128:	461a      	mov	r2, r3
 800d12a:	4b09      	ldr	r3, [pc, #36]	; (800d150 <__assert_func+0x2c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4605      	mov	r5, r0
 800d130:	68d8      	ldr	r0, [r3, #12]
 800d132:	b14c      	cbz	r4, 800d148 <__assert_func+0x24>
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <__assert_func+0x30>)
 800d136:	9100      	str	r1, [sp, #0]
 800d138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d13c:	4906      	ldr	r1, [pc, #24]	; (800d158 <__assert_func+0x34>)
 800d13e:	462b      	mov	r3, r5
 800d140:	f000 ff5a 	bl	800dff8 <fiprintf>
 800d144:	f001 fe82 	bl	800ee4c <abort>
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <__assert_func+0x38>)
 800d14a:	461c      	mov	r4, r3
 800d14c:	e7f3      	b.n	800d136 <__assert_func+0x12>
 800d14e:	bf00      	nop
 800d150:	2000098c 	.word	0x2000098c
 800d154:	0801b648 	.word	0x0801b648
 800d158:	0801b655 	.word	0x0801b655
 800d15c:	0801b683 	.word	0x0801b683

0800d160 <_close_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_close_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7fc f908 	bl	8009380 <_close>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_close_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_close_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20004138 	.word	0x20004138

0800d180 <quorem>:
 800d180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	6903      	ldr	r3, [r0, #16]
 800d186:	690c      	ldr	r4, [r1, #16]
 800d188:	42a3      	cmp	r3, r4
 800d18a:	4607      	mov	r7, r0
 800d18c:	f2c0 8081 	blt.w	800d292 <quorem+0x112>
 800d190:	3c01      	subs	r4, #1
 800d192:	f101 0814 	add.w	r8, r1, #20
 800d196:	f100 0514 	add.w	r5, r0, #20
 800d19a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1b8:	d331      	bcc.n	800d21e <quorem+0x9e>
 800d1ba:	f04f 0e00 	mov.w	lr, #0
 800d1be:	4640      	mov	r0, r8
 800d1c0:	46ac      	mov	ip, r5
 800d1c2:	46f2      	mov	sl, lr
 800d1c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1c8:	b293      	uxth	r3, r2
 800d1ca:	fb06 e303 	mla	r3, r6, r3, lr
 800d1ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d8:	f8dc a000 	ldr.w	sl, [ip]
 800d1dc:	0c12      	lsrs	r2, r2, #16
 800d1de:	fa13 f38a 	uxtah	r3, r3, sl
 800d1e2:	fb06 e202 	mla	r2, r6, r2, lr
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	9b00      	ldr	r3, [sp, #0]
 800d1ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1ee:	b292      	uxth	r2, r2
 800d1f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1fc:	4581      	cmp	r9, r0
 800d1fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d202:	f84c 3b04 	str.w	r3, [ip], #4
 800d206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d20a:	d2db      	bcs.n	800d1c4 <quorem+0x44>
 800d20c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d210:	b92b      	cbnz	r3, 800d21e <quorem+0x9e>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	3b04      	subs	r3, #4
 800d216:	429d      	cmp	r5, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	d32e      	bcc.n	800d27a <quorem+0xfa>
 800d21c:	613c      	str	r4, [r7, #16]
 800d21e:	4638      	mov	r0, r7
 800d220:	f001 fa06 	bl	800e630 <__mcmp>
 800d224:	2800      	cmp	r0, #0
 800d226:	db24      	blt.n	800d272 <quorem+0xf2>
 800d228:	3601      	adds	r6, #1
 800d22a:	4628      	mov	r0, r5
 800d22c:	f04f 0c00 	mov.w	ip, #0
 800d230:	f858 2b04 	ldr.w	r2, [r8], #4
 800d234:	f8d0 e000 	ldr.w	lr, [r0]
 800d238:	b293      	uxth	r3, r2
 800d23a:	ebac 0303 	sub.w	r3, ip, r3
 800d23e:	0c12      	lsrs	r2, r2, #16
 800d240:	fa13 f38e 	uxtah	r3, r3, lr
 800d244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d252:	45c1      	cmp	r9, r8
 800d254:	f840 3b04 	str.w	r3, [r0], #4
 800d258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d25c:	d2e8      	bcs.n	800d230 <quorem+0xb0>
 800d25e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d266:	b922      	cbnz	r2, 800d272 <quorem+0xf2>
 800d268:	3b04      	subs	r3, #4
 800d26a:	429d      	cmp	r5, r3
 800d26c:	461a      	mov	r2, r3
 800d26e:	d30a      	bcc.n	800d286 <quorem+0x106>
 800d270:	613c      	str	r4, [r7, #16]
 800d272:	4630      	mov	r0, r6
 800d274:	b003      	add	sp, #12
 800d276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27a:	6812      	ldr	r2, [r2, #0]
 800d27c:	3b04      	subs	r3, #4
 800d27e:	2a00      	cmp	r2, #0
 800d280:	d1cc      	bne.n	800d21c <quorem+0x9c>
 800d282:	3c01      	subs	r4, #1
 800d284:	e7c7      	b.n	800d216 <quorem+0x96>
 800d286:	6812      	ldr	r2, [r2, #0]
 800d288:	3b04      	subs	r3, #4
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d1f0      	bne.n	800d270 <quorem+0xf0>
 800d28e:	3c01      	subs	r4, #1
 800d290:	e7eb      	b.n	800d26a <quorem+0xea>
 800d292:	2000      	movs	r0, #0
 800d294:	e7ee      	b.n	800d274 <quorem+0xf4>
	...

0800d298 <_dtoa_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	ed2d 8b04 	vpush	{d8-d9}
 800d2a0:	ec57 6b10 	vmov	r6, r7, d0
 800d2a4:	b093      	sub	sp, #76	; 0x4c
 800d2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2ac:	9106      	str	r1, [sp, #24]
 800d2ae:	ee10 aa10 	vmov	sl, s0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2b8:	46bb      	mov	fp, r7
 800d2ba:	b975      	cbnz	r5, 800d2da <_dtoa_r+0x42>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f7ff f815 	bl	800c2ec <malloc>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d2c6:	b920      	cbnz	r0, 800d2d2 <_dtoa_r+0x3a>
 800d2c8:	4ba7      	ldr	r3, [pc, #668]	; (800d568 <_dtoa_r+0x2d0>)
 800d2ca:	21ea      	movs	r1, #234	; 0xea
 800d2cc:	48a7      	ldr	r0, [pc, #668]	; (800d56c <_dtoa_r+0x2d4>)
 800d2ce:	f7ff ff29 	bl	800d124 <__assert_func>
 800d2d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2d6:	6005      	str	r5, [r0, #0]
 800d2d8:	60c5      	str	r5, [r0, #12]
 800d2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2dc:	6819      	ldr	r1, [r3, #0]
 800d2de:	b151      	cbz	r1, 800d2f6 <_dtoa_r+0x5e>
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	604a      	str	r2, [r1, #4]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4093      	lsls	r3, r2
 800d2e8:	608b      	str	r3, [r1, #8]
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 ff5e 	bl	800e1ac <_Bfree>
 800d2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	1e3b      	subs	r3, r7, #0
 800d2f8:	bfaa      	itet	ge
 800d2fa:	2300      	movge	r3, #0
 800d2fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d300:	f8c8 3000 	strge.w	r3, [r8]
 800d304:	4b9a      	ldr	r3, [pc, #616]	; (800d570 <_dtoa_r+0x2d8>)
 800d306:	bfbc      	itt	lt
 800d308:	2201      	movlt	r2, #1
 800d30a:	f8c8 2000 	strlt.w	r2, [r8]
 800d30e:	ea33 030b 	bics.w	r3, r3, fp
 800d312:	d11b      	bne.n	800d34c <_dtoa_r+0xb4>
 800d314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d316:	f242 730f 	movw	r3, #9999	; 0x270f
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d320:	4333      	orrs	r3, r6
 800d322:	f000 8592 	beq.w	800de4a <_dtoa_r+0xbb2>
 800d326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d328:	b963      	cbnz	r3, 800d344 <_dtoa_r+0xac>
 800d32a:	4b92      	ldr	r3, [pc, #584]	; (800d574 <_dtoa_r+0x2dc>)
 800d32c:	e022      	b.n	800d374 <_dtoa_r+0xdc>
 800d32e:	4b92      	ldr	r3, [pc, #584]	; (800d578 <_dtoa_r+0x2e0>)
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	3308      	adds	r3, #8
 800d334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	9801      	ldr	r0, [sp, #4]
 800d33a:	b013      	add	sp, #76	; 0x4c
 800d33c:	ecbd 8b04 	vpop	{d8-d9}
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	4b8b      	ldr	r3, [pc, #556]	; (800d574 <_dtoa_r+0x2dc>)
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	3303      	adds	r3, #3
 800d34a:	e7f3      	b.n	800d334 <_dtoa_r+0x9c>
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	f7f3 fbc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800d358:	ec4b ab19 	vmov	d9, sl, fp
 800d35c:	4680      	mov	r8, r0
 800d35e:	b158      	cbz	r0, 800d378 <_dtoa_r+0xe0>
 800d360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d362:	2301      	movs	r3, #1
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 856b 	beq.w	800de44 <_dtoa_r+0xbac>
 800d36e:	4883      	ldr	r0, [pc, #524]	; (800d57c <_dtoa_r+0x2e4>)
 800d370:	6018      	str	r0, [r3, #0]
 800d372:	1e43      	subs	r3, r0, #1
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	e7df      	b.n	800d338 <_dtoa_r+0xa0>
 800d378:	ec4b ab10 	vmov	d0, sl, fp
 800d37c:	aa10      	add	r2, sp, #64	; 0x40
 800d37e:	a911      	add	r1, sp, #68	; 0x44
 800d380:	4620      	mov	r0, r4
 800d382:	f001 f9fb 	bl	800e77c <__d2b>
 800d386:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	2d00      	cmp	r5, #0
 800d390:	f000 8084 	beq.w	800d49c <_dtoa_r+0x204>
 800d394:	ee19 3a90 	vmov	r3, s19
 800d398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d39c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d3a0:	4656      	mov	r6, sl
 800d3a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d3a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d3ae:	4b74      	ldr	r3, [pc, #464]	; (800d580 <_dtoa_r+0x2e8>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f2 ff77 	bl	80002a8 <__aeabi_dsub>
 800d3ba:	a365      	add	r3, pc, #404	; (adr r3, 800d550 <_dtoa_r+0x2b8>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f3 f92a 	bl	8000618 <__aeabi_dmul>
 800d3c4:	a364      	add	r3, pc, #400	; (adr r3, 800d558 <_dtoa_r+0x2c0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff6f 	bl	80002ac <__adddf3>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	f7f3 f8b6 	bl	8000544 <__aeabi_i2d>
 800d3d8:	a361      	add	r3, pc, #388	; (adr r3, 800d560 <_dtoa_r+0x2c8>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f3 f91b 	bl	8000618 <__aeabi_dmul>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	f7f2 ff5f 	bl	80002ac <__adddf3>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460f      	mov	r7, r1
 800d3f2:	f7f3 fbc1 	bl	8000b78 <__aeabi_d2iz>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9000      	str	r0, [sp, #0]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	f7f3 fb7c 	bl	8000afc <__aeabi_dcmplt>
 800d404:	b150      	cbz	r0, 800d41c <_dtoa_r+0x184>
 800d406:	9800      	ldr	r0, [sp, #0]
 800d408:	f7f3 f89c 	bl	8000544 <__aeabi_i2d>
 800d40c:	4632      	mov	r2, r6
 800d40e:	463b      	mov	r3, r7
 800d410:	f7f3 fb6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d414:	b910      	cbnz	r0, 800d41c <_dtoa_r+0x184>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	9b00      	ldr	r3, [sp, #0]
 800d41e:	2b16      	cmp	r3, #22
 800d420:	d85a      	bhi.n	800d4d8 <_dtoa_r+0x240>
 800d422:	9a00      	ldr	r2, [sp, #0]
 800d424:	4b57      	ldr	r3, [pc, #348]	; (800d584 <_dtoa_r+0x2ec>)
 800d426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	ec51 0b19 	vmov	r0, r1, d9
 800d432:	f7f3 fb63 	bl	8000afc <__aeabi_dcmplt>
 800d436:	2800      	cmp	r0, #0
 800d438:	d050      	beq.n	800d4dc <_dtoa_r+0x244>
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	930b      	str	r3, [sp, #44]	; 0x2c
 800d444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d446:	1b5d      	subs	r5, r3, r5
 800d448:	1e6b      	subs	r3, r5, #1
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	bf45      	ittet	mi
 800d44e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d452:	9304      	strmi	r3, [sp, #16]
 800d454:	2300      	movpl	r3, #0
 800d456:	2300      	movmi	r3, #0
 800d458:	bf4c      	ite	mi
 800d45a:	9305      	strmi	r3, [sp, #20]
 800d45c:	9304      	strpl	r3, [sp, #16]
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	db3d      	blt.n	800d4e0 <_dtoa_r+0x248>
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	9a00      	ldr	r2, [sp, #0]
 800d468:	920a      	str	r2, [sp, #40]	; 0x28
 800d46a:	4413      	add	r3, r2
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	2300      	movs	r3, #0
 800d470:	9307      	str	r3, [sp, #28]
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b09      	cmp	r3, #9
 800d476:	f200 8089 	bhi.w	800d58c <_dtoa_r+0x2f4>
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	bfc4      	itt	gt
 800d47e:	3b04      	subgt	r3, #4
 800d480:	9306      	strgt	r3, [sp, #24]
 800d482:	9b06      	ldr	r3, [sp, #24]
 800d484:	f1a3 0302 	sub.w	r3, r3, #2
 800d488:	bfcc      	ite	gt
 800d48a:	2500      	movgt	r5, #0
 800d48c:	2501      	movle	r5, #1
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f200 8087 	bhi.w	800d5a2 <_dtoa_r+0x30a>
 800d494:	e8df f003 	tbb	[pc, r3]
 800d498:	59383a2d 	.word	0x59383a2d
 800d49c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d4a0:	441d      	add	r5, r3
 800d4a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	bfc1      	itttt	gt
 800d4aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d4b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4ba:	bfda      	itte	le
 800d4bc:	f1c3 0320 	rsble	r3, r3, #32
 800d4c0:	fa06 f003 	lslle.w	r0, r6, r3
 800d4c4:	4318      	orrgt	r0, r3
 800d4c6:	f7f3 f82d 	bl	8000524 <__aeabi_ui2d>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4d2:	3d01      	subs	r5, #1
 800d4d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d4d6:	e76a      	b.n	800d3ae <_dtoa_r+0x116>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e7b2      	b.n	800d442 <_dtoa_r+0x1aa>
 800d4dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4de:	e7b1      	b.n	800d444 <_dtoa_r+0x1ac>
 800d4e0:	9b04      	ldr	r3, [sp, #16]
 800d4e2:	9a00      	ldr	r2, [sp, #0]
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	4253      	negs	r3, r2
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d4f0:	e7bf      	b.n	800d472 <_dtoa_r+0x1da>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dc55      	bgt.n	800d5a8 <_dtoa_r+0x310>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d502:	461a      	mov	r2, r3
 800d504:	9209      	str	r2, [sp, #36]	; 0x24
 800d506:	e00c      	b.n	800d522 <_dtoa_r+0x28a>
 800d508:	2301      	movs	r3, #1
 800d50a:	e7f3      	b.n	800d4f4 <_dtoa_r+0x25c>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d510:	9308      	str	r3, [sp, #32]
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	4413      	add	r3, r2
 800d516:	9302      	str	r3, [sp, #8]
 800d518:	3301      	adds	r3, #1
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	9303      	str	r3, [sp, #12]
 800d51e:	bfb8      	it	lt
 800d520:	2301      	movlt	r3, #1
 800d522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d524:	2200      	movs	r2, #0
 800d526:	6042      	str	r2, [r0, #4]
 800d528:	2204      	movs	r2, #4
 800d52a:	f102 0614 	add.w	r6, r2, #20
 800d52e:	429e      	cmp	r6, r3
 800d530:	6841      	ldr	r1, [r0, #4]
 800d532:	d93d      	bls.n	800d5b0 <_dtoa_r+0x318>
 800d534:	4620      	mov	r0, r4
 800d536:	f000 fdf9 	bl	800e12c <_Balloc>
 800d53a:	9001      	str	r0, [sp, #4]
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d13b      	bne.n	800d5b8 <_dtoa_r+0x320>
 800d540:	4b11      	ldr	r3, [pc, #68]	; (800d588 <_dtoa_r+0x2f0>)
 800d542:	4602      	mov	r2, r0
 800d544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d548:	e6c0      	b.n	800d2cc <_dtoa_r+0x34>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e7df      	b.n	800d50e <_dtoa_r+0x276>
 800d54e:	bf00      	nop
 800d550:	636f4361 	.word	0x636f4361
 800d554:	3fd287a7 	.word	0x3fd287a7
 800d558:	8b60c8b3 	.word	0x8b60c8b3
 800d55c:	3fc68a28 	.word	0x3fc68a28
 800d560:	509f79fb 	.word	0x509f79fb
 800d564:	3fd34413 	.word	0x3fd34413
 800d568:	0801b691 	.word	0x0801b691
 800d56c:	0801b6a8 	.word	0x0801b6a8
 800d570:	7ff00000 	.word	0x7ff00000
 800d574:	0801b68d 	.word	0x0801b68d
 800d578:	0801b684 	.word	0x0801b684
 800d57c:	0801b625 	.word	0x0801b625
 800d580:	3ff80000 	.word	0x3ff80000
 800d584:	0801b798 	.word	0x0801b798
 800d588:	0801b703 	.word	0x0801b703
 800d58c:	2501      	movs	r5, #1
 800d58e:	2300      	movs	r3, #0
 800d590:	9306      	str	r3, [sp, #24]
 800d592:	9508      	str	r5, [sp, #32]
 800d594:	f04f 33ff 	mov.w	r3, #4294967295
 800d598:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d59c:	2200      	movs	r2, #0
 800d59e:	2312      	movs	r3, #18
 800d5a0:	e7b0      	b.n	800d504 <_dtoa_r+0x26c>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	9308      	str	r3, [sp, #32]
 800d5a6:	e7f5      	b.n	800d594 <_dtoa_r+0x2fc>
 800d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d5ae:	e7b8      	b.n	800d522 <_dtoa_r+0x28a>
 800d5b0:	3101      	adds	r1, #1
 800d5b2:	6041      	str	r1, [r0, #4]
 800d5b4:	0052      	lsls	r2, r2, #1
 800d5b6:	e7b8      	b.n	800d52a <_dtoa_r+0x292>
 800d5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ba:	9a01      	ldr	r2, [sp, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	2b0e      	cmp	r3, #14
 800d5c2:	f200 809d 	bhi.w	800d700 <_dtoa_r+0x468>
 800d5c6:	2d00      	cmp	r5, #0
 800d5c8:	f000 809a 	beq.w	800d700 <_dtoa_r+0x468>
 800d5cc:	9b00      	ldr	r3, [sp, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dd32      	ble.n	800d638 <_dtoa_r+0x3a0>
 800d5d2:	4ab7      	ldr	r2, [pc, #732]	; (800d8b0 <_dtoa_r+0x618>)
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5e0:	9b00      	ldr	r3, [sp, #0]
 800d5e2:	05d8      	lsls	r0, r3, #23
 800d5e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5e8:	d516      	bpl.n	800d618 <_dtoa_r+0x380>
 800d5ea:	4bb2      	ldr	r3, [pc, #712]	; (800d8b4 <_dtoa_r+0x61c>)
 800d5ec:	ec51 0b19 	vmov	r0, r1, d9
 800d5f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5f4:	f7f3 f93a 	bl	800086c <__aeabi_ddiv>
 800d5f8:	f007 070f 	and.w	r7, r7, #15
 800d5fc:	4682      	mov	sl, r0
 800d5fe:	468b      	mov	fp, r1
 800d600:	2503      	movs	r5, #3
 800d602:	4eac      	ldr	r6, [pc, #688]	; (800d8b4 <_dtoa_r+0x61c>)
 800d604:	b957      	cbnz	r7, 800d61c <_dtoa_r+0x384>
 800d606:	4642      	mov	r2, r8
 800d608:	464b      	mov	r3, r9
 800d60a:	4650      	mov	r0, sl
 800d60c:	4659      	mov	r1, fp
 800d60e:	f7f3 f92d 	bl	800086c <__aeabi_ddiv>
 800d612:	4682      	mov	sl, r0
 800d614:	468b      	mov	fp, r1
 800d616:	e028      	b.n	800d66a <_dtoa_r+0x3d2>
 800d618:	2502      	movs	r5, #2
 800d61a:	e7f2      	b.n	800d602 <_dtoa_r+0x36a>
 800d61c:	07f9      	lsls	r1, r7, #31
 800d61e:	d508      	bpl.n	800d632 <_dtoa_r+0x39a>
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d628:	f7f2 fff6 	bl	8000618 <__aeabi_dmul>
 800d62c:	3501      	adds	r5, #1
 800d62e:	4680      	mov	r8, r0
 800d630:	4689      	mov	r9, r1
 800d632:	107f      	asrs	r7, r7, #1
 800d634:	3608      	adds	r6, #8
 800d636:	e7e5      	b.n	800d604 <_dtoa_r+0x36c>
 800d638:	f000 809b 	beq.w	800d772 <_dtoa_r+0x4da>
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	4f9d      	ldr	r7, [pc, #628]	; (800d8b4 <_dtoa_r+0x61c>)
 800d640:	425e      	negs	r6, r3
 800d642:	4b9b      	ldr	r3, [pc, #620]	; (800d8b0 <_dtoa_r+0x618>)
 800d644:	f006 020f 	and.w	r2, r6, #15
 800d648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	ec51 0b19 	vmov	r0, r1, d9
 800d654:	f7f2 ffe0 	bl	8000618 <__aeabi_dmul>
 800d658:	1136      	asrs	r6, r6, #4
 800d65a:	4682      	mov	sl, r0
 800d65c:	468b      	mov	fp, r1
 800d65e:	2300      	movs	r3, #0
 800d660:	2502      	movs	r5, #2
 800d662:	2e00      	cmp	r6, #0
 800d664:	d17a      	bne.n	800d75c <_dtoa_r+0x4c4>
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1d3      	bne.n	800d612 <_dtoa_r+0x37a>
 800d66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8082 	beq.w	800d776 <_dtoa_r+0x4de>
 800d672:	4b91      	ldr	r3, [pc, #580]	; (800d8b8 <_dtoa_r+0x620>)
 800d674:	2200      	movs	r2, #0
 800d676:	4650      	mov	r0, sl
 800d678:	4659      	mov	r1, fp
 800d67a:	f7f3 fa3f 	bl	8000afc <__aeabi_dcmplt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d079      	beq.n	800d776 <_dtoa_r+0x4de>
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d076      	beq.n	800d776 <_dtoa_r+0x4de>
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dd36      	ble.n	800d6fc <_dtoa_r+0x464>
 800d68e:	9b00      	ldr	r3, [sp, #0]
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	1e5f      	subs	r7, r3, #1
 800d696:	2200      	movs	r2, #0
 800d698:	4b88      	ldr	r3, [pc, #544]	; (800d8bc <_dtoa_r+0x624>)
 800d69a:	f7f2 ffbd 	bl	8000618 <__aeabi_dmul>
 800d69e:	9e02      	ldr	r6, [sp, #8]
 800d6a0:	4682      	mov	sl, r0
 800d6a2:	468b      	mov	fp, r1
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f7f2 ff4c 	bl	8000544 <__aeabi_i2d>
 800d6ac:	4652      	mov	r2, sl
 800d6ae:	465b      	mov	r3, fp
 800d6b0:	f7f2 ffb2 	bl	8000618 <__aeabi_dmul>
 800d6b4:	4b82      	ldr	r3, [pc, #520]	; (800d8c0 <_dtoa_r+0x628>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f7f2 fdf8 	bl	80002ac <__adddf3>
 800d6bc:	46d0      	mov	r8, sl
 800d6be:	46d9      	mov	r9, fp
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d158      	bne.n	800d77c <_dtoa_r+0x4e4>
 800d6ca:	4b7e      	ldr	r3, [pc, #504]	; (800d8c4 <_dtoa_r+0x62c>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	f7f2 fde9 	bl	80002a8 <__aeabi_dsub>
 800d6d6:	4652      	mov	r2, sl
 800d6d8:	465b      	mov	r3, fp
 800d6da:	4680      	mov	r8, r0
 800d6dc:	4689      	mov	r9, r1
 800d6de:	f7f3 fa2b 	bl	8000b38 <__aeabi_dcmpgt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f040 8295 	bne.w	800dc12 <_dtoa_r+0x97a>
 800d6e8:	4652      	mov	r2, sl
 800d6ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	f7f3 fa03 	bl	8000afc <__aeabi_dcmplt>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f040 8289 	bne.w	800dc0e <_dtoa_r+0x976>
 800d6fc:	ec5b ab19 	vmov	sl, fp, d9
 800d700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d702:	2b00      	cmp	r3, #0
 800d704:	f2c0 8148 	blt.w	800d998 <_dtoa_r+0x700>
 800d708:	9a00      	ldr	r2, [sp, #0]
 800d70a:	2a0e      	cmp	r2, #14
 800d70c:	f300 8144 	bgt.w	800d998 <_dtoa_r+0x700>
 800d710:	4b67      	ldr	r3, [pc, #412]	; (800d8b0 <_dtoa_r+0x618>)
 800d712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f280 80d5 	bge.w	800d8cc <_dtoa_r+0x634>
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f300 80d1 	bgt.w	800d8cc <_dtoa_r+0x634>
 800d72a:	f040 826f 	bne.w	800dc0c <_dtoa_r+0x974>
 800d72e:	4b65      	ldr	r3, [pc, #404]	; (800d8c4 <_dtoa_r+0x62c>)
 800d730:	2200      	movs	r2, #0
 800d732:	4640      	mov	r0, r8
 800d734:	4649      	mov	r1, r9
 800d736:	f7f2 ff6f 	bl	8000618 <__aeabi_dmul>
 800d73a:	4652      	mov	r2, sl
 800d73c:	465b      	mov	r3, fp
 800d73e:	f7f3 f9f1 	bl	8000b24 <__aeabi_dcmpge>
 800d742:	9e03      	ldr	r6, [sp, #12]
 800d744:	4637      	mov	r7, r6
 800d746:	2800      	cmp	r0, #0
 800d748:	f040 8245 	bne.w	800dbd6 <_dtoa_r+0x93e>
 800d74c:	9d01      	ldr	r5, [sp, #4]
 800d74e:	2331      	movs	r3, #49	; 0x31
 800d750:	f805 3b01 	strb.w	r3, [r5], #1
 800d754:	9b00      	ldr	r3, [sp, #0]
 800d756:	3301      	adds	r3, #1
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	e240      	b.n	800dbde <_dtoa_r+0x946>
 800d75c:	07f2      	lsls	r2, r6, #31
 800d75e:	d505      	bpl.n	800d76c <_dtoa_r+0x4d4>
 800d760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d764:	f7f2 ff58 	bl	8000618 <__aeabi_dmul>
 800d768:	3501      	adds	r5, #1
 800d76a:	2301      	movs	r3, #1
 800d76c:	1076      	asrs	r6, r6, #1
 800d76e:	3708      	adds	r7, #8
 800d770:	e777      	b.n	800d662 <_dtoa_r+0x3ca>
 800d772:	2502      	movs	r5, #2
 800d774:	e779      	b.n	800d66a <_dtoa_r+0x3d2>
 800d776:	9f00      	ldr	r7, [sp, #0]
 800d778:	9e03      	ldr	r6, [sp, #12]
 800d77a:	e794      	b.n	800d6a6 <_dtoa_r+0x40e>
 800d77c:	9901      	ldr	r1, [sp, #4]
 800d77e:	4b4c      	ldr	r3, [pc, #304]	; (800d8b0 <_dtoa_r+0x618>)
 800d780:	4431      	add	r1, r6
 800d782:	910d      	str	r1, [sp, #52]	; 0x34
 800d784:	9908      	ldr	r1, [sp, #32]
 800d786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d78a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d78e:	2900      	cmp	r1, #0
 800d790:	d043      	beq.n	800d81a <_dtoa_r+0x582>
 800d792:	494d      	ldr	r1, [pc, #308]	; (800d8c8 <_dtoa_r+0x630>)
 800d794:	2000      	movs	r0, #0
 800d796:	f7f3 f869 	bl	800086c <__aeabi_ddiv>
 800d79a:	4652      	mov	r2, sl
 800d79c:	465b      	mov	r3, fp
 800d79e:	f7f2 fd83 	bl	80002a8 <__aeabi_dsub>
 800d7a2:	9d01      	ldr	r5, [sp, #4]
 800d7a4:	4682      	mov	sl, r0
 800d7a6:	468b      	mov	fp, r1
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7f3 f9e4 	bl	8000b78 <__aeabi_d2iz>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	f7f2 fec7 	bl	8000544 <__aeabi_i2d>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	4649      	mov	r1, r9
 800d7be:	f7f2 fd73 	bl	80002a8 <__aeabi_dsub>
 800d7c2:	3630      	adds	r6, #48	; 0x30
 800d7c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	465b      	mov	r3, fp
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	f7f3 f994 	bl	8000afc <__aeabi_dcmplt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d163      	bne.n	800d8a0 <_dtoa_r+0x608>
 800d7d8:	4642      	mov	r2, r8
 800d7da:	464b      	mov	r3, r9
 800d7dc:	4936      	ldr	r1, [pc, #216]	; (800d8b8 <_dtoa_r+0x620>)
 800d7de:	2000      	movs	r0, #0
 800d7e0:	f7f2 fd62 	bl	80002a8 <__aeabi_dsub>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	f7f3 f988 	bl	8000afc <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f040 80b5 	bne.w	800d95c <_dtoa_r+0x6c4>
 800d7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	d081      	beq.n	800d6fc <_dtoa_r+0x464>
 800d7f8:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <_dtoa_r+0x624>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4650      	mov	r0, sl
 800d7fe:	4659      	mov	r1, fp
 800d800:	f7f2 ff0a 	bl	8000618 <__aeabi_dmul>
 800d804:	4b2d      	ldr	r3, [pc, #180]	; (800d8bc <_dtoa_r+0x624>)
 800d806:	4682      	mov	sl, r0
 800d808:	468b      	mov	fp, r1
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	2200      	movs	r2, #0
 800d810:	f7f2 ff02 	bl	8000618 <__aeabi_dmul>
 800d814:	4680      	mov	r8, r0
 800d816:	4689      	mov	r9, r1
 800d818:	e7c6      	b.n	800d7a8 <_dtoa_r+0x510>
 800d81a:	4650      	mov	r0, sl
 800d81c:	4659      	mov	r1, fp
 800d81e:	f7f2 fefb 	bl	8000618 <__aeabi_dmul>
 800d822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d824:	9d01      	ldr	r5, [sp, #4]
 800d826:	930f      	str	r3, [sp, #60]	; 0x3c
 800d828:	4682      	mov	sl, r0
 800d82a:	468b      	mov	fp, r1
 800d82c:	4649      	mov	r1, r9
 800d82e:	4640      	mov	r0, r8
 800d830:	f7f3 f9a2 	bl	8000b78 <__aeabi_d2iz>
 800d834:	4606      	mov	r6, r0
 800d836:	f7f2 fe85 	bl	8000544 <__aeabi_i2d>
 800d83a:	3630      	adds	r6, #48	; 0x30
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	f7f2 fd30 	bl	80002a8 <__aeabi_dsub>
 800d848:	f805 6b01 	strb.w	r6, [r5], #1
 800d84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d84e:	429d      	cmp	r5, r3
 800d850:	4680      	mov	r8, r0
 800d852:	4689      	mov	r9, r1
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	d124      	bne.n	800d8a4 <_dtoa_r+0x60c>
 800d85a:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <_dtoa_r+0x630>)
 800d85c:	4650      	mov	r0, sl
 800d85e:	4659      	mov	r1, fp
 800d860:	f7f2 fd24 	bl	80002ac <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4640      	mov	r0, r8
 800d86a:	4649      	mov	r1, r9
 800d86c:	f7f3 f964 	bl	8000b38 <__aeabi_dcmpgt>
 800d870:	2800      	cmp	r0, #0
 800d872:	d173      	bne.n	800d95c <_dtoa_r+0x6c4>
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	4913      	ldr	r1, [pc, #76]	; (800d8c8 <_dtoa_r+0x630>)
 800d87a:	2000      	movs	r0, #0
 800d87c:	f7f2 fd14 	bl	80002a8 <__aeabi_dsub>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	f7f3 f938 	bl	8000afc <__aeabi_dcmplt>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	f43f af35 	beq.w	800d6fc <_dtoa_r+0x464>
 800d892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d894:	1e6b      	subs	r3, r5, #1
 800d896:	930f      	str	r3, [sp, #60]	; 0x3c
 800d898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d89c:	2b30      	cmp	r3, #48	; 0x30
 800d89e:	d0f8      	beq.n	800d892 <_dtoa_r+0x5fa>
 800d8a0:	9700      	str	r7, [sp, #0]
 800d8a2:	e049      	b.n	800d938 <_dtoa_r+0x6a0>
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <_dtoa_r+0x624>)
 800d8a6:	f7f2 feb7 	bl	8000618 <__aeabi_dmul>
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	e7bd      	b.n	800d82c <_dtoa_r+0x594>
 800d8b0:	0801b798 	.word	0x0801b798
 800d8b4:	0801b770 	.word	0x0801b770
 800d8b8:	3ff00000 	.word	0x3ff00000
 800d8bc:	40240000 	.word	0x40240000
 800d8c0:	401c0000 	.word	0x401c0000
 800d8c4:	40140000 	.word	0x40140000
 800d8c8:	3fe00000 	.word	0x3fe00000
 800d8cc:	9d01      	ldr	r5, [sp, #4]
 800d8ce:	4656      	mov	r6, sl
 800d8d0:	465f      	mov	r7, fp
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 ffc7 	bl	800086c <__aeabi_ddiv>
 800d8de:	f7f3 f94b 	bl	8000b78 <__aeabi_d2iz>
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	f7f2 fe2e 	bl	8000544 <__aeabi_i2d>
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	f7f2 fe94 	bl	8000618 <__aeabi_dmul>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d8fc:	f7f2 fcd4 	bl	80002a8 <__aeabi_dsub>
 800d900:	f805 6b01 	strb.w	r6, [r5], #1
 800d904:	9e01      	ldr	r6, [sp, #4]
 800d906:	9f03      	ldr	r7, [sp, #12]
 800d908:	1bae      	subs	r6, r5, r6
 800d90a:	42b7      	cmp	r7, r6
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	d135      	bne.n	800d97e <_dtoa_r+0x6e6>
 800d912:	f7f2 fccb 	bl	80002ac <__adddf3>
 800d916:	4642      	mov	r2, r8
 800d918:	464b      	mov	r3, r9
 800d91a:	4606      	mov	r6, r0
 800d91c:	460f      	mov	r7, r1
 800d91e:	f7f3 f90b 	bl	8000b38 <__aeabi_dcmpgt>
 800d922:	b9d0      	cbnz	r0, 800d95a <_dtoa_r+0x6c2>
 800d924:	4642      	mov	r2, r8
 800d926:	464b      	mov	r3, r9
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f3 f8dc 	bl	8000ae8 <__aeabi_dcmpeq>
 800d930:	b110      	cbz	r0, 800d938 <_dtoa_r+0x6a0>
 800d932:	f01a 0f01 	tst.w	sl, #1
 800d936:	d110      	bne.n	800d95a <_dtoa_r+0x6c2>
 800d938:	4620      	mov	r0, r4
 800d93a:	ee18 1a10 	vmov	r1, s16
 800d93e:	f000 fc35 	bl	800e1ac <_Bfree>
 800d942:	2300      	movs	r3, #0
 800d944:	9800      	ldr	r0, [sp, #0]
 800d946:	702b      	strb	r3, [r5, #0]
 800d948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d94a:	3001      	adds	r0, #1
 800d94c:	6018      	str	r0, [r3, #0]
 800d94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d950:	2b00      	cmp	r3, #0
 800d952:	f43f acf1 	beq.w	800d338 <_dtoa_r+0xa0>
 800d956:	601d      	str	r5, [r3, #0]
 800d958:	e4ee      	b.n	800d338 <_dtoa_r+0xa0>
 800d95a:	9f00      	ldr	r7, [sp, #0]
 800d95c:	462b      	mov	r3, r5
 800d95e:	461d      	mov	r5, r3
 800d960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d964:	2a39      	cmp	r2, #57	; 0x39
 800d966:	d106      	bne.n	800d976 <_dtoa_r+0x6de>
 800d968:	9a01      	ldr	r2, [sp, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d1f7      	bne.n	800d95e <_dtoa_r+0x6c6>
 800d96e:	9901      	ldr	r1, [sp, #4]
 800d970:	2230      	movs	r2, #48	; 0x30
 800d972:	3701      	adds	r7, #1
 800d974:	700a      	strb	r2, [r1, #0]
 800d976:	781a      	ldrb	r2, [r3, #0]
 800d978:	3201      	adds	r2, #1
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e790      	b.n	800d8a0 <_dtoa_r+0x608>
 800d97e:	4ba6      	ldr	r3, [pc, #664]	; (800dc18 <_dtoa_r+0x980>)
 800d980:	2200      	movs	r2, #0
 800d982:	f7f2 fe49 	bl	8000618 <__aeabi_dmul>
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	f7f3 f8ab 	bl	8000ae8 <__aeabi_dcmpeq>
 800d992:	2800      	cmp	r0, #0
 800d994:	d09d      	beq.n	800d8d2 <_dtoa_r+0x63a>
 800d996:	e7cf      	b.n	800d938 <_dtoa_r+0x6a0>
 800d998:	9a08      	ldr	r2, [sp, #32]
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	f000 80d7 	beq.w	800db4e <_dtoa_r+0x8b6>
 800d9a0:	9a06      	ldr	r2, [sp, #24]
 800d9a2:	2a01      	cmp	r2, #1
 800d9a4:	f300 80ba 	bgt.w	800db1c <_dtoa_r+0x884>
 800d9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	f000 80b2 	beq.w	800db14 <_dtoa_r+0x87c>
 800d9b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9b4:	9e07      	ldr	r6, [sp, #28]
 800d9b6:	9d04      	ldr	r5, [sp, #16]
 800d9b8:	9a04      	ldr	r2, [sp, #16]
 800d9ba:	441a      	add	r2, r3
 800d9bc:	9204      	str	r2, [sp, #16]
 800d9be:	9a05      	ldr	r2, [sp, #20]
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	441a      	add	r2, r3
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	9205      	str	r2, [sp, #20]
 800d9c8:	f000 fca8 	bl	800e31c <__i2b>
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	dd0c      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d2:	9b05      	ldr	r3, [sp, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd09      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d8:	42ab      	cmp	r3, r5
 800d9da:	9a04      	ldr	r2, [sp, #16]
 800d9dc:	bfa8      	it	ge
 800d9de:	462b      	movge	r3, r5
 800d9e0:	1ad2      	subs	r2, r2, r3
 800d9e2:	9204      	str	r2, [sp, #16]
 800d9e4:	9a05      	ldr	r2, [sp, #20]
 800d9e6:	1aed      	subs	r5, r5, r3
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	b31b      	cbz	r3, 800da38 <_dtoa_r+0x7a0>
 800d9f0:	9b08      	ldr	r3, [sp, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80af 	beq.w	800db56 <_dtoa_r+0x8be>
 800d9f8:	2e00      	cmp	r6, #0
 800d9fa:	dd13      	ble.n	800da24 <_dtoa_r+0x78c>
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4632      	mov	r2, r6
 800da00:	4620      	mov	r0, r4
 800da02:	f000 fd4b 	bl	800e49c <__pow5mult>
 800da06:	ee18 2a10 	vmov	r2, s16
 800da0a:	4601      	mov	r1, r0
 800da0c:	4607      	mov	r7, r0
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fc9a 	bl	800e348 <__multiply>
 800da14:	ee18 1a10 	vmov	r1, s16
 800da18:	4680      	mov	r8, r0
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fbc6 	bl	800e1ac <_Bfree>
 800da20:	ee08 8a10 	vmov	s16, r8
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	1b9a      	subs	r2, r3, r6
 800da28:	d006      	beq.n	800da38 <_dtoa_r+0x7a0>
 800da2a:	ee18 1a10 	vmov	r1, s16
 800da2e:	4620      	mov	r0, r4
 800da30:	f000 fd34 	bl	800e49c <__pow5mult>
 800da34:	ee08 0a10 	vmov	s16, r0
 800da38:	2101      	movs	r1, #1
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 fc6e 	bl	800e31c <__i2b>
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	4606      	mov	r6, r0
 800da46:	f340 8088 	ble.w	800db5a <_dtoa_r+0x8c2>
 800da4a:	461a      	mov	r2, r3
 800da4c:	4601      	mov	r1, r0
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 fd24 	bl	800e49c <__pow5mult>
 800da54:	9b06      	ldr	r3, [sp, #24]
 800da56:	2b01      	cmp	r3, #1
 800da58:	4606      	mov	r6, r0
 800da5a:	f340 8081 	ble.w	800db60 <_dtoa_r+0x8c8>
 800da5e:	f04f 0800 	mov.w	r8, #0
 800da62:	6933      	ldr	r3, [r6, #16]
 800da64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da68:	6918      	ldr	r0, [r3, #16]
 800da6a:	f000 fc07 	bl	800e27c <__hi0bits>
 800da6e:	f1c0 0020 	rsb	r0, r0, #32
 800da72:	9b05      	ldr	r3, [sp, #20]
 800da74:	4418      	add	r0, r3
 800da76:	f010 001f 	ands.w	r0, r0, #31
 800da7a:	f000 8092 	beq.w	800dba2 <_dtoa_r+0x90a>
 800da7e:	f1c0 0320 	rsb	r3, r0, #32
 800da82:	2b04      	cmp	r3, #4
 800da84:	f340 808a 	ble.w	800db9c <_dtoa_r+0x904>
 800da88:	f1c0 001c 	rsb	r0, r0, #28
 800da8c:	9b04      	ldr	r3, [sp, #16]
 800da8e:	4403      	add	r3, r0
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	9b05      	ldr	r3, [sp, #20]
 800da94:	4403      	add	r3, r0
 800da96:	4405      	add	r5, r0
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd07      	ble.n	800dab0 <_dtoa_r+0x818>
 800daa0:	ee18 1a10 	vmov	r1, s16
 800daa4:	461a      	mov	r2, r3
 800daa6:	4620      	mov	r0, r4
 800daa8:	f000 fd52 	bl	800e550 <__lshift>
 800daac:	ee08 0a10 	vmov	s16, r0
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dd05      	ble.n	800dac2 <_dtoa_r+0x82a>
 800dab6:	4631      	mov	r1, r6
 800dab8:	461a      	mov	r2, r3
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fd48 	bl	800e550 <__lshift>
 800dac0:	4606      	mov	r6, r0
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d06e      	beq.n	800dba6 <_dtoa_r+0x90e>
 800dac8:	ee18 0a10 	vmov	r0, s16
 800dacc:	4631      	mov	r1, r6
 800dace:	f000 fdaf 	bl	800e630 <__mcmp>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	da67      	bge.n	800dba6 <_dtoa_r+0x90e>
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	3b01      	subs	r3, #1
 800dada:	ee18 1a10 	vmov	r1, s16
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	220a      	movs	r2, #10
 800dae2:	2300      	movs	r3, #0
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 fb83 	bl	800e1f0 <__multadd>
 800daea:	9b08      	ldr	r3, [sp, #32]
 800daec:	ee08 0a10 	vmov	s16, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 81b1 	beq.w	800de58 <_dtoa_r+0xbc0>
 800daf6:	2300      	movs	r3, #0
 800daf8:	4639      	mov	r1, r7
 800dafa:	220a      	movs	r2, #10
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fb77 	bl	800e1f0 <__multadd>
 800db02:	9b02      	ldr	r3, [sp, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	4607      	mov	r7, r0
 800db08:	f300 808e 	bgt.w	800dc28 <_dtoa_r+0x990>
 800db0c:	9b06      	ldr	r3, [sp, #24]
 800db0e:	2b02      	cmp	r3, #2
 800db10:	dc51      	bgt.n	800dbb6 <_dtoa_r+0x91e>
 800db12:	e089      	b.n	800dc28 <_dtoa_r+0x990>
 800db14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db1a:	e74b      	b.n	800d9b4 <_dtoa_r+0x71c>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1e5e      	subs	r6, r3, #1
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	42b3      	cmp	r3, r6
 800db24:	bfbf      	itttt	lt
 800db26:	9b07      	ldrlt	r3, [sp, #28]
 800db28:	9607      	strlt	r6, [sp, #28]
 800db2a:	1af2      	sublt	r2, r6, r3
 800db2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db2e:	bfb6      	itet	lt
 800db30:	189b      	addlt	r3, r3, r2
 800db32:	1b9e      	subge	r6, r3, r6
 800db34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db36:	9b03      	ldr	r3, [sp, #12]
 800db38:	bfb8      	it	lt
 800db3a:	2600      	movlt	r6, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	bfb7      	itett	lt
 800db40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db48:	1a9d      	sublt	r5, r3, r2
 800db4a:	2300      	movlt	r3, #0
 800db4c:	e734      	b.n	800d9b8 <_dtoa_r+0x720>
 800db4e:	9e07      	ldr	r6, [sp, #28]
 800db50:	9d04      	ldr	r5, [sp, #16]
 800db52:	9f08      	ldr	r7, [sp, #32]
 800db54:	e73b      	b.n	800d9ce <_dtoa_r+0x736>
 800db56:	9a07      	ldr	r2, [sp, #28]
 800db58:	e767      	b.n	800da2a <_dtoa_r+0x792>
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	dc18      	bgt.n	800db92 <_dtoa_r+0x8fa>
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d115      	bne.n	800db92 <_dtoa_r+0x8fa>
 800db66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db6a:	b993      	cbnz	r3, 800db92 <_dtoa_r+0x8fa>
 800db6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db70:	0d1b      	lsrs	r3, r3, #20
 800db72:	051b      	lsls	r3, r3, #20
 800db74:	b183      	cbz	r3, 800db98 <_dtoa_r+0x900>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	3301      	adds	r3, #1
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	f04f 0801 	mov.w	r8, #1
 800db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f47f af6a 	bne.w	800da62 <_dtoa_r+0x7ca>
 800db8e:	2001      	movs	r0, #1
 800db90:	e76f      	b.n	800da72 <_dtoa_r+0x7da>
 800db92:	f04f 0800 	mov.w	r8, #0
 800db96:	e7f6      	b.n	800db86 <_dtoa_r+0x8ee>
 800db98:	4698      	mov	r8, r3
 800db9a:	e7f4      	b.n	800db86 <_dtoa_r+0x8ee>
 800db9c:	f43f af7d 	beq.w	800da9a <_dtoa_r+0x802>
 800dba0:	4618      	mov	r0, r3
 800dba2:	301c      	adds	r0, #28
 800dba4:	e772      	b.n	800da8c <_dtoa_r+0x7f4>
 800dba6:	9b03      	ldr	r3, [sp, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dc37      	bgt.n	800dc1c <_dtoa_r+0x984>
 800dbac:	9b06      	ldr	r3, [sp, #24]
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	dd34      	ble.n	800dc1c <_dtoa_r+0x984>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	b96b      	cbnz	r3, 800dbd6 <_dtoa_r+0x93e>
 800dbba:	4631      	mov	r1, r6
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fb16 	bl	800e1f0 <__multadd>
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	ee18 0a10 	vmov	r0, s16
 800dbcc:	f000 fd30 	bl	800e630 <__mcmp>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	f73f adbb 	bgt.w	800d74c <_dtoa_r+0x4b4>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd8:	9d01      	ldr	r5, [sp, #4]
 800dbda:	43db      	mvns	r3, r3
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fae1 	bl	800e1ac <_Bfree>
 800dbea:	2f00      	cmp	r7, #0
 800dbec:	f43f aea4 	beq.w	800d938 <_dtoa_r+0x6a0>
 800dbf0:	f1b8 0f00 	cmp.w	r8, #0
 800dbf4:	d005      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbf6:	45b8      	cmp	r8, r7
 800dbf8:	d003      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbfa:	4641      	mov	r1, r8
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 fad5 	bl	800e1ac <_Bfree>
 800dc02:	4639      	mov	r1, r7
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fad1 	bl	800e1ac <_Bfree>
 800dc0a:	e695      	b.n	800d938 <_dtoa_r+0x6a0>
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	4637      	mov	r7, r6
 800dc10:	e7e1      	b.n	800dbd6 <_dtoa_r+0x93e>
 800dc12:	9700      	str	r7, [sp, #0]
 800dc14:	4637      	mov	r7, r6
 800dc16:	e599      	b.n	800d74c <_dtoa_r+0x4b4>
 800dc18:	40240000 	.word	0x40240000
 800dc1c:	9b08      	ldr	r3, [sp, #32]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f000 80ca 	beq.w	800ddb8 <_dtoa_r+0xb20>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	dd05      	ble.n	800dc38 <_dtoa_r+0x9a0>
 800dc2c:	4639      	mov	r1, r7
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 fc8d 	bl	800e550 <__lshift>
 800dc36:	4607      	mov	r7, r0
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	d05b      	beq.n	800dcf6 <_dtoa_r+0xa5e>
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 fa73 	bl	800e12c <_Balloc>
 800dc46:	4605      	mov	r5, r0
 800dc48:	b928      	cbnz	r0, 800dc56 <_dtoa_r+0x9be>
 800dc4a:	4b87      	ldr	r3, [pc, #540]	; (800de68 <_dtoa_r+0xbd0>)
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc52:	f7ff bb3b 	b.w	800d2cc <_dtoa_r+0x34>
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	3202      	adds	r2, #2
 800dc5a:	0092      	lsls	r2, r2, #2
 800dc5c:	f107 010c 	add.w	r1, r7, #12
 800dc60:	300c      	adds	r0, #12
 800dc62:	f7fe fb4b 	bl	800c2fc <memcpy>
 800dc66:	2201      	movs	r2, #1
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 fc70 	bl	800e550 <__lshift>
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	f103 0901 	add.w	r9, r3, #1
 800dc76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	f00a 0301 	and.w	r3, sl, #1
 800dc82:	46b8      	mov	r8, r7
 800dc84:	9304      	str	r3, [sp, #16]
 800dc86:	4607      	mov	r7, r0
 800dc88:	4631      	mov	r1, r6
 800dc8a:	ee18 0a10 	vmov	r0, s16
 800dc8e:	f7ff fa77 	bl	800d180 <quorem>
 800dc92:	4641      	mov	r1, r8
 800dc94:	9002      	str	r0, [sp, #8]
 800dc96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc9a:	ee18 0a10 	vmov	r0, s16
 800dc9e:	f000 fcc7 	bl	800e630 <__mcmp>
 800dca2:	463a      	mov	r2, r7
 800dca4:	9003      	str	r0, [sp, #12]
 800dca6:	4631      	mov	r1, r6
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fcdd 	bl	800e668 <__mdiff>
 800dcae:	68c2      	ldr	r2, [r0, #12]
 800dcb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	bb02      	cbnz	r2, 800dcfa <_dtoa_r+0xa62>
 800dcb8:	4601      	mov	r1, r0
 800dcba:	ee18 0a10 	vmov	r0, s16
 800dcbe:	f000 fcb7 	bl	800e630 <__mcmp>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	f000 fa6f 	bl	800e1ac <_Bfree>
 800dcce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dcd2:	ea43 0102 	orr.w	r1, r3, r2
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	464d      	mov	r5, r9
 800dcdc:	d10f      	bne.n	800dcfe <_dtoa_r+0xa66>
 800dcde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dce2:	d02a      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	dd02      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dcea:	9b02      	ldr	r3, [sp, #8]
 800dcec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dcf0:	f88b a000 	strb.w	sl, [fp]
 800dcf4:	e775      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	e7ba      	b.n	800dc70 <_dtoa_r+0x9d8>
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	e7e2      	b.n	800dcc4 <_dtoa_r+0xa2c>
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	db04      	blt.n	800dd0e <_dtoa_r+0xa76>
 800dd04:	9906      	ldr	r1, [sp, #24]
 800dd06:	430b      	orrs	r3, r1
 800dd08:	9904      	ldr	r1, [sp, #16]
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	d122      	bne.n	800dd54 <_dtoa_r+0xabc>
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	ddee      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dd12:	ee18 1a10 	vmov	r1, s16
 800dd16:	2201      	movs	r2, #1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fc19 	bl	800e550 <__lshift>
 800dd1e:	4631      	mov	r1, r6
 800dd20:	ee08 0a10 	vmov	s16, r0
 800dd24:	f000 fc84 	bl	800e630 <__mcmp>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	dc03      	bgt.n	800dd34 <_dtoa_r+0xa9c>
 800dd2c:	d1e0      	bne.n	800dcf0 <_dtoa_r+0xa58>
 800dd2e:	f01a 0f01 	tst.w	sl, #1
 800dd32:	d0dd      	beq.n	800dcf0 <_dtoa_r+0xa58>
 800dd34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd38:	d1d7      	bne.n	800dcea <_dtoa_r+0xa52>
 800dd3a:	2339      	movs	r3, #57	; 0x39
 800dd3c:	f88b 3000 	strb.w	r3, [fp]
 800dd40:	462b      	mov	r3, r5
 800dd42:	461d      	mov	r5, r3
 800dd44:	3b01      	subs	r3, #1
 800dd46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd4a:	2a39      	cmp	r2, #57	; 0x39
 800dd4c:	d071      	beq.n	800de32 <_dtoa_r+0xb9a>
 800dd4e:	3201      	adds	r2, #1
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e746      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	dd07      	ble.n	800dd68 <_dtoa_r+0xad0>
 800dd58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd5c:	d0ed      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dd5e:	f10a 0301 	add.w	r3, sl, #1
 800dd62:	f88b 3000 	strb.w	r3, [fp]
 800dd66:	e73c      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd68:	9b05      	ldr	r3, [sp, #20]
 800dd6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd6e:	4599      	cmp	r9, r3
 800dd70:	d047      	beq.n	800de02 <_dtoa_r+0xb6a>
 800dd72:	ee18 1a10 	vmov	r1, s16
 800dd76:	2300      	movs	r3, #0
 800dd78:	220a      	movs	r2, #10
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 fa38 	bl	800e1f0 <__multadd>
 800dd80:	45b8      	cmp	r8, r7
 800dd82:	ee08 0a10 	vmov	s16, r0
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	f04f 020a 	mov.w	r2, #10
 800dd8e:	4641      	mov	r1, r8
 800dd90:	4620      	mov	r0, r4
 800dd92:	d106      	bne.n	800dda2 <_dtoa_r+0xb0a>
 800dd94:	f000 fa2c 	bl	800e1f0 <__multadd>
 800dd98:	4680      	mov	r8, r0
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	f109 0901 	add.w	r9, r9, #1
 800dda0:	e772      	b.n	800dc88 <_dtoa_r+0x9f0>
 800dda2:	f000 fa25 	bl	800e1f0 <__multadd>
 800dda6:	4639      	mov	r1, r7
 800dda8:	4680      	mov	r8, r0
 800ddaa:	2300      	movs	r3, #0
 800ddac:	220a      	movs	r2, #10
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fa1e 	bl	800e1f0 <__multadd>
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	e7f1      	b.n	800dd9c <_dtoa_r+0xb04>
 800ddb8:	9b03      	ldr	r3, [sp, #12]
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	9d01      	ldr	r5, [sp, #4]
 800ddbe:	ee18 0a10 	vmov	r0, s16
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	f7ff f9dc 	bl	800d180 <quorem>
 800ddc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddcc:	9b01      	ldr	r3, [sp, #4]
 800ddce:	f805 ab01 	strb.w	sl, [r5], #1
 800ddd2:	1aea      	subs	r2, r5, r3
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	dd09      	ble.n	800ddee <_dtoa_r+0xb56>
 800ddda:	ee18 1a10 	vmov	r1, s16
 800ddde:	2300      	movs	r3, #0
 800dde0:	220a      	movs	r2, #10
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fa04 	bl	800e1f0 <__multadd>
 800dde8:	ee08 0a10 	vmov	s16, r0
 800ddec:	e7e7      	b.n	800ddbe <_dtoa_r+0xb26>
 800ddee:	9b02      	ldr	r3, [sp, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfc8      	it	gt
 800ddf4:	461d      	movgt	r5, r3
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	bfd8      	it	le
 800ddfa:	2501      	movle	r5, #1
 800ddfc:	441d      	add	r5, r3
 800ddfe:	f04f 0800 	mov.w	r8, #0
 800de02:	ee18 1a10 	vmov	r1, s16
 800de06:	2201      	movs	r2, #1
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 fba1 	bl	800e550 <__lshift>
 800de0e:	4631      	mov	r1, r6
 800de10:	ee08 0a10 	vmov	s16, r0
 800de14:	f000 fc0c 	bl	800e630 <__mcmp>
 800de18:	2800      	cmp	r0, #0
 800de1a:	dc91      	bgt.n	800dd40 <_dtoa_r+0xaa8>
 800de1c:	d102      	bne.n	800de24 <_dtoa_r+0xb8c>
 800de1e:	f01a 0f01 	tst.w	sl, #1
 800de22:	d18d      	bne.n	800dd40 <_dtoa_r+0xaa8>
 800de24:	462b      	mov	r3, r5
 800de26:	461d      	mov	r5, r3
 800de28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2c:	2a30      	cmp	r2, #48	; 0x30
 800de2e:	d0fa      	beq.n	800de26 <_dtoa_r+0xb8e>
 800de30:	e6d7      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de32:	9a01      	ldr	r2, [sp, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d184      	bne.n	800dd42 <_dtoa_r+0xaaa>
 800de38:	9b00      	ldr	r3, [sp, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	2331      	movs	r3, #49	; 0x31
 800de40:	7013      	strb	r3, [r2, #0]
 800de42:	e6ce      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <_dtoa_r+0xbd4>)
 800de46:	f7ff ba95 	b.w	800d374 <_dtoa_r+0xdc>
 800de4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f aa6e 	bne.w	800d32e <_dtoa_r+0x96>
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <_dtoa_r+0xbd8>)
 800de54:	f7ff ba8e 	b.w	800d374 <_dtoa_r+0xdc>
 800de58:	9b02      	ldr	r3, [sp, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dcae      	bgt.n	800ddbc <_dtoa_r+0xb24>
 800de5e:	9b06      	ldr	r3, [sp, #24]
 800de60:	2b02      	cmp	r3, #2
 800de62:	f73f aea8 	bgt.w	800dbb6 <_dtoa_r+0x91e>
 800de66:	e7a9      	b.n	800ddbc <_dtoa_r+0xb24>
 800de68:	0801b703 	.word	0x0801b703
 800de6c:	0801b624 	.word	0x0801b624
 800de70:	0801b684 	.word	0x0801b684

0800de74 <__sflush_r>:
 800de74:	898a      	ldrh	r2, [r1, #12]
 800de76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7a:	4605      	mov	r5, r0
 800de7c:	0710      	lsls	r0, r2, #28
 800de7e:	460c      	mov	r4, r1
 800de80:	d458      	bmi.n	800df34 <__sflush_r+0xc0>
 800de82:	684b      	ldr	r3, [r1, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	dc05      	bgt.n	800de94 <__sflush_r+0x20>
 800de88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dc02      	bgt.n	800de94 <__sflush_r+0x20>
 800de8e:	2000      	movs	r0, #0
 800de90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de96:	2e00      	cmp	r6, #0
 800de98:	d0f9      	beq.n	800de8e <__sflush_r+0x1a>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dea0:	682f      	ldr	r7, [r5, #0]
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	d032      	beq.n	800df0c <__sflush_r+0x98>
 800dea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	075a      	lsls	r2, r3, #29
 800deac:	d505      	bpl.n	800deba <__sflush_r+0x46>
 800deae:	6863      	ldr	r3, [r4, #4]
 800deb0:	1ac0      	subs	r0, r0, r3
 800deb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb4:	b10b      	cbz	r3, 800deba <__sflush_r+0x46>
 800deb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deb8:	1ac0      	subs	r0, r0, r3
 800deba:	2300      	movs	r3, #0
 800debc:	4602      	mov	r2, r0
 800debe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dec0:	6a21      	ldr	r1, [r4, #32]
 800dec2:	4628      	mov	r0, r5
 800dec4:	47b0      	blx	r6
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	d106      	bne.n	800deda <__sflush_r+0x66>
 800decc:	6829      	ldr	r1, [r5, #0]
 800dece:	291d      	cmp	r1, #29
 800ded0:	d82c      	bhi.n	800df2c <__sflush_r+0xb8>
 800ded2:	4a2a      	ldr	r2, [pc, #168]	; (800df7c <__sflush_r+0x108>)
 800ded4:	40ca      	lsrs	r2, r1
 800ded6:	07d6      	lsls	r6, r2, #31
 800ded8:	d528      	bpl.n	800df2c <__sflush_r+0xb8>
 800deda:	2200      	movs	r2, #0
 800dedc:	6062      	str	r2, [r4, #4]
 800dede:	04d9      	lsls	r1, r3, #19
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	6022      	str	r2, [r4, #0]
 800dee4:	d504      	bpl.n	800def0 <__sflush_r+0x7c>
 800dee6:	1c42      	adds	r2, r0, #1
 800dee8:	d101      	bne.n	800deee <__sflush_r+0x7a>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	b903      	cbnz	r3, 800def0 <__sflush_r+0x7c>
 800deee:	6560      	str	r0, [r4, #84]	; 0x54
 800def0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800def2:	602f      	str	r7, [r5, #0]
 800def4:	2900      	cmp	r1, #0
 800def6:	d0ca      	beq.n	800de8e <__sflush_r+0x1a>
 800def8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800defc:	4299      	cmp	r1, r3
 800defe:	d002      	beq.n	800df06 <__sflush_r+0x92>
 800df00:	4628      	mov	r0, r5
 800df02:	f7fe fa11 	bl	800c328 <_free_r>
 800df06:	2000      	movs	r0, #0
 800df08:	6360      	str	r0, [r4, #52]	; 0x34
 800df0a:	e7c1      	b.n	800de90 <__sflush_r+0x1c>
 800df0c:	6a21      	ldr	r1, [r4, #32]
 800df0e:	2301      	movs	r3, #1
 800df10:	4628      	mov	r0, r5
 800df12:	47b0      	blx	r6
 800df14:	1c41      	adds	r1, r0, #1
 800df16:	d1c7      	bne.n	800dea8 <__sflush_r+0x34>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c4      	beq.n	800dea8 <__sflush_r+0x34>
 800df1e:	2b1d      	cmp	r3, #29
 800df20:	d001      	beq.n	800df26 <__sflush_r+0xb2>
 800df22:	2b16      	cmp	r3, #22
 800df24:	d101      	bne.n	800df2a <__sflush_r+0xb6>
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	e7b1      	b.n	800de8e <__sflush_r+0x1a>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	e7ad      	b.n	800de90 <__sflush_r+0x1c>
 800df34:	690f      	ldr	r7, [r1, #16]
 800df36:	2f00      	cmp	r7, #0
 800df38:	d0a9      	beq.n	800de8e <__sflush_r+0x1a>
 800df3a:	0793      	lsls	r3, r2, #30
 800df3c:	680e      	ldr	r6, [r1, #0]
 800df3e:	bf08      	it	eq
 800df40:	694b      	ldreq	r3, [r1, #20]
 800df42:	600f      	str	r7, [r1, #0]
 800df44:	bf18      	it	ne
 800df46:	2300      	movne	r3, #0
 800df48:	eba6 0807 	sub.w	r8, r6, r7
 800df4c:	608b      	str	r3, [r1, #8]
 800df4e:	f1b8 0f00 	cmp.w	r8, #0
 800df52:	dd9c      	ble.n	800de8e <__sflush_r+0x1a>
 800df54:	6a21      	ldr	r1, [r4, #32]
 800df56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df58:	4643      	mov	r3, r8
 800df5a:	463a      	mov	r2, r7
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b0      	blx	r6
 800df60:	2800      	cmp	r0, #0
 800df62:	dc06      	bgt.n	800df72 <__sflush_r+0xfe>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df6a:	81a3      	strh	r3, [r4, #12]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e78e      	b.n	800de90 <__sflush_r+0x1c>
 800df72:	4407      	add	r7, r0
 800df74:	eba8 0800 	sub.w	r8, r8, r0
 800df78:	e7e9      	b.n	800df4e <__sflush_r+0xda>
 800df7a:	bf00      	nop
 800df7c:	20400001 	.word	0x20400001

0800df80 <_fflush_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	690b      	ldr	r3, [r1, #16]
 800df84:	4605      	mov	r5, r0
 800df86:	460c      	mov	r4, r1
 800df88:	b913      	cbnz	r3, 800df90 <_fflush_r+0x10>
 800df8a:	2500      	movs	r5, #0
 800df8c:	4628      	mov	r0, r5
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	b118      	cbz	r0, 800df9a <_fflush_r+0x1a>
 800df92:	6983      	ldr	r3, [r0, #24]
 800df94:	b90b      	cbnz	r3, 800df9a <_fflush_r+0x1a>
 800df96:	f7fe f8e3 	bl	800c160 <__sinit>
 800df9a:	4b14      	ldr	r3, [pc, #80]	; (800dfec <_fflush_r+0x6c>)
 800df9c:	429c      	cmp	r4, r3
 800df9e:	d11b      	bne.n	800dfd8 <_fflush_r+0x58>
 800dfa0:	686c      	ldr	r4, [r5, #4]
 800dfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0ef      	beq.n	800df8a <_fflush_r+0xa>
 800dfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfac:	07d0      	lsls	r0, r2, #31
 800dfae:	d404      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb0:	0599      	lsls	r1, r3, #22
 800dfb2:	d402      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfb6:	f7fe f996 	bl	800c2e6 <__retarget_lock_acquire_recursive>
 800dfba:	4628      	mov	r0, r5
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f7ff ff59 	bl	800de74 <__sflush_r>
 800dfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfc4:	07da      	lsls	r2, r3, #31
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	d4e0      	bmi.n	800df8c <_fflush_r+0xc>
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	059b      	lsls	r3, r3, #22
 800dfce:	d4dd      	bmi.n	800df8c <_fflush_r+0xc>
 800dfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfd2:	f7fe f989 	bl	800c2e8 <__retarget_lock_release_recursive>
 800dfd6:	e7d9      	b.n	800df8c <_fflush_r+0xc>
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <_fflush_r+0x70>)
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	d101      	bne.n	800dfe2 <_fflush_r+0x62>
 800dfde:	68ac      	ldr	r4, [r5, #8]
 800dfe0:	e7df      	b.n	800dfa2 <_fflush_r+0x22>
 800dfe2:	4b04      	ldr	r3, [pc, #16]	; (800dff4 <_fflush_r+0x74>)
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	bf08      	it	eq
 800dfe8:	68ec      	ldreq	r4, [r5, #12]
 800dfea:	e7da      	b.n	800dfa2 <_fflush_r+0x22>
 800dfec:	0801b5d0 	.word	0x0801b5d0
 800dff0:	0801b5f0 	.word	0x0801b5f0
 800dff4:	0801b5b0 	.word	0x0801b5b0

0800dff8 <fiprintf>:
 800dff8:	b40e      	push	{r1, r2, r3}
 800dffa:	b503      	push	{r0, r1, lr}
 800dffc:	4601      	mov	r1, r0
 800dffe:	ab03      	add	r3, sp, #12
 800e000:	4805      	ldr	r0, [pc, #20]	; (800e018 <fiprintf+0x20>)
 800e002:	f853 2b04 	ldr.w	r2, [r3], #4
 800e006:	6800      	ldr	r0, [r0, #0]
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	f000 fddd 	bl	800ebc8 <_vfiprintf_r>
 800e00e:	b002      	add	sp, #8
 800e010:	f85d eb04 	ldr.w	lr, [sp], #4
 800e014:	b003      	add	sp, #12
 800e016:	4770      	bx	lr
 800e018:	2000098c 	.word	0x2000098c

0800e01c <_localeconv_r>:
 800e01c:	4800      	ldr	r0, [pc, #0]	; (800e020 <_localeconv_r+0x4>)
 800e01e:	4770      	bx	lr
 800e020:	20000ae0 	.word	0x20000ae0

0800e024 <_lseek_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4d07      	ldr	r5, [pc, #28]	; (800e044 <_lseek_r+0x20>)
 800e028:	4604      	mov	r4, r0
 800e02a:	4608      	mov	r0, r1
 800e02c:	4611      	mov	r1, r2
 800e02e:	2200      	movs	r2, #0
 800e030:	602a      	str	r2, [r5, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	f7fb f961 	bl	80092fa <_lseek>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_lseek_r+0x1e>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_lseek_r+0x1e>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	20004138 	.word	0x20004138

0800e048 <__swhatbuf_r>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	460e      	mov	r6, r1
 800e04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e050:	2900      	cmp	r1, #0
 800e052:	b096      	sub	sp, #88	; 0x58
 800e054:	4614      	mov	r4, r2
 800e056:	461d      	mov	r5, r3
 800e058:	da08      	bge.n	800e06c <__swhatbuf_r+0x24>
 800e05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	602a      	str	r2, [r5, #0]
 800e062:	061a      	lsls	r2, r3, #24
 800e064:	d410      	bmi.n	800e088 <__swhatbuf_r+0x40>
 800e066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e06a:	e00e      	b.n	800e08a <__swhatbuf_r+0x42>
 800e06c:	466a      	mov	r2, sp
 800e06e:	f000 fef5 	bl	800ee5c <_fstat_r>
 800e072:	2800      	cmp	r0, #0
 800e074:	dbf1      	blt.n	800e05a <__swhatbuf_r+0x12>
 800e076:	9a01      	ldr	r2, [sp, #4]
 800e078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e080:	425a      	negs	r2, r3
 800e082:	415a      	adcs	r2, r3
 800e084:	602a      	str	r2, [r5, #0]
 800e086:	e7ee      	b.n	800e066 <__swhatbuf_r+0x1e>
 800e088:	2340      	movs	r3, #64	; 0x40
 800e08a:	2000      	movs	r0, #0
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	b016      	add	sp, #88	; 0x58
 800e090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e094 <__smakebuf_r>:
 800e094:	898b      	ldrh	r3, [r1, #12]
 800e096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e098:	079d      	lsls	r5, r3, #30
 800e09a:	4606      	mov	r6, r0
 800e09c:	460c      	mov	r4, r1
 800e09e:	d507      	bpl.n	800e0b0 <__smakebuf_r+0x1c>
 800e0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	6123      	str	r3, [r4, #16]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	6163      	str	r3, [r4, #20]
 800e0ac:	b002      	add	sp, #8
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	ab01      	add	r3, sp, #4
 800e0b2:	466a      	mov	r2, sp
 800e0b4:	f7ff ffc8 	bl	800e048 <__swhatbuf_r>
 800e0b8:	9900      	ldr	r1, [sp, #0]
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	4630      	mov	r0, r6
 800e0be:	f7fe f99f 	bl	800c400 <_malloc_r>
 800e0c2:	b948      	cbnz	r0, 800e0d8 <__smakebuf_r+0x44>
 800e0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0c8:	059a      	lsls	r2, r3, #22
 800e0ca:	d4ef      	bmi.n	800e0ac <__smakebuf_r+0x18>
 800e0cc:	f023 0303 	bic.w	r3, r3, #3
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	81a3      	strh	r3, [r4, #12]
 800e0d6:	e7e3      	b.n	800e0a0 <__smakebuf_r+0xc>
 800e0d8:	4b0d      	ldr	r3, [pc, #52]	; (800e110 <__smakebuf_r+0x7c>)
 800e0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	6020      	str	r0, [r4, #0]
 800e0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e4:	81a3      	strh	r3, [r4, #12]
 800e0e6:	9b00      	ldr	r3, [sp, #0]
 800e0e8:	6163      	str	r3, [r4, #20]
 800e0ea:	9b01      	ldr	r3, [sp, #4]
 800e0ec:	6120      	str	r0, [r4, #16]
 800e0ee:	b15b      	cbz	r3, 800e108 <__smakebuf_r+0x74>
 800e0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	f000 fec3 	bl	800ee80 <_isatty_r>
 800e0fa:	b128      	cbz	r0, 800e108 <__smakebuf_r+0x74>
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	f023 0303 	bic.w	r3, r3, #3
 800e102:	f043 0301 	orr.w	r3, r3, #1
 800e106:	81a3      	strh	r3, [r4, #12]
 800e108:	89a0      	ldrh	r0, [r4, #12]
 800e10a:	4305      	orrs	r5, r0
 800e10c:	81a5      	strh	r5, [r4, #12]
 800e10e:	e7cd      	b.n	800e0ac <__smakebuf_r+0x18>
 800e110:	0800c0f9 	.word	0x0800c0f9

0800e114 <__malloc_lock>:
 800e114:	4801      	ldr	r0, [pc, #4]	; (800e11c <__malloc_lock+0x8>)
 800e116:	f7fe b8e6 	b.w	800c2e6 <__retarget_lock_acquire_recursive>
 800e11a:	bf00      	nop
 800e11c:	2000412c 	.word	0x2000412c

0800e120 <__malloc_unlock>:
 800e120:	4801      	ldr	r0, [pc, #4]	; (800e128 <__malloc_unlock+0x8>)
 800e122:	f7fe b8e1 	b.w	800c2e8 <__retarget_lock_release_recursive>
 800e126:	bf00      	nop
 800e128:	2000412c 	.word	0x2000412c

0800e12c <_Balloc>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e130:	4604      	mov	r4, r0
 800e132:	460d      	mov	r5, r1
 800e134:	b976      	cbnz	r6, 800e154 <_Balloc+0x28>
 800e136:	2010      	movs	r0, #16
 800e138:	f7fe f8d8 	bl	800c2ec <malloc>
 800e13c:	4602      	mov	r2, r0
 800e13e:	6260      	str	r0, [r4, #36]	; 0x24
 800e140:	b920      	cbnz	r0, 800e14c <_Balloc+0x20>
 800e142:	4b18      	ldr	r3, [pc, #96]	; (800e1a4 <_Balloc+0x78>)
 800e144:	4818      	ldr	r0, [pc, #96]	; (800e1a8 <_Balloc+0x7c>)
 800e146:	2166      	movs	r1, #102	; 0x66
 800e148:	f7fe ffec 	bl	800d124 <__assert_func>
 800e14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e150:	6006      	str	r6, [r0, #0]
 800e152:	60c6      	str	r6, [r0, #12]
 800e154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e156:	68f3      	ldr	r3, [r6, #12]
 800e158:	b183      	cbz	r3, 800e17c <_Balloc+0x50>
 800e15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e162:	b9b8      	cbnz	r0, 800e194 <_Balloc+0x68>
 800e164:	2101      	movs	r1, #1
 800e166:	fa01 f605 	lsl.w	r6, r1, r5
 800e16a:	1d72      	adds	r2, r6, #5
 800e16c:	0092      	lsls	r2, r2, #2
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fb60 	bl	800e834 <_calloc_r>
 800e174:	b160      	cbz	r0, 800e190 <_Balloc+0x64>
 800e176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e17a:	e00e      	b.n	800e19a <_Balloc+0x6e>
 800e17c:	2221      	movs	r2, #33	; 0x21
 800e17e:	2104      	movs	r1, #4
 800e180:	4620      	mov	r0, r4
 800e182:	f000 fb57 	bl	800e834 <_calloc_r>
 800e186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e188:	60f0      	str	r0, [r6, #12]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e4      	bne.n	800e15a <_Balloc+0x2e>
 800e190:	2000      	movs	r0, #0
 800e192:	bd70      	pop	{r4, r5, r6, pc}
 800e194:	6802      	ldr	r2, [r0, #0]
 800e196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e19a:	2300      	movs	r3, #0
 800e19c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1a0:	e7f7      	b.n	800e192 <_Balloc+0x66>
 800e1a2:	bf00      	nop
 800e1a4:	0801b691 	.word	0x0801b691
 800e1a8:	0801b714 	.word	0x0801b714

0800e1ac <_Bfree>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	b976      	cbnz	r6, 800e1d4 <_Bfree+0x28>
 800e1b6:	2010      	movs	r0, #16
 800e1b8:	f7fe f898 	bl	800c2ec <malloc>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6268      	str	r0, [r5, #36]	; 0x24
 800e1c0:	b920      	cbnz	r0, 800e1cc <_Bfree+0x20>
 800e1c2:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <_Bfree+0x3c>)
 800e1c4:	4809      	ldr	r0, [pc, #36]	; (800e1ec <_Bfree+0x40>)
 800e1c6:	218a      	movs	r1, #138	; 0x8a
 800e1c8:	f7fe ffac 	bl	800d124 <__assert_func>
 800e1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1d0:	6006      	str	r6, [r0, #0]
 800e1d2:	60c6      	str	r6, [r0, #12]
 800e1d4:	b13c      	cbz	r4, 800e1e6 <_Bfree+0x3a>
 800e1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1d8:	6862      	ldr	r2, [r4, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1e0:	6021      	str	r1, [r4, #0]
 800e1e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	0801b691 	.word	0x0801b691
 800e1ec:	0801b714 	.word	0x0801b714

0800e1f0 <__multadd>:
 800e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f4:	690d      	ldr	r5, [r1, #16]
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	461e      	mov	r6, r3
 800e1fc:	f101 0c14 	add.w	ip, r1, #20
 800e200:	2000      	movs	r0, #0
 800e202:	f8dc 3000 	ldr.w	r3, [ip]
 800e206:	b299      	uxth	r1, r3
 800e208:	fb02 6101 	mla	r1, r2, r1, r6
 800e20c:	0c1e      	lsrs	r6, r3, #16
 800e20e:	0c0b      	lsrs	r3, r1, #16
 800e210:	fb02 3306 	mla	r3, r2, r6, r3
 800e214:	b289      	uxth	r1, r1
 800e216:	3001      	adds	r0, #1
 800e218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e21c:	4285      	cmp	r5, r0
 800e21e:	f84c 1b04 	str.w	r1, [ip], #4
 800e222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e226:	dcec      	bgt.n	800e202 <__multadd+0x12>
 800e228:	b30e      	cbz	r6, 800e26e <__multadd+0x7e>
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	42ab      	cmp	r3, r5
 800e22e:	dc19      	bgt.n	800e264 <__multadd+0x74>
 800e230:	6861      	ldr	r1, [r4, #4]
 800e232:	4638      	mov	r0, r7
 800e234:	3101      	adds	r1, #1
 800e236:	f7ff ff79 	bl	800e12c <_Balloc>
 800e23a:	4680      	mov	r8, r0
 800e23c:	b928      	cbnz	r0, 800e24a <__multadd+0x5a>
 800e23e:	4602      	mov	r2, r0
 800e240:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <__multadd+0x84>)
 800e242:	480d      	ldr	r0, [pc, #52]	; (800e278 <__multadd+0x88>)
 800e244:	21b5      	movs	r1, #181	; 0xb5
 800e246:	f7fe ff6d 	bl	800d124 <__assert_func>
 800e24a:	6922      	ldr	r2, [r4, #16]
 800e24c:	3202      	adds	r2, #2
 800e24e:	f104 010c 	add.w	r1, r4, #12
 800e252:	0092      	lsls	r2, r2, #2
 800e254:	300c      	adds	r0, #12
 800e256:	f7fe f851 	bl	800c2fc <memcpy>
 800e25a:	4621      	mov	r1, r4
 800e25c:	4638      	mov	r0, r7
 800e25e:	f7ff ffa5 	bl	800e1ac <_Bfree>
 800e262:	4644      	mov	r4, r8
 800e264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e268:	3501      	adds	r5, #1
 800e26a:	615e      	str	r6, [r3, #20]
 800e26c:	6125      	str	r5, [r4, #16]
 800e26e:	4620      	mov	r0, r4
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	0801b703 	.word	0x0801b703
 800e278:	0801b714 	.word	0x0801b714

0800e27c <__hi0bits>:
 800e27c:	0c03      	lsrs	r3, r0, #16
 800e27e:	041b      	lsls	r3, r3, #16
 800e280:	b9d3      	cbnz	r3, 800e2b8 <__hi0bits+0x3c>
 800e282:	0400      	lsls	r0, r0, #16
 800e284:	2310      	movs	r3, #16
 800e286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e28a:	bf04      	itt	eq
 800e28c:	0200      	lsleq	r0, r0, #8
 800e28e:	3308      	addeq	r3, #8
 800e290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e294:	bf04      	itt	eq
 800e296:	0100      	lsleq	r0, r0, #4
 800e298:	3304      	addeq	r3, #4
 800e29a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e29e:	bf04      	itt	eq
 800e2a0:	0080      	lsleq	r0, r0, #2
 800e2a2:	3302      	addeq	r3, #2
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	db05      	blt.n	800e2b4 <__hi0bits+0x38>
 800e2a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e2ac:	f103 0301 	add.w	r3, r3, #1
 800e2b0:	bf08      	it	eq
 800e2b2:	2320      	moveq	r3, #32
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	4770      	bx	lr
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e7e4      	b.n	800e286 <__hi0bits+0xa>

0800e2bc <__lo0bits>:
 800e2bc:	6803      	ldr	r3, [r0, #0]
 800e2be:	f013 0207 	ands.w	r2, r3, #7
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	d00b      	beq.n	800e2de <__lo0bits+0x22>
 800e2c6:	07da      	lsls	r2, r3, #31
 800e2c8:	d423      	bmi.n	800e312 <__lo0bits+0x56>
 800e2ca:	0798      	lsls	r0, r3, #30
 800e2cc:	bf49      	itett	mi
 800e2ce:	085b      	lsrmi	r3, r3, #1
 800e2d0:	089b      	lsrpl	r3, r3, #2
 800e2d2:	2001      	movmi	r0, #1
 800e2d4:	600b      	strmi	r3, [r1, #0]
 800e2d6:	bf5c      	itt	pl
 800e2d8:	600b      	strpl	r3, [r1, #0]
 800e2da:	2002      	movpl	r0, #2
 800e2dc:	4770      	bx	lr
 800e2de:	b298      	uxth	r0, r3
 800e2e0:	b9a8      	cbnz	r0, 800e30e <__lo0bits+0x52>
 800e2e2:	0c1b      	lsrs	r3, r3, #16
 800e2e4:	2010      	movs	r0, #16
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	b90a      	cbnz	r2, 800e2ee <__lo0bits+0x32>
 800e2ea:	3008      	adds	r0, #8
 800e2ec:	0a1b      	lsrs	r3, r3, #8
 800e2ee:	071a      	lsls	r2, r3, #28
 800e2f0:	bf04      	itt	eq
 800e2f2:	091b      	lsreq	r3, r3, #4
 800e2f4:	3004      	addeq	r0, #4
 800e2f6:	079a      	lsls	r2, r3, #30
 800e2f8:	bf04      	itt	eq
 800e2fa:	089b      	lsreq	r3, r3, #2
 800e2fc:	3002      	addeq	r0, #2
 800e2fe:	07da      	lsls	r2, r3, #31
 800e300:	d403      	bmi.n	800e30a <__lo0bits+0x4e>
 800e302:	085b      	lsrs	r3, r3, #1
 800e304:	f100 0001 	add.w	r0, r0, #1
 800e308:	d005      	beq.n	800e316 <__lo0bits+0x5a>
 800e30a:	600b      	str	r3, [r1, #0]
 800e30c:	4770      	bx	lr
 800e30e:	4610      	mov	r0, r2
 800e310:	e7e9      	b.n	800e2e6 <__lo0bits+0x2a>
 800e312:	2000      	movs	r0, #0
 800e314:	4770      	bx	lr
 800e316:	2020      	movs	r0, #32
 800e318:	4770      	bx	lr
	...

0800e31c <__i2b>:
 800e31c:	b510      	push	{r4, lr}
 800e31e:	460c      	mov	r4, r1
 800e320:	2101      	movs	r1, #1
 800e322:	f7ff ff03 	bl	800e12c <_Balloc>
 800e326:	4602      	mov	r2, r0
 800e328:	b928      	cbnz	r0, 800e336 <__i2b+0x1a>
 800e32a:	4b05      	ldr	r3, [pc, #20]	; (800e340 <__i2b+0x24>)
 800e32c:	4805      	ldr	r0, [pc, #20]	; (800e344 <__i2b+0x28>)
 800e32e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e332:	f7fe fef7 	bl	800d124 <__assert_func>
 800e336:	2301      	movs	r3, #1
 800e338:	6144      	str	r4, [r0, #20]
 800e33a:	6103      	str	r3, [r0, #16]
 800e33c:	bd10      	pop	{r4, pc}
 800e33e:	bf00      	nop
 800e340:	0801b703 	.word	0x0801b703
 800e344:	0801b714 	.word	0x0801b714

0800e348 <__multiply>:
 800e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	4691      	mov	r9, r2
 800e34e:	690a      	ldr	r2, [r1, #16]
 800e350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e354:	429a      	cmp	r2, r3
 800e356:	bfb8      	it	lt
 800e358:	460b      	movlt	r3, r1
 800e35a:	460c      	mov	r4, r1
 800e35c:	bfbc      	itt	lt
 800e35e:	464c      	movlt	r4, r9
 800e360:	4699      	movlt	r9, r3
 800e362:	6927      	ldr	r7, [r4, #16]
 800e364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e368:	68a3      	ldr	r3, [r4, #8]
 800e36a:	6861      	ldr	r1, [r4, #4]
 800e36c:	eb07 060a 	add.w	r6, r7, sl
 800e370:	42b3      	cmp	r3, r6
 800e372:	b085      	sub	sp, #20
 800e374:	bfb8      	it	lt
 800e376:	3101      	addlt	r1, #1
 800e378:	f7ff fed8 	bl	800e12c <_Balloc>
 800e37c:	b930      	cbnz	r0, 800e38c <__multiply+0x44>
 800e37e:	4602      	mov	r2, r0
 800e380:	4b44      	ldr	r3, [pc, #272]	; (800e494 <__multiply+0x14c>)
 800e382:	4845      	ldr	r0, [pc, #276]	; (800e498 <__multiply+0x150>)
 800e384:	f240 115d 	movw	r1, #349	; 0x15d
 800e388:	f7fe fecc 	bl	800d124 <__assert_func>
 800e38c:	f100 0514 	add.w	r5, r0, #20
 800e390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e394:	462b      	mov	r3, r5
 800e396:	2200      	movs	r2, #0
 800e398:	4543      	cmp	r3, r8
 800e39a:	d321      	bcc.n	800e3e0 <__multiply+0x98>
 800e39c:	f104 0314 	add.w	r3, r4, #20
 800e3a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e3a4:	f109 0314 	add.w	r3, r9, #20
 800e3a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e3ac:	9202      	str	r2, [sp, #8]
 800e3ae:	1b3a      	subs	r2, r7, r4
 800e3b0:	3a15      	subs	r2, #21
 800e3b2:	f022 0203 	bic.w	r2, r2, #3
 800e3b6:	3204      	adds	r2, #4
 800e3b8:	f104 0115 	add.w	r1, r4, #21
 800e3bc:	428f      	cmp	r7, r1
 800e3be:	bf38      	it	cc
 800e3c0:	2204      	movcc	r2, #4
 800e3c2:	9201      	str	r2, [sp, #4]
 800e3c4:	9a02      	ldr	r2, [sp, #8]
 800e3c6:	9303      	str	r3, [sp, #12]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d80c      	bhi.n	800e3e6 <__multiply+0x9e>
 800e3cc:	2e00      	cmp	r6, #0
 800e3ce:	dd03      	ble.n	800e3d8 <__multiply+0x90>
 800e3d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d05a      	beq.n	800e48e <__multiply+0x146>
 800e3d8:	6106      	str	r6, [r0, #16]
 800e3da:	b005      	add	sp, #20
 800e3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e0:	f843 2b04 	str.w	r2, [r3], #4
 800e3e4:	e7d8      	b.n	800e398 <__multiply+0x50>
 800e3e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e3ea:	f1ba 0f00 	cmp.w	sl, #0
 800e3ee:	d024      	beq.n	800e43a <__multiply+0xf2>
 800e3f0:	f104 0e14 	add.w	lr, r4, #20
 800e3f4:	46a9      	mov	r9, r5
 800e3f6:	f04f 0c00 	mov.w	ip, #0
 800e3fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3fe:	f8d9 1000 	ldr.w	r1, [r9]
 800e402:	fa1f fb82 	uxth.w	fp, r2
 800e406:	b289      	uxth	r1, r1
 800e408:	fb0a 110b 	mla	r1, sl, fp, r1
 800e40c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e410:	f8d9 2000 	ldr.w	r2, [r9]
 800e414:	4461      	add	r1, ip
 800e416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e41a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e41e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e422:	b289      	uxth	r1, r1
 800e424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e428:	4577      	cmp	r7, lr
 800e42a:	f849 1b04 	str.w	r1, [r9], #4
 800e42e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e432:	d8e2      	bhi.n	800e3fa <__multiply+0xb2>
 800e434:	9a01      	ldr	r2, [sp, #4]
 800e436:	f845 c002 	str.w	ip, [r5, r2]
 800e43a:	9a03      	ldr	r2, [sp, #12]
 800e43c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e440:	3304      	adds	r3, #4
 800e442:	f1b9 0f00 	cmp.w	r9, #0
 800e446:	d020      	beq.n	800e48a <__multiply+0x142>
 800e448:	6829      	ldr	r1, [r5, #0]
 800e44a:	f104 0c14 	add.w	ip, r4, #20
 800e44e:	46ae      	mov	lr, r5
 800e450:	f04f 0a00 	mov.w	sl, #0
 800e454:	f8bc b000 	ldrh.w	fp, [ip]
 800e458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e45c:	fb09 220b 	mla	r2, r9, fp, r2
 800e460:	4492      	add	sl, r2
 800e462:	b289      	uxth	r1, r1
 800e464:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e468:	f84e 1b04 	str.w	r1, [lr], #4
 800e46c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e470:	f8be 1000 	ldrh.w	r1, [lr]
 800e474:	0c12      	lsrs	r2, r2, #16
 800e476:	fb09 1102 	mla	r1, r9, r2, r1
 800e47a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e47e:	4567      	cmp	r7, ip
 800e480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e484:	d8e6      	bhi.n	800e454 <__multiply+0x10c>
 800e486:	9a01      	ldr	r2, [sp, #4]
 800e488:	50a9      	str	r1, [r5, r2]
 800e48a:	3504      	adds	r5, #4
 800e48c:	e79a      	b.n	800e3c4 <__multiply+0x7c>
 800e48e:	3e01      	subs	r6, #1
 800e490:	e79c      	b.n	800e3cc <__multiply+0x84>
 800e492:	bf00      	nop
 800e494:	0801b703 	.word	0x0801b703
 800e498:	0801b714 	.word	0x0801b714

0800e49c <__pow5mult>:
 800e49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4a0:	4615      	mov	r5, r2
 800e4a2:	f012 0203 	ands.w	r2, r2, #3
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	460f      	mov	r7, r1
 800e4aa:	d007      	beq.n	800e4bc <__pow5mult+0x20>
 800e4ac:	4c25      	ldr	r4, [pc, #148]	; (800e544 <__pow5mult+0xa8>)
 800e4ae:	3a01      	subs	r2, #1
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4b6:	f7ff fe9b 	bl	800e1f0 <__multadd>
 800e4ba:	4607      	mov	r7, r0
 800e4bc:	10ad      	asrs	r5, r5, #2
 800e4be:	d03d      	beq.n	800e53c <__pow5mult+0xa0>
 800e4c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e4c2:	b97c      	cbnz	r4, 800e4e4 <__pow5mult+0x48>
 800e4c4:	2010      	movs	r0, #16
 800e4c6:	f7fd ff11 	bl	800c2ec <malloc>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	6270      	str	r0, [r6, #36]	; 0x24
 800e4ce:	b928      	cbnz	r0, 800e4dc <__pow5mult+0x40>
 800e4d0:	4b1d      	ldr	r3, [pc, #116]	; (800e548 <__pow5mult+0xac>)
 800e4d2:	481e      	ldr	r0, [pc, #120]	; (800e54c <__pow5mult+0xb0>)
 800e4d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e4d8:	f7fe fe24 	bl	800d124 <__assert_func>
 800e4dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4e0:	6004      	str	r4, [r0, #0]
 800e4e2:	60c4      	str	r4, [r0, #12]
 800e4e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4ec:	b94c      	cbnz	r4, 800e502 <__pow5mult+0x66>
 800e4ee:	f240 2171 	movw	r1, #625	; 0x271
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7ff ff12 	bl	800e31c <__i2b>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4fe:	4604      	mov	r4, r0
 800e500:	6003      	str	r3, [r0, #0]
 800e502:	f04f 0900 	mov.w	r9, #0
 800e506:	07eb      	lsls	r3, r5, #31
 800e508:	d50a      	bpl.n	800e520 <__pow5mult+0x84>
 800e50a:	4639      	mov	r1, r7
 800e50c:	4622      	mov	r2, r4
 800e50e:	4630      	mov	r0, r6
 800e510:	f7ff ff1a 	bl	800e348 <__multiply>
 800e514:	4639      	mov	r1, r7
 800e516:	4680      	mov	r8, r0
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff fe47 	bl	800e1ac <_Bfree>
 800e51e:	4647      	mov	r7, r8
 800e520:	106d      	asrs	r5, r5, #1
 800e522:	d00b      	beq.n	800e53c <__pow5mult+0xa0>
 800e524:	6820      	ldr	r0, [r4, #0]
 800e526:	b938      	cbnz	r0, 800e538 <__pow5mult+0x9c>
 800e528:	4622      	mov	r2, r4
 800e52a:	4621      	mov	r1, r4
 800e52c:	4630      	mov	r0, r6
 800e52e:	f7ff ff0b 	bl	800e348 <__multiply>
 800e532:	6020      	str	r0, [r4, #0]
 800e534:	f8c0 9000 	str.w	r9, [r0]
 800e538:	4604      	mov	r4, r0
 800e53a:	e7e4      	b.n	800e506 <__pow5mult+0x6a>
 800e53c:	4638      	mov	r0, r7
 800e53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e542:	bf00      	nop
 800e544:	0801b860 	.word	0x0801b860
 800e548:	0801b691 	.word	0x0801b691
 800e54c:	0801b714 	.word	0x0801b714

0800e550 <__lshift>:
 800e550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e554:	460c      	mov	r4, r1
 800e556:	6849      	ldr	r1, [r1, #4]
 800e558:	6923      	ldr	r3, [r4, #16]
 800e55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e55e:	68a3      	ldr	r3, [r4, #8]
 800e560:	4607      	mov	r7, r0
 800e562:	4691      	mov	r9, r2
 800e564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e568:	f108 0601 	add.w	r6, r8, #1
 800e56c:	42b3      	cmp	r3, r6
 800e56e:	db0b      	blt.n	800e588 <__lshift+0x38>
 800e570:	4638      	mov	r0, r7
 800e572:	f7ff fddb 	bl	800e12c <_Balloc>
 800e576:	4605      	mov	r5, r0
 800e578:	b948      	cbnz	r0, 800e58e <__lshift+0x3e>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b2a      	ldr	r3, [pc, #168]	; (800e628 <__lshift+0xd8>)
 800e57e:	482b      	ldr	r0, [pc, #172]	; (800e62c <__lshift+0xdc>)
 800e580:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e584:	f7fe fdce 	bl	800d124 <__assert_func>
 800e588:	3101      	adds	r1, #1
 800e58a:	005b      	lsls	r3, r3, #1
 800e58c:	e7ee      	b.n	800e56c <__lshift+0x1c>
 800e58e:	2300      	movs	r3, #0
 800e590:	f100 0114 	add.w	r1, r0, #20
 800e594:	f100 0210 	add.w	r2, r0, #16
 800e598:	4618      	mov	r0, r3
 800e59a:	4553      	cmp	r3, sl
 800e59c:	db37      	blt.n	800e60e <__lshift+0xbe>
 800e59e:	6920      	ldr	r0, [r4, #16]
 800e5a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5a4:	f104 0314 	add.w	r3, r4, #20
 800e5a8:	f019 091f 	ands.w	r9, r9, #31
 800e5ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e5b4:	d02f      	beq.n	800e616 <__lshift+0xc6>
 800e5b6:	f1c9 0e20 	rsb	lr, r9, #32
 800e5ba:	468a      	mov	sl, r1
 800e5bc:	f04f 0c00 	mov.w	ip, #0
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	fa02 f209 	lsl.w	r2, r2, r9
 800e5c6:	ea42 020c 	orr.w	r2, r2, ip
 800e5ca:	f84a 2b04 	str.w	r2, [sl], #4
 800e5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d2:	4298      	cmp	r0, r3
 800e5d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e5d8:	d8f2      	bhi.n	800e5c0 <__lshift+0x70>
 800e5da:	1b03      	subs	r3, r0, r4
 800e5dc:	3b15      	subs	r3, #21
 800e5de:	f023 0303 	bic.w	r3, r3, #3
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	f104 0215 	add.w	r2, r4, #21
 800e5e8:	4290      	cmp	r0, r2
 800e5ea:	bf38      	it	cc
 800e5ec:	2304      	movcc	r3, #4
 800e5ee:	f841 c003 	str.w	ip, [r1, r3]
 800e5f2:	f1bc 0f00 	cmp.w	ip, #0
 800e5f6:	d001      	beq.n	800e5fc <__lshift+0xac>
 800e5f8:	f108 0602 	add.w	r6, r8, #2
 800e5fc:	3e01      	subs	r6, #1
 800e5fe:	4638      	mov	r0, r7
 800e600:	612e      	str	r6, [r5, #16]
 800e602:	4621      	mov	r1, r4
 800e604:	f7ff fdd2 	bl	800e1ac <_Bfree>
 800e608:	4628      	mov	r0, r5
 800e60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e612:	3301      	adds	r3, #1
 800e614:	e7c1      	b.n	800e59a <__lshift+0x4a>
 800e616:	3904      	subs	r1, #4
 800e618:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e620:	4298      	cmp	r0, r3
 800e622:	d8f9      	bhi.n	800e618 <__lshift+0xc8>
 800e624:	e7ea      	b.n	800e5fc <__lshift+0xac>
 800e626:	bf00      	nop
 800e628:	0801b703 	.word	0x0801b703
 800e62c:	0801b714 	.word	0x0801b714

0800e630 <__mcmp>:
 800e630:	b530      	push	{r4, r5, lr}
 800e632:	6902      	ldr	r2, [r0, #16]
 800e634:	690c      	ldr	r4, [r1, #16]
 800e636:	1b12      	subs	r2, r2, r4
 800e638:	d10e      	bne.n	800e658 <__mcmp+0x28>
 800e63a:	f100 0314 	add.w	r3, r0, #20
 800e63e:	3114      	adds	r1, #20
 800e640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e64c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e650:	42a5      	cmp	r5, r4
 800e652:	d003      	beq.n	800e65c <__mcmp+0x2c>
 800e654:	d305      	bcc.n	800e662 <__mcmp+0x32>
 800e656:	2201      	movs	r2, #1
 800e658:	4610      	mov	r0, r2
 800e65a:	bd30      	pop	{r4, r5, pc}
 800e65c:	4283      	cmp	r3, r0
 800e65e:	d3f3      	bcc.n	800e648 <__mcmp+0x18>
 800e660:	e7fa      	b.n	800e658 <__mcmp+0x28>
 800e662:	f04f 32ff 	mov.w	r2, #4294967295
 800e666:	e7f7      	b.n	800e658 <__mcmp+0x28>

0800e668 <__mdiff>:
 800e668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	460c      	mov	r4, r1
 800e66e:	4606      	mov	r6, r0
 800e670:	4611      	mov	r1, r2
 800e672:	4620      	mov	r0, r4
 800e674:	4690      	mov	r8, r2
 800e676:	f7ff ffdb 	bl	800e630 <__mcmp>
 800e67a:	1e05      	subs	r5, r0, #0
 800e67c:	d110      	bne.n	800e6a0 <__mdiff+0x38>
 800e67e:	4629      	mov	r1, r5
 800e680:	4630      	mov	r0, r6
 800e682:	f7ff fd53 	bl	800e12c <_Balloc>
 800e686:	b930      	cbnz	r0, 800e696 <__mdiff+0x2e>
 800e688:	4b3a      	ldr	r3, [pc, #232]	; (800e774 <__mdiff+0x10c>)
 800e68a:	4602      	mov	r2, r0
 800e68c:	f240 2132 	movw	r1, #562	; 0x232
 800e690:	4839      	ldr	r0, [pc, #228]	; (800e778 <__mdiff+0x110>)
 800e692:	f7fe fd47 	bl	800d124 <__assert_func>
 800e696:	2301      	movs	r3, #1
 800e698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e69c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a0:	bfa4      	itt	ge
 800e6a2:	4643      	movge	r3, r8
 800e6a4:	46a0      	movge	r8, r4
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e6ac:	bfa6      	itte	ge
 800e6ae:	461c      	movge	r4, r3
 800e6b0:	2500      	movge	r5, #0
 800e6b2:	2501      	movlt	r5, #1
 800e6b4:	f7ff fd3a 	bl	800e12c <_Balloc>
 800e6b8:	b920      	cbnz	r0, 800e6c4 <__mdiff+0x5c>
 800e6ba:	4b2e      	ldr	r3, [pc, #184]	; (800e774 <__mdiff+0x10c>)
 800e6bc:	4602      	mov	r2, r0
 800e6be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e6c2:	e7e5      	b.n	800e690 <__mdiff+0x28>
 800e6c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e6c8:	6926      	ldr	r6, [r4, #16]
 800e6ca:	60c5      	str	r5, [r0, #12]
 800e6cc:	f104 0914 	add.w	r9, r4, #20
 800e6d0:	f108 0514 	add.w	r5, r8, #20
 800e6d4:	f100 0e14 	add.w	lr, r0, #20
 800e6d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e6dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e6e0:	f108 0210 	add.w	r2, r8, #16
 800e6e4:	46f2      	mov	sl, lr
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e6f0:	fa1f f883 	uxth.w	r8, r3
 800e6f4:	fa11 f18b 	uxtah	r1, r1, fp
 800e6f8:	0c1b      	lsrs	r3, r3, #16
 800e6fa:	eba1 0808 	sub.w	r8, r1, r8
 800e6fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e706:	fa1f f888 	uxth.w	r8, r8
 800e70a:	1419      	asrs	r1, r3, #16
 800e70c:	454e      	cmp	r6, r9
 800e70e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e712:	f84a 3b04 	str.w	r3, [sl], #4
 800e716:	d8e7      	bhi.n	800e6e8 <__mdiff+0x80>
 800e718:	1b33      	subs	r3, r6, r4
 800e71a:	3b15      	subs	r3, #21
 800e71c:	f023 0303 	bic.w	r3, r3, #3
 800e720:	3304      	adds	r3, #4
 800e722:	3415      	adds	r4, #21
 800e724:	42a6      	cmp	r6, r4
 800e726:	bf38      	it	cc
 800e728:	2304      	movcc	r3, #4
 800e72a:	441d      	add	r5, r3
 800e72c:	4473      	add	r3, lr
 800e72e:	469e      	mov	lr, r3
 800e730:	462e      	mov	r6, r5
 800e732:	4566      	cmp	r6, ip
 800e734:	d30e      	bcc.n	800e754 <__mdiff+0xec>
 800e736:	f10c 0203 	add.w	r2, ip, #3
 800e73a:	1b52      	subs	r2, r2, r5
 800e73c:	f022 0203 	bic.w	r2, r2, #3
 800e740:	3d03      	subs	r5, #3
 800e742:	45ac      	cmp	ip, r5
 800e744:	bf38      	it	cc
 800e746:	2200      	movcc	r2, #0
 800e748:	441a      	add	r2, r3
 800e74a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e74e:	b17b      	cbz	r3, 800e770 <__mdiff+0x108>
 800e750:	6107      	str	r7, [r0, #16]
 800e752:	e7a3      	b.n	800e69c <__mdiff+0x34>
 800e754:	f856 8b04 	ldr.w	r8, [r6], #4
 800e758:	fa11 f288 	uxtah	r2, r1, r8
 800e75c:	1414      	asrs	r4, r2, #16
 800e75e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e762:	b292      	uxth	r2, r2
 800e764:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e768:	f84e 2b04 	str.w	r2, [lr], #4
 800e76c:	1421      	asrs	r1, r4, #16
 800e76e:	e7e0      	b.n	800e732 <__mdiff+0xca>
 800e770:	3f01      	subs	r7, #1
 800e772:	e7ea      	b.n	800e74a <__mdiff+0xe2>
 800e774:	0801b703 	.word	0x0801b703
 800e778:	0801b714 	.word	0x0801b714

0800e77c <__d2b>:
 800e77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e780:	4689      	mov	r9, r1
 800e782:	2101      	movs	r1, #1
 800e784:	ec57 6b10 	vmov	r6, r7, d0
 800e788:	4690      	mov	r8, r2
 800e78a:	f7ff fccf 	bl	800e12c <_Balloc>
 800e78e:	4604      	mov	r4, r0
 800e790:	b930      	cbnz	r0, 800e7a0 <__d2b+0x24>
 800e792:	4602      	mov	r2, r0
 800e794:	4b25      	ldr	r3, [pc, #148]	; (800e82c <__d2b+0xb0>)
 800e796:	4826      	ldr	r0, [pc, #152]	; (800e830 <__d2b+0xb4>)
 800e798:	f240 310a 	movw	r1, #778	; 0x30a
 800e79c:	f7fe fcc2 	bl	800d124 <__assert_func>
 800e7a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e7a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7a8:	bb35      	cbnz	r5, 800e7f8 <__d2b+0x7c>
 800e7aa:	2e00      	cmp	r6, #0
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	d028      	beq.n	800e802 <__d2b+0x86>
 800e7b0:	4668      	mov	r0, sp
 800e7b2:	9600      	str	r6, [sp, #0]
 800e7b4:	f7ff fd82 	bl	800e2bc <__lo0bits>
 800e7b8:	9900      	ldr	r1, [sp, #0]
 800e7ba:	b300      	cbz	r0, 800e7fe <__d2b+0x82>
 800e7bc:	9a01      	ldr	r2, [sp, #4]
 800e7be:	f1c0 0320 	rsb	r3, r0, #32
 800e7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7c6:	430b      	orrs	r3, r1
 800e7c8:	40c2      	lsrs	r2, r0
 800e7ca:	6163      	str	r3, [r4, #20]
 800e7cc:	9201      	str	r2, [sp, #4]
 800e7ce:	9b01      	ldr	r3, [sp, #4]
 800e7d0:	61a3      	str	r3, [r4, #24]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	bf14      	ite	ne
 800e7d6:	2202      	movne	r2, #2
 800e7d8:	2201      	moveq	r2, #1
 800e7da:	6122      	str	r2, [r4, #16]
 800e7dc:	b1d5      	cbz	r5, 800e814 <__d2b+0x98>
 800e7de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e7e2:	4405      	add	r5, r0
 800e7e4:	f8c9 5000 	str.w	r5, [r9]
 800e7e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7ec:	f8c8 0000 	str.w	r0, [r8]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	b003      	add	sp, #12
 800e7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7fc:	e7d5      	b.n	800e7aa <__d2b+0x2e>
 800e7fe:	6161      	str	r1, [r4, #20]
 800e800:	e7e5      	b.n	800e7ce <__d2b+0x52>
 800e802:	a801      	add	r0, sp, #4
 800e804:	f7ff fd5a 	bl	800e2bc <__lo0bits>
 800e808:	9b01      	ldr	r3, [sp, #4]
 800e80a:	6163      	str	r3, [r4, #20]
 800e80c:	2201      	movs	r2, #1
 800e80e:	6122      	str	r2, [r4, #16]
 800e810:	3020      	adds	r0, #32
 800e812:	e7e3      	b.n	800e7dc <__d2b+0x60>
 800e814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e81c:	f8c9 0000 	str.w	r0, [r9]
 800e820:	6918      	ldr	r0, [r3, #16]
 800e822:	f7ff fd2b 	bl	800e27c <__hi0bits>
 800e826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e82a:	e7df      	b.n	800e7ec <__d2b+0x70>
 800e82c:	0801b703 	.word	0x0801b703
 800e830:	0801b714 	.word	0x0801b714

0800e834 <_calloc_r>:
 800e834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e836:	fba1 2402 	umull	r2, r4, r1, r2
 800e83a:	b94c      	cbnz	r4, 800e850 <_calloc_r+0x1c>
 800e83c:	4611      	mov	r1, r2
 800e83e:	9201      	str	r2, [sp, #4]
 800e840:	f7fd fdde 	bl	800c400 <_malloc_r>
 800e844:	9a01      	ldr	r2, [sp, #4]
 800e846:	4605      	mov	r5, r0
 800e848:	b930      	cbnz	r0, 800e858 <_calloc_r+0x24>
 800e84a:	4628      	mov	r0, r5
 800e84c:	b003      	add	sp, #12
 800e84e:	bd30      	pop	{r4, r5, pc}
 800e850:	220c      	movs	r2, #12
 800e852:	6002      	str	r2, [r0, #0]
 800e854:	2500      	movs	r5, #0
 800e856:	e7f8      	b.n	800e84a <_calloc_r+0x16>
 800e858:	4621      	mov	r1, r4
 800e85a:	f7fd fd5d 	bl	800c318 <memset>
 800e85e:	e7f4      	b.n	800e84a <_calloc_r+0x16>

0800e860 <_realloc_r>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	4680      	mov	r8, r0
 800e866:	4614      	mov	r4, r2
 800e868:	460e      	mov	r6, r1
 800e86a:	b921      	cbnz	r1, 800e876 <_realloc_r+0x16>
 800e86c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e870:	4611      	mov	r1, r2
 800e872:	f7fd bdc5 	b.w	800c400 <_malloc_r>
 800e876:	b92a      	cbnz	r2, 800e884 <_realloc_r+0x24>
 800e878:	f7fd fd56 	bl	800c328 <_free_r>
 800e87c:	4625      	mov	r5, r4
 800e87e:	4628      	mov	r0, r5
 800e880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e884:	f000 fb38 	bl	800eef8 <_malloc_usable_size_r>
 800e888:	4284      	cmp	r4, r0
 800e88a:	4607      	mov	r7, r0
 800e88c:	d802      	bhi.n	800e894 <_realloc_r+0x34>
 800e88e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e892:	d812      	bhi.n	800e8ba <_realloc_r+0x5a>
 800e894:	4621      	mov	r1, r4
 800e896:	4640      	mov	r0, r8
 800e898:	f7fd fdb2 	bl	800c400 <_malloc_r>
 800e89c:	4605      	mov	r5, r0
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d0ed      	beq.n	800e87e <_realloc_r+0x1e>
 800e8a2:	42bc      	cmp	r4, r7
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	bf28      	it	cs
 800e8aa:	463a      	movcs	r2, r7
 800e8ac:	f7fd fd26 	bl	800c2fc <memcpy>
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	f7fd fd38 	bl	800c328 <_free_r>
 800e8b8:	e7e1      	b.n	800e87e <_realloc_r+0x1e>
 800e8ba:	4635      	mov	r5, r6
 800e8bc:	e7df      	b.n	800e87e <_realloc_r+0x1e>

0800e8be <__ssputs_r>:
 800e8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c2:	688e      	ldr	r6, [r1, #8]
 800e8c4:	429e      	cmp	r6, r3
 800e8c6:	4682      	mov	sl, r0
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	4690      	mov	r8, r2
 800e8cc:	461f      	mov	r7, r3
 800e8ce:	d838      	bhi.n	800e942 <__ssputs_r+0x84>
 800e8d0:	898a      	ldrh	r2, [r1, #12]
 800e8d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8d6:	d032      	beq.n	800e93e <__ssputs_r+0x80>
 800e8d8:	6825      	ldr	r5, [r4, #0]
 800e8da:	6909      	ldr	r1, [r1, #16]
 800e8dc:	eba5 0901 	sub.w	r9, r5, r1
 800e8e0:	6965      	ldr	r5, [r4, #20]
 800e8e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	444b      	add	r3, r9
 800e8ee:	106d      	asrs	r5, r5, #1
 800e8f0:	429d      	cmp	r5, r3
 800e8f2:	bf38      	it	cc
 800e8f4:	461d      	movcc	r5, r3
 800e8f6:	0553      	lsls	r3, r2, #21
 800e8f8:	d531      	bpl.n	800e95e <__ssputs_r+0xa0>
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7fd fd80 	bl	800c400 <_malloc_r>
 800e900:	4606      	mov	r6, r0
 800e902:	b950      	cbnz	r0, 800e91a <__ssputs_r+0x5c>
 800e904:	230c      	movs	r3, #12
 800e906:	f8ca 3000 	str.w	r3, [sl]
 800e90a:	89a3      	ldrh	r3, [r4, #12]
 800e90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e910:	81a3      	strh	r3, [r4, #12]
 800e912:	f04f 30ff 	mov.w	r0, #4294967295
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91a:	6921      	ldr	r1, [r4, #16]
 800e91c:	464a      	mov	r2, r9
 800e91e:	f7fd fced 	bl	800c2fc <memcpy>
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	6126      	str	r6, [r4, #16]
 800e930:	6165      	str	r5, [r4, #20]
 800e932:	444e      	add	r6, r9
 800e934:	eba5 0509 	sub.w	r5, r5, r9
 800e938:	6026      	str	r6, [r4, #0]
 800e93a:	60a5      	str	r5, [r4, #8]
 800e93c:	463e      	mov	r6, r7
 800e93e:	42be      	cmp	r6, r7
 800e940:	d900      	bls.n	800e944 <__ssputs_r+0x86>
 800e942:	463e      	mov	r6, r7
 800e944:	6820      	ldr	r0, [r4, #0]
 800e946:	4632      	mov	r2, r6
 800e948:	4641      	mov	r1, r8
 800e94a:	f000 fabb 	bl	800eec4 <memmove>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	1b9b      	subs	r3, r3, r6
 800e952:	60a3      	str	r3, [r4, #8]
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	4433      	add	r3, r6
 800e958:	6023      	str	r3, [r4, #0]
 800e95a:	2000      	movs	r0, #0
 800e95c:	e7db      	b.n	800e916 <__ssputs_r+0x58>
 800e95e:	462a      	mov	r2, r5
 800e960:	f7ff ff7e 	bl	800e860 <_realloc_r>
 800e964:	4606      	mov	r6, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	d1e1      	bne.n	800e92e <__ssputs_r+0x70>
 800e96a:	6921      	ldr	r1, [r4, #16]
 800e96c:	4650      	mov	r0, sl
 800e96e:	f7fd fcdb 	bl	800c328 <_free_r>
 800e972:	e7c7      	b.n	800e904 <__ssputs_r+0x46>

0800e974 <_svfiprintf_r>:
 800e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	4698      	mov	r8, r3
 800e97a:	898b      	ldrh	r3, [r1, #12]
 800e97c:	061b      	lsls	r3, r3, #24
 800e97e:	b09d      	sub	sp, #116	; 0x74
 800e980:	4607      	mov	r7, r0
 800e982:	460d      	mov	r5, r1
 800e984:	4614      	mov	r4, r2
 800e986:	d50e      	bpl.n	800e9a6 <_svfiprintf_r+0x32>
 800e988:	690b      	ldr	r3, [r1, #16]
 800e98a:	b963      	cbnz	r3, 800e9a6 <_svfiprintf_r+0x32>
 800e98c:	2140      	movs	r1, #64	; 0x40
 800e98e:	f7fd fd37 	bl	800c400 <_malloc_r>
 800e992:	6028      	str	r0, [r5, #0]
 800e994:	6128      	str	r0, [r5, #16]
 800e996:	b920      	cbnz	r0, 800e9a2 <_svfiprintf_r+0x2e>
 800e998:	230c      	movs	r3, #12
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a0:	e0d1      	b.n	800eb46 <_svfiprintf_r+0x1d2>
 800e9a2:	2340      	movs	r3, #64	; 0x40
 800e9a4:	616b      	str	r3, [r5, #20]
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9aa:	2320      	movs	r3, #32
 800e9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9b4:	2330      	movs	r3, #48	; 0x30
 800e9b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb60 <_svfiprintf_r+0x1ec>
 800e9ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9be:	f04f 0901 	mov.w	r9, #1
 800e9c2:	4623      	mov	r3, r4
 800e9c4:	469a      	mov	sl, r3
 800e9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9ca:	b10a      	cbz	r2, 800e9d0 <_svfiprintf_r+0x5c>
 800e9cc:	2a25      	cmp	r2, #37	; 0x25
 800e9ce:	d1f9      	bne.n	800e9c4 <_svfiprintf_r+0x50>
 800e9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e9d4:	d00b      	beq.n	800e9ee <_svfiprintf_r+0x7a>
 800e9d6:	465b      	mov	r3, fp
 800e9d8:	4622      	mov	r2, r4
 800e9da:	4629      	mov	r1, r5
 800e9dc:	4638      	mov	r0, r7
 800e9de:	f7ff ff6e 	bl	800e8be <__ssputs_r>
 800e9e2:	3001      	adds	r0, #1
 800e9e4:	f000 80aa 	beq.w	800eb3c <_svfiprintf_r+0x1c8>
 800e9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9ea:	445a      	add	r2, fp
 800e9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f000 80a2 	beq.w	800eb3c <_svfiprintf_r+0x1c8>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea02:	f10a 0a01 	add.w	sl, sl, #1
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	9307      	str	r3, [sp, #28]
 800ea0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea0e:	931a      	str	r3, [sp, #104]	; 0x68
 800ea10:	4654      	mov	r4, sl
 800ea12:	2205      	movs	r2, #5
 800ea14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea18:	4851      	ldr	r0, [pc, #324]	; (800eb60 <_svfiprintf_r+0x1ec>)
 800ea1a:	f7f1 fbf1 	bl	8000200 <memchr>
 800ea1e:	9a04      	ldr	r2, [sp, #16]
 800ea20:	b9d8      	cbnz	r0, 800ea5a <_svfiprintf_r+0xe6>
 800ea22:	06d0      	lsls	r0, r2, #27
 800ea24:	bf44      	itt	mi
 800ea26:	2320      	movmi	r3, #32
 800ea28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea2c:	0711      	lsls	r1, r2, #28
 800ea2e:	bf44      	itt	mi
 800ea30:	232b      	movmi	r3, #43	; 0x2b
 800ea32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea36:	f89a 3000 	ldrb.w	r3, [sl]
 800ea3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea3c:	d015      	beq.n	800ea6a <_svfiprintf_r+0xf6>
 800ea3e:	9a07      	ldr	r2, [sp, #28]
 800ea40:	4654      	mov	r4, sl
 800ea42:	2000      	movs	r0, #0
 800ea44:	f04f 0c0a 	mov.w	ip, #10
 800ea48:	4621      	mov	r1, r4
 800ea4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea4e:	3b30      	subs	r3, #48	; 0x30
 800ea50:	2b09      	cmp	r3, #9
 800ea52:	d94e      	bls.n	800eaf2 <_svfiprintf_r+0x17e>
 800ea54:	b1b0      	cbz	r0, 800ea84 <_svfiprintf_r+0x110>
 800ea56:	9207      	str	r2, [sp, #28]
 800ea58:	e014      	b.n	800ea84 <_svfiprintf_r+0x110>
 800ea5a:	eba0 0308 	sub.w	r3, r0, r8
 800ea5e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea62:	4313      	orrs	r3, r2
 800ea64:	9304      	str	r3, [sp, #16]
 800ea66:	46a2      	mov	sl, r4
 800ea68:	e7d2      	b.n	800ea10 <_svfiprintf_r+0x9c>
 800ea6a:	9b03      	ldr	r3, [sp, #12]
 800ea6c:	1d19      	adds	r1, r3, #4
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	9103      	str	r1, [sp, #12]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	bfbb      	ittet	lt
 800ea76:	425b      	neglt	r3, r3
 800ea78:	f042 0202 	orrlt.w	r2, r2, #2
 800ea7c:	9307      	strge	r3, [sp, #28]
 800ea7e:	9307      	strlt	r3, [sp, #28]
 800ea80:	bfb8      	it	lt
 800ea82:	9204      	strlt	r2, [sp, #16]
 800ea84:	7823      	ldrb	r3, [r4, #0]
 800ea86:	2b2e      	cmp	r3, #46	; 0x2e
 800ea88:	d10c      	bne.n	800eaa4 <_svfiprintf_r+0x130>
 800ea8a:	7863      	ldrb	r3, [r4, #1]
 800ea8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea8e:	d135      	bne.n	800eafc <_svfiprintf_r+0x188>
 800ea90:	9b03      	ldr	r3, [sp, #12]
 800ea92:	1d1a      	adds	r2, r3, #4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	9203      	str	r2, [sp, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bfb8      	it	lt
 800ea9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaa0:	3402      	adds	r4, #2
 800eaa2:	9305      	str	r3, [sp, #20]
 800eaa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb70 <_svfiprintf_r+0x1fc>
 800eaa8:	7821      	ldrb	r1, [r4, #0]
 800eaaa:	2203      	movs	r2, #3
 800eaac:	4650      	mov	r0, sl
 800eaae:	f7f1 fba7 	bl	8000200 <memchr>
 800eab2:	b140      	cbz	r0, 800eac6 <_svfiprintf_r+0x152>
 800eab4:	2340      	movs	r3, #64	; 0x40
 800eab6:	eba0 000a 	sub.w	r0, r0, sl
 800eaba:	fa03 f000 	lsl.w	r0, r3, r0
 800eabe:	9b04      	ldr	r3, [sp, #16]
 800eac0:	4303      	orrs	r3, r0
 800eac2:	3401      	adds	r4, #1
 800eac4:	9304      	str	r3, [sp, #16]
 800eac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaca:	4826      	ldr	r0, [pc, #152]	; (800eb64 <_svfiprintf_r+0x1f0>)
 800eacc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ead0:	2206      	movs	r2, #6
 800ead2:	f7f1 fb95 	bl	8000200 <memchr>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d038      	beq.n	800eb4c <_svfiprintf_r+0x1d8>
 800eada:	4b23      	ldr	r3, [pc, #140]	; (800eb68 <_svfiprintf_r+0x1f4>)
 800eadc:	bb1b      	cbnz	r3, 800eb26 <_svfiprintf_r+0x1b2>
 800eade:	9b03      	ldr	r3, [sp, #12]
 800eae0:	3307      	adds	r3, #7
 800eae2:	f023 0307 	bic.w	r3, r3, #7
 800eae6:	3308      	adds	r3, #8
 800eae8:	9303      	str	r3, [sp, #12]
 800eaea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaec:	4433      	add	r3, r6
 800eaee:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf0:	e767      	b.n	800e9c2 <_svfiprintf_r+0x4e>
 800eaf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	2001      	movs	r0, #1
 800eafa:	e7a5      	b.n	800ea48 <_svfiprintf_r+0xd4>
 800eafc:	2300      	movs	r3, #0
 800eafe:	3401      	adds	r4, #1
 800eb00:	9305      	str	r3, [sp, #20]
 800eb02:	4619      	mov	r1, r3
 800eb04:	f04f 0c0a 	mov.w	ip, #10
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb0e:	3a30      	subs	r2, #48	; 0x30
 800eb10:	2a09      	cmp	r2, #9
 800eb12:	d903      	bls.n	800eb1c <_svfiprintf_r+0x1a8>
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0c5      	beq.n	800eaa4 <_svfiprintf_r+0x130>
 800eb18:	9105      	str	r1, [sp, #20]
 800eb1a:	e7c3      	b.n	800eaa4 <_svfiprintf_r+0x130>
 800eb1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb20:	4604      	mov	r4, r0
 800eb22:	2301      	movs	r3, #1
 800eb24:	e7f0      	b.n	800eb08 <_svfiprintf_r+0x194>
 800eb26:	ab03      	add	r3, sp, #12
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	462a      	mov	r2, r5
 800eb2c:	4b0f      	ldr	r3, [pc, #60]	; (800eb6c <_svfiprintf_r+0x1f8>)
 800eb2e:	a904      	add	r1, sp, #16
 800eb30:	4638      	mov	r0, r7
 800eb32:	f7fd fd79 	bl	800c628 <_printf_float>
 800eb36:	1c42      	adds	r2, r0, #1
 800eb38:	4606      	mov	r6, r0
 800eb3a:	d1d6      	bne.n	800eaea <_svfiprintf_r+0x176>
 800eb3c:	89ab      	ldrh	r3, [r5, #12]
 800eb3e:	065b      	lsls	r3, r3, #25
 800eb40:	f53f af2c 	bmi.w	800e99c <_svfiprintf_r+0x28>
 800eb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb46:	b01d      	add	sp, #116	; 0x74
 800eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	ab03      	add	r3, sp, #12
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	462a      	mov	r2, r5
 800eb52:	4b06      	ldr	r3, [pc, #24]	; (800eb6c <_svfiprintf_r+0x1f8>)
 800eb54:	a904      	add	r1, sp, #16
 800eb56:	4638      	mov	r0, r7
 800eb58:	f7fe f80a 	bl	800cb70 <_printf_i>
 800eb5c:	e7eb      	b.n	800eb36 <_svfiprintf_r+0x1c2>
 800eb5e:	bf00      	nop
 800eb60:	0801b86c 	.word	0x0801b86c
 800eb64:	0801b876 	.word	0x0801b876
 800eb68:	0800c629 	.word	0x0800c629
 800eb6c:	0800e8bf 	.word	0x0800e8bf
 800eb70:	0801b872 	.word	0x0801b872

0800eb74 <__sfputc_r>:
 800eb74:	6893      	ldr	r3, [r2, #8]
 800eb76:	3b01      	subs	r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	b410      	push	{r4}
 800eb7c:	6093      	str	r3, [r2, #8]
 800eb7e:	da08      	bge.n	800eb92 <__sfputc_r+0x1e>
 800eb80:	6994      	ldr	r4, [r2, #24]
 800eb82:	42a3      	cmp	r3, r4
 800eb84:	db01      	blt.n	800eb8a <__sfputc_r+0x16>
 800eb86:	290a      	cmp	r1, #10
 800eb88:	d103      	bne.n	800eb92 <__sfputc_r+0x1e>
 800eb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb8e:	f7fe b9f7 	b.w	800cf80 <__swbuf_r>
 800eb92:	6813      	ldr	r3, [r2, #0]
 800eb94:	1c58      	adds	r0, r3, #1
 800eb96:	6010      	str	r0, [r2, #0]
 800eb98:	7019      	strb	r1, [r3, #0]
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <__sfputs_r>:
 800eba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eba4:	4606      	mov	r6, r0
 800eba6:	460f      	mov	r7, r1
 800eba8:	4614      	mov	r4, r2
 800ebaa:	18d5      	adds	r5, r2, r3
 800ebac:	42ac      	cmp	r4, r5
 800ebae:	d101      	bne.n	800ebb4 <__sfputs_r+0x12>
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	e007      	b.n	800ebc4 <__sfputs_r+0x22>
 800ebb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb8:	463a      	mov	r2, r7
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f7ff ffda 	bl	800eb74 <__sfputc_r>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d1f3      	bne.n	800ebac <__sfputs_r+0xa>
 800ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebc8 <_vfiprintf_r>:
 800ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	460d      	mov	r5, r1
 800ebce:	b09d      	sub	sp, #116	; 0x74
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	4698      	mov	r8, r3
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	b118      	cbz	r0, 800ebe0 <_vfiprintf_r+0x18>
 800ebd8:	6983      	ldr	r3, [r0, #24]
 800ebda:	b90b      	cbnz	r3, 800ebe0 <_vfiprintf_r+0x18>
 800ebdc:	f7fd fac0 	bl	800c160 <__sinit>
 800ebe0:	4b89      	ldr	r3, [pc, #548]	; (800ee08 <_vfiprintf_r+0x240>)
 800ebe2:	429d      	cmp	r5, r3
 800ebe4:	d11b      	bne.n	800ec1e <_vfiprintf_r+0x56>
 800ebe6:	6875      	ldr	r5, [r6, #4]
 800ebe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebea:	07d9      	lsls	r1, r3, #31
 800ebec:	d405      	bmi.n	800ebfa <_vfiprintf_r+0x32>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	059a      	lsls	r2, r3, #22
 800ebf2:	d402      	bmi.n	800ebfa <_vfiprintf_r+0x32>
 800ebf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebf6:	f7fd fb76 	bl	800c2e6 <__retarget_lock_acquire_recursive>
 800ebfa:	89ab      	ldrh	r3, [r5, #12]
 800ebfc:	071b      	lsls	r3, r3, #28
 800ebfe:	d501      	bpl.n	800ec04 <_vfiprintf_r+0x3c>
 800ec00:	692b      	ldr	r3, [r5, #16]
 800ec02:	b9eb      	cbnz	r3, 800ec40 <_vfiprintf_r+0x78>
 800ec04:	4629      	mov	r1, r5
 800ec06:	4630      	mov	r0, r6
 800ec08:	f7fe fa1e 	bl	800d048 <__swsetup_r>
 800ec0c:	b1c0      	cbz	r0, 800ec40 <_vfiprintf_r+0x78>
 800ec0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec10:	07dc      	lsls	r4, r3, #31
 800ec12:	d50e      	bpl.n	800ec32 <_vfiprintf_r+0x6a>
 800ec14:	f04f 30ff 	mov.w	r0, #4294967295
 800ec18:	b01d      	add	sp, #116	; 0x74
 800ec1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1e:	4b7b      	ldr	r3, [pc, #492]	; (800ee0c <_vfiprintf_r+0x244>)
 800ec20:	429d      	cmp	r5, r3
 800ec22:	d101      	bne.n	800ec28 <_vfiprintf_r+0x60>
 800ec24:	68b5      	ldr	r5, [r6, #8]
 800ec26:	e7df      	b.n	800ebe8 <_vfiprintf_r+0x20>
 800ec28:	4b79      	ldr	r3, [pc, #484]	; (800ee10 <_vfiprintf_r+0x248>)
 800ec2a:	429d      	cmp	r5, r3
 800ec2c:	bf08      	it	eq
 800ec2e:	68f5      	ldreq	r5, [r6, #12]
 800ec30:	e7da      	b.n	800ebe8 <_vfiprintf_r+0x20>
 800ec32:	89ab      	ldrh	r3, [r5, #12]
 800ec34:	0598      	lsls	r0, r3, #22
 800ec36:	d4ed      	bmi.n	800ec14 <_vfiprintf_r+0x4c>
 800ec38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec3a:	f7fd fb55 	bl	800c2e8 <__retarget_lock_release_recursive>
 800ec3e:	e7e9      	b.n	800ec14 <_vfiprintf_r+0x4c>
 800ec40:	2300      	movs	r3, #0
 800ec42:	9309      	str	r3, [sp, #36]	; 0x24
 800ec44:	2320      	movs	r3, #32
 800ec46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec4e:	2330      	movs	r3, #48	; 0x30
 800ec50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee14 <_vfiprintf_r+0x24c>
 800ec54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec58:	f04f 0901 	mov.w	r9, #1
 800ec5c:	4623      	mov	r3, r4
 800ec5e:	469a      	mov	sl, r3
 800ec60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec64:	b10a      	cbz	r2, 800ec6a <_vfiprintf_r+0xa2>
 800ec66:	2a25      	cmp	r2, #37	; 0x25
 800ec68:	d1f9      	bne.n	800ec5e <_vfiprintf_r+0x96>
 800ec6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ec6e:	d00b      	beq.n	800ec88 <_vfiprintf_r+0xc0>
 800ec70:	465b      	mov	r3, fp
 800ec72:	4622      	mov	r2, r4
 800ec74:	4629      	mov	r1, r5
 800ec76:	4630      	mov	r0, r6
 800ec78:	f7ff ff93 	bl	800eba2 <__sfputs_r>
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	f000 80aa 	beq.w	800edd6 <_vfiprintf_r+0x20e>
 800ec82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec84:	445a      	add	r2, fp
 800ec86:	9209      	str	r2, [sp, #36]	; 0x24
 800ec88:	f89a 3000 	ldrb.w	r3, [sl]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f000 80a2 	beq.w	800edd6 <_vfiprintf_r+0x20e>
 800ec92:	2300      	movs	r3, #0
 800ec94:	f04f 32ff 	mov.w	r2, #4294967295
 800ec98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec9c:	f10a 0a01 	add.w	sl, sl, #1
 800eca0:	9304      	str	r3, [sp, #16]
 800eca2:	9307      	str	r3, [sp, #28]
 800eca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eca8:	931a      	str	r3, [sp, #104]	; 0x68
 800ecaa:	4654      	mov	r4, sl
 800ecac:	2205      	movs	r2, #5
 800ecae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb2:	4858      	ldr	r0, [pc, #352]	; (800ee14 <_vfiprintf_r+0x24c>)
 800ecb4:	f7f1 faa4 	bl	8000200 <memchr>
 800ecb8:	9a04      	ldr	r2, [sp, #16]
 800ecba:	b9d8      	cbnz	r0, 800ecf4 <_vfiprintf_r+0x12c>
 800ecbc:	06d1      	lsls	r1, r2, #27
 800ecbe:	bf44      	itt	mi
 800ecc0:	2320      	movmi	r3, #32
 800ecc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc6:	0713      	lsls	r3, r2, #28
 800ecc8:	bf44      	itt	mi
 800ecca:	232b      	movmi	r3, #43	; 0x2b
 800eccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ecd4:	2b2a      	cmp	r3, #42	; 0x2a
 800ecd6:	d015      	beq.n	800ed04 <_vfiprintf_r+0x13c>
 800ecd8:	9a07      	ldr	r2, [sp, #28]
 800ecda:	4654      	mov	r4, sl
 800ecdc:	2000      	movs	r0, #0
 800ecde:	f04f 0c0a 	mov.w	ip, #10
 800ece2:	4621      	mov	r1, r4
 800ece4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ece8:	3b30      	subs	r3, #48	; 0x30
 800ecea:	2b09      	cmp	r3, #9
 800ecec:	d94e      	bls.n	800ed8c <_vfiprintf_r+0x1c4>
 800ecee:	b1b0      	cbz	r0, 800ed1e <_vfiprintf_r+0x156>
 800ecf0:	9207      	str	r2, [sp, #28]
 800ecf2:	e014      	b.n	800ed1e <_vfiprintf_r+0x156>
 800ecf4:	eba0 0308 	sub.w	r3, r0, r8
 800ecf8:	fa09 f303 	lsl.w	r3, r9, r3
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	9304      	str	r3, [sp, #16]
 800ed00:	46a2      	mov	sl, r4
 800ed02:	e7d2      	b.n	800ecaa <_vfiprintf_r+0xe2>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	1d19      	adds	r1, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	9103      	str	r1, [sp, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfbb      	ittet	lt
 800ed10:	425b      	neglt	r3, r3
 800ed12:	f042 0202 	orrlt.w	r2, r2, #2
 800ed16:	9307      	strge	r3, [sp, #28]
 800ed18:	9307      	strlt	r3, [sp, #28]
 800ed1a:	bfb8      	it	lt
 800ed1c:	9204      	strlt	r2, [sp, #16]
 800ed1e:	7823      	ldrb	r3, [r4, #0]
 800ed20:	2b2e      	cmp	r3, #46	; 0x2e
 800ed22:	d10c      	bne.n	800ed3e <_vfiprintf_r+0x176>
 800ed24:	7863      	ldrb	r3, [r4, #1]
 800ed26:	2b2a      	cmp	r3, #42	; 0x2a
 800ed28:	d135      	bne.n	800ed96 <_vfiprintf_r+0x1ce>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	1d1a      	adds	r2, r3, #4
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	9203      	str	r2, [sp, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bfb8      	it	lt
 800ed36:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed3a:	3402      	adds	r4, #2
 800ed3c:	9305      	str	r3, [sp, #20]
 800ed3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee24 <_vfiprintf_r+0x25c>
 800ed42:	7821      	ldrb	r1, [r4, #0]
 800ed44:	2203      	movs	r2, #3
 800ed46:	4650      	mov	r0, sl
 800ed48:	f7f1 fa5a 	bl	8000200 <memchr>
 800ed4c:	b140      	cbz	r0, 800ed60 <_vfiprintf_r+0x198>
 800ed4e:	2340      	movs	r3, #64	; 0x40
 800ed50:	eba0 000a 	sub.w	r0, r0, sl
 800ed54:	fa03 f000 	lsl.w	r0, r3, r0
 800ed58:	9b04      	ldr	r3, [sp, #16]
 800ed5a:	4303      	orrs	r3, r0
 800ed5c:	3401      	adds	r4, #1
 800ed5e:	9304      	str	r3, [sp, #16]
 800ed60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed64:	482c      	ldr	r0, [pc, #176]	; (800ee18 <_vfiprintf_r+0x250>)
 800ed66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed6a:	2206      	movs	r2, #6
 800ed6c:	f7f1 fa48 	bl	8000200 <memchr>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d03f      	beq.n	800edf4 <_vfiprintf_r+0x22c>
 800ed74:	4b29      	ldr	r3, [pc, #164]	; (800ee1c <_vfiprintf_r+0x254>)
 800ed76:	bb1b      	cbnz	r3, 800edc0 <_vfiprintf_r+0x1f8>
 800ed78:	9b03      	ldr	r3, [sp, #12]
 800ed7a:	3307      	adds	r3, #7
 800ed7c:	f023 0307 	bic.w	r3, r3, #7
 800ed80:	3308      	adds	r3, #8
 800ed82:	9303      	str	r3, [sp, #12]
 800ed84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed86:	443b      	add	r3, r7
 800ed88:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8a:	e767      	b.n	800ec5c <_vfiprintf_r+0x94>
 800ed8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed90:	460c      	mov	r4, r1
 800ed92:	2001      	movs	r0, #1
 800ed94:	e7a5      	b.n	800ece2 <_vfiprintf_r+0x11a>
 800ed96:	2300      	movs	r3, #0
 800ed98:	3401      	adds	r4, #1
 800ed9a:	9305      	str	r3, [sp, #20]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	f04f 0c0a 	mov.w	ip, #10
 800eda2:	4620      	mov	r0, r4
 800eda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eda8:	3a30      	subs	r2, #48	; 0x30
 800edaa:	2a09      	cmp	r2, #9
 800edac:	d903      	bls.n	800edb6 <_vfiprintf_r+0x1ee>
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0c5      	beq.n	800ed3e <_vfiprintf_r+0x176>
 800edb2:	9105      	str	r1, [sp, #20]
 800edb4:	e7c3      	b.n	800ed3e <_vfiprintf_r+0x176>
 800edb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800edba:	4604      	mov	r4, r0
 800edbc:	2301      	movs	r3, #1
 800edbe:	e7f0      	b.n	800eda2 <_vfiprintf_r+0x1da>
 800edc0:	ab03      	add	r3, sp, #12
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4b16      	ldr	r3, [pc, #88]	; (800ee20 <_vfiprintf_r+0x258>)
 800edc8:	a904      	add	r1, sp, #16
 800edca:	4630      	mov	r0, r6
 800edcc:	f7fd fc2c 	bl	800c628 <_printf_float>
 800edd0:	4607      	mov	r7, r0
 800edd2:	1c78      	adds	r0, r7, #1
 800edd4:	d1d6      	bne.n	800ed84 <_vfiprintf_r+0x1bc>
 800edd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edd8:	07d9      	lsls	r1, r3, #31
 800edda:	d405      	bmi.n	800ede8 <_vfiprintf_r+0x220>
 800eddc:	89ab      	ldrh	r3, [r5, #12]
 800edde:	059a      	lsls	r2, r3, #22
 800ede0:	d402      	bmi.n	800ede8 <_vfiprintf_r+0x220>
 800ede2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ede4:	f7fd fa80 	bl	800c2e8 <__retarget_lock_release_recursive>
 800ede8:	89ab      	ldrh	r3, [r5, #12]
 800edea:	065b      	lsls	r3, r3, #25
 800edec:	f53f af12 	bmi.w	800ec14 <_vfiprintf_r+0x4c>
 800edf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf2:	e711      	b.n	800ec18 <_vfiprintf_r+0x50>
 800edf4:	ab03      	add	r3, sp, #12
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	462a      	mov	r2, r5
 800edfa:	4b09      	ldr	r3, [pc, #36]	; (800ee20 <_vfiprintf_r+0x258>)
 800edfc:	a904      	add	r1, sp, #16
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7fd feb6 	bl	800cb70 <_printf_i>
 800ee04:	e7e4      	b.n	800edd0 <_vfiprintf_r+0x208>
 800ee06:	bf00      	nop
 800ee08:	0801b5d0 	.word	0x0801b5d0
 800ee0c:	0801b5f0 	.word	0x0801b5f0
 800ee10:	0801b5b0 	.word	0x0801b5b0
 800ee14:	0801b86c 	.word	0x0801b86c
 800ee18:	0801b876 	.word	0x0801b876
 800ee1c:	0800c629 	.word	0x0800c629
 800ee20:	0800eba3 	.word	0x0800eba3
 800ee24:	0801b872 	.word	0x0801b872

0800ee28 <_read_r>:
 800ee28:	b538      	push	{r3, r4, r5, lr}
 800ee2a:	4d07      	ldr	r5, [pc, #28]	; (800ee48 <_read_r+0x20>)
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	4608      	mov	r0, r1
 800ee30:	4611      	mov	r1, r2
 800ee32:	2200      	movs	r2, #0
 800ee34:	602a      	str	r2, [r5, #0]
 800ee36:	461a      	mov	r2, r3
 800ee38:	f7fa fa07 	bl	800924a <_read>
 800ee3c:	1c43      	adds	r3, r0, #1
 800ee3e:	d102      	bne.n	800ee46 <_read_r+0x1e>
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	b103      	cbz	r3, 800ee46 <_read_r+0x1e>
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	20004138 	.word	0x20004138

0800ee4c <abort>:
 800ee4c:	b508      	push	{r3, lr}
 800ee4e:	2006      	movs	r0, #6
 800ee50:	f000 f882 	bl	800ef58 <raise>
 800ee54:	2001      	movs	r0, #1
 800ee56:	f000 f9e5 	bl	800f224 <_exit>
	...

0800ee5c <_fstat_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d07      	ldr	r5, [pc, #28]	; (800ee7c <_fstat_r+0x20>)
 800ee60:	2300      	movs	r3, #0
 800ee62:	4604      	mov	r4, r0
 800ee64:	4608      	mov	r0, r1
 800ee66:	4611      	mov	r1, r2
 800ee68:	602b      	str	r3, [r5, #0]
 800ee6a:	f7fa fad2 	bl	8009412 <_fstat>
 800ee6e:	1c43      	adds	r3, r0, #1
 800ee70:	d102      	bne.n	800ee78 <_fstat_r+0x1c>
 800ee72:	682b      	ldr	r3, [r5, #0]
 800ee74:	b103      	cbz	r3, 800ee78 <_fstat_r+0x1c>
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	bd38      	pop	{r3, r4, r5, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20004138 	.word	0x20004138

0800ee80 <_isatty_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d06      	ldr	r5, [pc, #24]	; (800ee9c <_isatty_r+0x1c>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	f7fa facf 	bl	800942e <_isatty>
 800ee90:	1c43      	adds	r3, r0, #1
 800ee92:	d102      	bne.n	800ee9a <_isatty_r+0x1a>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b103      	cbz	r3, 800ee9a <_isatty_r+0x1a>
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	20004138 	.word	0x20004138

0800eea0 <__ascii_mbtowc>:
 800eea0:	b082      	sub	sp, #8
 800eea2:	b901      	cbnz	r1, 800eea6 <__ascii_mbtowc+0x6>
 800eea4:	a901      	add	r1, sp, #4
 800eea6:	b142      	cbz	r2, 800eeba <__ascii_mbtowc+0x1a>
 800eea8:	b14b      	cbz	r3, 800eebe <__ascii_mbtowc+0x1e>
 800eeaa:	7813      	ldrb	r3, [r2, #0]
 800eeac:	600b      	str	r3, [r1, #0]
 800eeae:	7812      	ldrb	r2, [r2, #0]
 800eeb0:	1e10      	subs	r0, r2, #0
 800eeb2:	bf18      	it	ne
 800eeb4:	2001      	movne	r0, #1
 800eeb6:	b002      	add	sp, #8
 800eeb8:	4770      	bx	lr
 800eeba:	4610      	mov	r0, r2
 800eebc:	e7fb      	b.n	800eeb6 <__ascii_mbtowc+0x16>
 800eebe:	f06f 0001 	mvn.w	r0, #1
 800eec2:	e7f8      	b.n	800eeb6 <__ascii_mbtowc+0x16>

0800eec4 <memmove>:
 800eec4:	4288      	cmp	r0, r1
 800eec6:	b510      	push	{r4, lr}
 800eec8:	eb01 0402 	add.w	r4, r1, r2
 800eecc:	d902      	bls.n	800eed4 <memmove+0x10>
 800eece:	4284      	cmp	r4, r0
 800eed0:	4623      	mov	r3, r4
 800eed2:	d807      	bhi.n	800eee4 <memmove+0x20>
 800eed4:	1e43      	subs	r3, r0, #1
 800eed6:	42a1      	cmp	r1, r4
 800eed8:	d008      	beq.n	800eeec <memmove+0x28>
 800eeda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eede:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eee2:	e7f8      	b.n	800eed6 <memmove+0x12>
 800eee4:	4402      	add	r2, r0
 800eee6:	4601      	mov	r1, r0
 800eee8:	428a      	cmp	r2, r1
 800eeea:	d100      	bne.n	800eeee <memmove+0x2a>
 800eeec:	bd10      	pop	{r4, pc}
 800eeee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eef6:	e7f7      	b.n	800eee8 <memmove+0x24>

0800eef8 <_malloc_usable_size_r>:
 800eef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eefc:	1f18      	subs	r0, r3, #4
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	bfbc      	itt	lt
 800ef02:	580b      	ldrlt	r3, [r1, r0]
 800ef04:	18c0      	addlt	r0, r0, r3
 800ef06:	4770      	bx	lr

0800ef08 <_raise_r>:
 800ef08:	291f      	cmp	r1, #31
 800ef0a:	b538      	push	{r3, r4, r5, lr}
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	460d      	mov	r5, r1
 800ef10:	d904      	bls.n	800ef1c <_raise_r+0x14>
 800ef12:	2316      	movs	r3, #22
 800ef14:	6003      	str	r3, [r0, #0]
 800ef16:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef1e:	b112      	cbz	r2, 800ef26 <_raise_r+0x1e>
 800ef20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef24:	b94b      	cbnz	r3, 800ef3a <_raise_r+0x32>
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 f830 	bl	800ef8c <_getpid_r>
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	4601      	mov	r1, r0
 800ef30:	4620      	mov	r0, r4
 800ef32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef36:	f000 b817 	b.w	800ef68 <_kill_r>
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d00a      	beq.n	800ef54 <_raise_r+0x4c>
 800ef3e:	1c59      	adds	r1, r3, #1
 800ef40:	d103      	bne.n	800ef4a <_raise_r+0x42>
 800ef42:	2316      	movs	r3, #22
 800ef44:	6003      	str	r3, [r0, #0]
 800ef46:	2001      	movs	r0, #1
 800ef48:	e7e7      	b.n	800ef1a <_raise_r+0x12>
 800ef4a:	2400      	movs	r4, #0
 800ef4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef50:	4628      	mov	r0, r5
 800ef52:	4798      	blx	r3
 800ef54:	2000      	movs	r0, #0
 800ef56:	e7e0      	b.n	800ef1a <_raise_r+0x12>

0800ef58 <raise>:
 800ef58:	4b02      	ldr	r3, [pc, #8]	; (800ef64 <raise+0xc>)
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	6818      	ldr	r0, [r3, #0]
 800ef5e:	f7ff bfd3 	b.w	800ef08 <_raise_r>
 800ef62:	bf00      	nop
 800ef64:	2000098c 	.word	0x2000098c

0800ef68 <_kill_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	4d07      	ldr	r5, [pc, #28]	; (800ef88 <_kill_r+0x20>)
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4604      	mov	r4, r0
 800ef70:	4608      	mov	r0, r1
 800ef72:	4611      	mov	r1, r2
 800ef74:	602b      	str	r3, [r5, #0]
 800ef76:	f000 f94d 	bl	800f214 <_kill>
 800ef7a:	1c43      	adds	r3, r0, #1
 800ef7c:	d102      	bne.n	800ef84 <_kill_r+0x1c>
 800ef7e:	682b      	ldr	r3, [r5, #0]
 800ef80:	b103      	cbz	r3, 800ef84 <_kill_r+0x1c>
 800ef82:	6023      	str	r3, [r4, #0]
 800ef84:	bd38      	pop	{r3, r4, r5, pc}
 800ef86:	bf00      	nop
 800ef88:	20004138 	.word	0x20004138

0800ef8c <_getpid_r>:
 800ef8c:	f7fa ba1e 	b.w	80093cc <_getpid>

0800ef90 <__ascii_wctomb>:
 800ef90:	b149      	cbz	r1, 800efa6 <__ascii_wctomb+0x16>
 800ef92:	2aff      	cmp	r2, #255	; 0xff
 800ef94:	bf85      	ittet	hi
 800ef96:	238a      	movhi	r3, #138	; 0x8a
 800ef98:	6003      	strhi	r3, [r0, #0]
 800ef9a:	700a      	strbls	r2, [r1, #0]
 800ef9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800efa0:	bf98      	it	ls
 800efa2:	2001      	movls	r0, #1
 800efa4:	4770      	bx	lr
 800efa6:	4608      	mov	r0, r1
 800efa8:	4770      	bx	lr
	...

0800efac <expf>:
 800efac:	b508      	push	{r3, lr}
 800efae:	ed2d 8b02 	vpush	{d8}
 800efb2:	eef0 8a40 	vmov.f32	s17, s0
 800efb6:	f000 f82f 	bl	800f018 <__ieee754_expf>
 800efba:	eeb0 8a40 	vmov.f32	s16, s0
 800efbe:	eeb0 0a68 	vmov.f32	s0, s17
 800efc2:	f000 f919 	bl	800f1f8 <finitef>
 800efc6:	b160      	cbz	r0, 800efe2 <expf+0x36>
 800efc8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f008 <expf+0x5c>
 800efcc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800efd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd4:	dd0a      	ble.n	800efec <expf+0x40>
 800efd6:	f7fd f865 	bl	800c0a4 <__errno>
 800efda:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800f00c <expf+0x60>
 800efde:	2322      	movs	r3, #34	; 0x22
 800efe0:	6003      	str	r3, [r0, #0]
 800efe2:	eeb0 0a48 	vmov.f32	s0, s16
 800efe6:	ecbd 8b02 	vpop	{d8}
 800efea:	bd08      	pop	{r3, pc}
 800efec:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f010 <expf+0x64>
 800eff0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	d5f3      	bpl.n	800efe2 <expf+0x36>
 800effa:	f7fd f853 	bl	800c0a4 <__errno>
 800effe:	2322      	movs	r3, #34	; 0x22
 800f000:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f014 <expf+0x68>
 800f004:	6003      	str	r3, [r0, #0]
 800f006:	e7ec      	b.n	800efe2 <expf+0x36>
 800f008:	42b17180 	.word	0x42b17180
 800f00c:	7f800000 	.word	0x7f800000
 800f010:	c2cff1b5 	.word	0xc2cff1b5
 800f014:	00000000 	.word	0x00000000

0800f018 <__ieee754_expf>:
 800f018:	ee10 2a10 	vmov	r2, s0
 800f01c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f020:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f024:	d902      	bls.n	800f02c <__ieee754_expf+0x14>
 800f026:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f02a:	4770      	bx	lr
 800f02c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f030:	d106      	bne.n	800f040 <__ieee754_expf+0x28>
 800f032:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f16c <__ieee754_expf+0x154>
 800f036:	2b00      	cmp	r3, #0
 800f038:	bf18      	it	ne
 800f03a:	eeb0 0a67 	vmovne.f32	s0, s15
 800f03e:	4770      	bx	lr
 800f040:	484b      	ldr	r0, [pc, #300]	; (800f170 <__ieee754_expf+0x158>)
 800f042:	4282      	cmp	r2, r0
 800f044:	dd02      	ble.n	800f04c <__ieee754_expf+0x34>
 800f046:	2000      	movs	r0, #0
 800f048:	f000 b8d0 	b.w	800f1ec <__math_oflowf>
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	da05      	bge.n	800f05c <__ieee754_expf+0x44>
 800f050:	4a48      	ldr	r2, [pc, #288]	; (800f174 <__ieee754_expf+0x15c>)
 800f052:	4291      	cmp	r1, r2
 800f054:	d902      	bls.n	800f05c <__ieee754_expf+0x44>
 800f056:	2000      	movs	r0, #0
 800f058:	f000 b8c2 	b.w	800f1e0 <__math_uflowf>
 800f05c:	4a46      	ldr	r2, [pc, #280]	; (800f178 <__ieee754_expf+0x160>)
 800f05e:	4291      	cmp	r1, r2
 800f060:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f064:	d952      	bls.n	800f10c <__ieee754_expf+0xf4>
 800f066:	4a45      	ldr	r2, [pc, #276]	; (800f17c <__ieee754_expf+0x164>)
 800f068:	4291      	cmp	r1, r2
 800f06a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f06e:	d834      	bhi.n	800f0da <__ieee754_expf+0xc2>
 800f070:	4943      	ldr	r1, [pc, #268]	; (800f180 <__ieee754_expf+0x168>)
 800f072:	4411      	add	r1, r2
 800f074:	ed91 7a00 	vldr	s14, [r1]
 800f078:	4942      	ldr	r1, [pc, #264]	; (800f184 <__ieee754_expf+0x16c>)
 800f07a:	440a      	add	r2, r1
 800f07c:	edd2 7a00 	vldr	s15, [r2]
 800f080:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f084:	f1c3 0201 	rsb	r2, r3, #1
 800f088:	1ad2      	subs	r2, r2, r3
 800f08a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f08e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f092:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800f188 <__ieee754_expf+0x170>
 800f096:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f18c <__ieee754_expf+0x174>
 800f09a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800f09e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800f190 <__ieee754_expf+0x178>
 800f0a2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f0a6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f194 <__ieee754_expf+0x17c>
 800f0aa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800f0ae:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f198 <__ieee754_expf+0x180>
 800f0b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800f0b6:	eef0 6a40 	vmov.f32	s13, s0
 800f0ba:	eee5 6a46 	vfms.f32	s13, s10, s12
 800f0be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f0c2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800f0c6:	bb92      	cbnz	r2, 800f12e <__ieee754_expf+0x116>
 800f0c8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f0cc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f0d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f0d4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800f0d8:	4770      	bx	lr
 800f0da:	4b30      	ldr	r3, [pc, #192]	; (800f19c <__ieee754_expf+0x184>)
 800f0dc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800f1a0 <__ieee754_expf+0x188>
 800f0e0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f1a4 <__ieee754_expf+0x18c>
 800f0e4:	4413      	add	r3, r2
 800f0e6:	edd3 7a00 	vldr	s15, [r3]
 800f0ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f0ee:	eeb0 7a40 	vmov.f32	s14, s0
 800f0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0f6:	ee17 2a90 	vmov	r2, s15
 800f0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0fe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f102:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f1a8 <__ieee754_expf+0x190>
 800f106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f10a:	e7be      	b.n	800f08a <__ieee754_expf+0x72>
 800f10c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800f110:	d20b      	bcs.n	800f12a <__ieee754_expf+0x112>
 800f112:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f1ac <__ieee754_expf+0x194>
 800f116:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f11a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f122:	dd02      	ble.n	800f12a <__ieee754_expf+0x112>
 800f124:	ee30 0a25 	vadd.f32	s0, s0, s11
 800f128:	4770      	bx	lr
 800f12a:	2200      	movs	r2, #0
 800f12c:	e7af      	b.n	800f08e <__ieee754_expf+0x76>
 800f12e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f132:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f136:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f13a:	bfb8      	it	lt
 800f13c:	3264      	addlt	r2, #100	; 0x64
 800f13e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f142:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f146:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800f14a:	ee17 3a90 	vmov	r3, s15
 800f14e:	bfab      	itete	ge
 800f150:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f154:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f158:	ee00 3a10 	vmovge	s0, r3
 800f15c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800f1b0 <__ieee754_expf+0x198>
 800f160:	bfbc      	itt	lt
 800f162:	ee00 3a10 	vmovlt	s0, r3
 800f166:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f16a:	4770      	bx	lr
 800f16c:	00000000 	.word	0x00000000
 800f170:	42b17217 	.word	0x42b17217
 800f174:	42cff1b5 	.word	0x42cff1b5
 800f178:	3eb17218 	.word	0x3eb17218
 800f17c:	3f851591 	.word	0x3f851591
 800f180:	0801b990 	.word	0x0801b990
 800f184:	0801b998 	.word	0x0801b998
 800f188:	3331bb4c 	.word	0x3331bb4c
 800f18c:	b5ddea0e 	.word	0xb5ddea0e
 800f190:	388ab355 	.word	0x388ab355
 800f194:	bb360b61 	.word	0xbb360b61
 800f198:	3e2aaaab 	.word	0x3e2aaaab
 800f19c:	0801b988 	.word	0x0801b988
 800f1a0:	3fb8aa3b 	.word	0x3fb8aa3b
 800f1a4:	3f317180 	.word	0x3f317180
 800f1a8:	3717f7d1 	.word	0x3717f7d1
 800f1ac:	7149f2ca 	.word	0x7149f2ca
 800f1b0:	0d800000 	.word	0x0d800000

0800f1b4 <with_errnof>:
 800f1b4:	b513      	push	{r0, r1, r4, lr}
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f1bc:	f7fc ff72 	bl	800c0a4 <__errno>
 800f1c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f1c4:	6004      	str	r4, [r0, #0]
 800f1c6:	b002      	add	sp, #8
 800f1c8:	bd10      	pop	{r4, pc}

0800f1ca <xflowf>:
 800f1ca:	b130      	cbz	r0, 800f1da <xflowf+0x10>
 800f1cc:	eef1 7a40 	vneg.f32	s15, s0
 800f1d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f1d4:	2022      	movs	r0, #34	; 0x22
 800f1d6:	f7ff bfed 	b.w	800f1b4 <with_errnof>
 800f1da:	eef0 7a40 	vmov.f32	s15, s0
 800f1de:	e7f7      	b.n	800f1d0 <xflowf+0x6>

0800f1e0 <__math_uflowf>:
 800f1e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f1e8 <__math_uflowf+0x8>
 800f1e4:	f7ff bff1 	b.w	800f1ca <xflowf>
 800f1e8:	10000000 	.word	0x10000000

0800f1ec <__math_oflowf>:
 800f1ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f1f4 <__math_oflowf+0x8>
 800f1f0:	f7ff bfeb 	b.w	800f1ca <xflowf>
 800f1f4:	70000000 	.word	0x70000000

0800f1f8 <finitef>:
 800f1f8:	b082      	sub	sp, #8
 800f1fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f1fe:	9801      	ldr	r0, [sp, #4]
 800f200:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f204:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f208:	bfac      	ite	ge
 800f20a:	2000      	movge	r0, #0
 800f20c:	2001      	movlt	r0, #1
 800f20e:	b002      	add	sp, #8
 800f210:	4770      	bx	lr
	...

0800f214 <_kill>:
 800f214:	4b02      	ldr	r3, [pc, #8]	; (800f220 <_kill+0xc>)
 800f216:	2258      	movs	r2, #88	; 0x58
 800f218:	601a      	str	r2, [r3, #0]
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	4770      	bx	lr
 800f220:	20004138 	.word	0x20004138

0800f224 <_exit>:
 800f224:	e7fe      	b.n	800f224 <_exit>
	...

0800f228 <_init>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	bf00      	nop
 800f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22e:	bc08      	pop	{r3}
 800f230:	469e      	mov	lr, r3
 800f232:	4770      	bx	lr

0800f234 <_fini>:
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	bf00      	nop
 800f238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23a:	bc08      	pop	{r3}
 800f23c:	469e      	mov	lr, r3
 800f23e:	4770      	bx	lr
